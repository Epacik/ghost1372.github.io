<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[Welcome to Softwares]]></title>
    <url>%2Fsoftwares%2Findex.html</url>
    <content type="text"><![CDATA[In this section you will be introduced to some free software that use HandyControl]]></content>
  </entry>
  <entry>
    <title><![CDATA[Welcome to HandyControl]]></title>
    <url>%2Fhandycontrol%2Findex.html</url>
    <content type="text"><![CDATA[HandyControl is a WPF control library that rewrites almost all native styles and includes more than 80 custom controls (increasingly). Requirements Download Nuget Github Extension HandyControl-Nuget HandyControl-Github HandyControl-Extension HandyControls-Nuget HandyControls-Github HandyControls-Extension 1.HandyControls is a custom version based on HandyControl and Nuget package is released faster than the original version.2.Nuget packages are generally released at least once a month.3.Github is generally updated every day and is relatively unsuitable for production. Project Structure Introductionthe whole frameAfter cloning the source code from Github, go to the src folder. The folder structure is as follows: Net_GE45 means that the .Net version is greater than or equal to 4.5. The Shared folder is used to store the code of the shared project. The five folders in the figure each contain two subfolders, for example, two shared subfolders in Shared: They store the source code of the control and the sample source of the control. Source structureWe use HandyControl.sln as an example to illustrate, use VS2019 to open the solution: If you want to start the example and see the effect of the control, please use HandyControlDemo_[specified item type] as the startup item. As shown in the figure, HandyControlDemo_Net_GE45 has been used as the startup item. Most of the public source code is in the Shared folder, and some of the code that needs to be customized for a particular project type is proposed to be placed in its own folder. The HandyControl source code (mainly in HandyControl_Shared) mainly contains 7 folders, and their descriptions are as follows: Name Use Controls Background interaction logic with all controls Data Basic data definitions required by the control library Expression Extracted from Microsoft.Expression.Drawing Interactivity Extracted from Microsoft.Expression.Interactions &amp; System.Windows.Interactivity and made some modifications Properties Contains control library properties and language packs Themes Contains all xaml definitions for the control library Tools Mainly contains the help methods and extension methods required by the control library Each control in Controls can generally find the corresponding xaml definition in Themes. Compile source code Please confirm that your development environment meets the requirements before compiling.Visual Studio 2019.Net greater than or equal to 5.0.100-preview.7 Open HandyControl.sln and select the specified environment to compile in the Solution Configuration drop-down box: Compile source code with PowershellGo to Build folder and open Powershell here, then execute this command 1.\build.ps1]]></content>
  </entry>
  <entry>
    <title><![CDATA[Additional attribute]]></title>
    <url>%2Fhandycontrol%2Fattach%2Findex.html</url>
    <content type="text"><![CDATA[Additional property source code in the Controls / Attach folder: Classes ending with Element can set some common properties for all controls. Classes ending with Attach can only set related properties for a control.]]></content>
  </entry>
  <entry>
    <title><![CDATA[Basic xaml definition]]></title>
    <url>%2Fhandycontrol%2Fbasic_xaml%2Findex.html</url>
    <content type="text"><![CDATA[The basic xaml definitions are in the Basic folder, and their internal structure is as follows: A description of them is given in the following table: Name Use Colors contains 3 built-in color definition files Basic.xaml Wrapped basic xaml definitions Behaviors.xaml Contains all behavior definitions Brushes.xaml Contains all brush definitions Converters.xaml Contains all converter definitions Effects.xaml Contains all effect definitions Fonts.xaml Contains all font size definitions Geometries.xaml Contains all geometry definitions, mostly for Path Paths.xaml contains all Path path definitions Sizes.xaml Contains all size definitions]]></content>
  </entry>
  <entry>
    <title><![CDATA[Extended Control]]></title>
    <url>%2Fhandycontrol%2Fextend_controls%2Findex.html</url>
    <content type="text"><![CDATA[HandyControl currently contains more than 80 extended controls, which are gradually increasing.]]></content>
  </entry>
  <entry>
    <title><![CDATA[Data]]></title>
    <url>%2Fhandycontrol%2Fdata%2Findex.html</url>
    <content type="text"><![CDATA[Coming Soon]]></content>
  </entry>
  <entry>
    <title><![CDATA[Interactivity]]></title>
    <url>%2Fhandycontrol%2Finteractivity%2Findex.html</url>
    <content type="text"><![CDATA[In this section you will be introduced to interactivity codes. for example Triggers, Behaviors, Commands, and Hooks.]]></content>
  </entry>
  <entry>
    <title><![CDATA[Globalization]]></title>
    <url>%2Fhandycontrol%2Flangs%2Findex.html</url>
    <content type="text"><![CDATA[Way of useThe language package to be used can be specified by ConfigHelper.Instance.SetLang(string lang), English (en) is used by default. The language package that comes with the control library is generally used internally by the control library, but users can also use it in the following two ways: xamlThe first step is to introduce the namespace: xmlns:hc=&quot;https://handyorg.github.io/handycontrol&quot;The second step is to use the language pack: &lt;TextBlock Text=&quot;{x:Static hc:Lang.Cancel}&quot;/&gt; C#HandyControl.Properties.Langs.Lang.Cancel Language packsThe language packs included with the control library include: Simplified Chinese (zh-cn) English (en) Persian (fa) French (fr) Korean (ko-kr) Russian (ru) Turkish (tr) Brazillian (pt-br) The default is English (en). If you need to expand on your own, it is recommended to use the open source plugin: ResXManager to maintain all language packs. After the control library is referenced, the language package folder is generated in the running directory, and its naming style is like zh-cn, en, and so on. Dynamic Multi LanguageYou can use this method to bring dynamic multilingual switching features to your applications How to use?First you need to create a folder in properties, here our folder called Langs We are going to create language files in this folder.add resource files into this folder you can Right-click on folder and from the Add New Item option Select Resources file Be careful when naming it. The default language can be without a language codeNo matter how many languages you have, you need to create a resource file for that language.You must include a 2-digit or 5-digit language code in resource file name. We want our program to have 2 languages, English and Persian So I create 2 resource files Pay attention to the naming method. Lang.resx Lang.en.resx or Lang.en-US.resx now we need to create a class called LangProvider we should declare our language resource here and Make a reference to the LangProvider class: 1234567891011121314151617181920212223242526272829303132333435363738394041424344public class LangProvider : INotifyPropertyChanged&#123; internal static LangProvider Instance =&gt; ResourceHelper.GetResource&lt;LangProvider&gt;("DemoLangs"); private static string CultureInfoStr; public static CultureInfo Culture &#123; get =&gt; Lang.Culture; set &#123; if (value == null) return; if (Equals(CultureInfoStr, value.EnglishName)) return; Lang.Culture = value; CultureInfoStr = value.EnglishName; Instance.UpdateLangs(); &#125; &#125; public static string GetLang(string key) =&gt; Lang.ResourceManager.GetString(key, Culture); public static void SetLang(DependencyObject dependencyObject, DependencyProperty dependencyProperty, string key) =&gt; BindingOperations.SetBinding(dependencyObject, dependencyProperty, new Binding(key) &#123; Source = Instance, Mode = BindingMode.OneWay &#125;); private void UpdateLangs() &#123; OnPropertyChanged(nameof(About)); &#125; public event PropertyChangedEventHandler PropertyChanged; protected virtual void OnPropertyChanged(string propertyName) =&gt; PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName)); public string About =&gt; Lang.About;&#125; public class LangKeys &#123; public static string About = nameof(About); &#125; you should add all of your language resources here:OnPropertyChanged(nameof(About));public string About =&gt; Lang.About;public static string About = nameof(About); Because it is time consuming and tedious, you can use text templates (t4) or similar options to automatically generate all language resources.this is a example of t4 that can generate all language resources:1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374&lt;#@ template debug=&quot;false&quot; hostspecific=&quot;false&quot; language=&quot;C#&quot; #&gt;&lt;#@ assembly name=&quot;System.Core&quot; #&gt;&lt;#@ import namespace=&quot;System.Linq&quot; #&gt;&lt;#@ import namespace=&quot;System.Collections.Generic&quot;#&gt;&lt;#@ assembly name=&quot;$(TargetPath)&quot; #&gt;&lt;#@ import namespace=&quot;HandyControlDemo.Properties.Langs&quot; #&gt;&lt;#@ output extension=&quot;.cs&quot; #&gt;&lt;# var resourceType = typeof(Lang); var propertyNameList = resourceType.GetProperties().Where(item =&gt; item.PropertyType == typeof(string)).Select(item =&gt; item.Name); var langDic = new Dictionary&lt;string, string&gt;(); foreach(var item in propertyNameList) &#123; langDic[item] = @$&quot;/// &lt;summary&gt; /// &#123;string.Format(Lang.LangComment, Lang.ResourceManager.GetString(item, Lang.Culture))&#125; /// &lt;/summary&gt;&quot;; &#125;#&gt;using System.ComponentModel;using System.Globalization;using System.Windows;using System.Windows.Data;using HandyControl.Tools;namespace HandyControlDemo.Properties.Langs&#123; public class LangProvider : INotifyPropertyChanged &#123; internal static LangProvider Instance =&gt; ResourceHelper.GetResource&lt;LangProvider&gt;(&quot;DemoLangs&quot;); private static string CultureInfoStr; public static CultureInfo Culture &#123; get =&gt; Lang.Culture; set &#123; if (value == null) return; if (Equals(CultureInfoStr, value.EnglishName)) return; Lang.Culture = value; CultureInfoStr = value.EnglishName; Instance.UpdateLangs(); &#125; &#125; public static string GetLang(string key) =&gt; Lang.ResourceManager.GetString(key, Culture); public static void SetLang(DependencyObject dependencyObject, DependencyProperty dependencyProperty, string key) =&gt; BindingOperations.SetBinding(dependencyObject, dependencyProperty, new Binding(key) &#123; Source = Instance, Mode = BindingMode.OneWay &#125;); private void UpdateLangs() &#123;&lt;#foreach(var item in propertyNameList)#&gt; &#125;&lt;#foreach(var item in propertyNameList)#&gt; public event PropertyChangedEventHandler PropertyChanged; protected virtual void OnPropertyChanged(string propertyName) =&gt; PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName)); &#125; public class LangKeys &#123;&lt;#foreach(var item in propertyNameList)#&gt; &#125;&#125; now in app.xaml after MergedDictionary write this code:1&lt;langs:LangProvider x:Key="DemoLangs"/&gt; langs is refrence to language folder xmlns:langs=&quot;clr-namespace:HandyControlDemo.Properties.Langs&quot; finally we need to create a class called LangExtension that should inherit from HandyControl.Tools.Extension.LangExtension so we have:1234567public class LangExtension : HandyControl.Tools.Extension.LangExtension &#123; public LangExtension() &#123; Source = LangProvider.Instance; &#125; &#125; How to use in Xaml?First we need to introduce the Language folder and LangExtension class to the program: 12xmlns:langs="clr-namespace:&#123;YOUR NAMESPACE&#125;.Properties.Langs"xmlns:ex="clr-namespace:&#123;YOUR NAMESPACE&#125;.LangExtension" Now all you have to do is set your key like this1&lt;Button Content="&#123;ex:Lang Key=&#123;x:Static langs:LangKeys.About&#125;&#125;"/&gt; if you need to using binding:1&lt;Button Content="&#123;ex:Lang Key=&#123;Binding Name&#125;&#125;"/&gt; How to use in Csharp?It is very easy to use in Code-Behind1MessageBox.Show(LangProvider.GetLang("About")); How to Change language in Runtime?To change the language in runtime, just write the following code and specify the language code12ConfigHelper.Instance.SetLang("en");LangProvider.Culture = new CultureInfo("en");]]></content>
  </entry>
  <entry>
    <title><![CDATA[Native Control]]></title>
    <url>%2Fhandycontrol%2Fnative_controls%2Findex.html</url>
    <content type="text"><![CDATA[Native controls refer to the controls that come with the WPF framework. In addition to this, simple extensions are implemented through additional properties. In HandyControl, almost all native controls have a base style that is implemented by default (that is, when a style is defined, the given Key value is not displayed). The base style generally has the word “Base”. It is not recommended for users to use it directly in the view layer. The appropriate usage scenario is a resource file. FAQ How can I override the default implementation of the style? Can I give BaseOn without a Key? You can use this syntax: BasedOn=&quot;{StaticResource {x:Type Button}}&quot; to override the default style of Button.]]></content>
  </entry>
  <entry>
    <title><![CDATA[PersianToolkit]]></title>
    <url>%2Fhandycontrol%2FpersianToolkit%2Findex.html</url>
    <content type="text"><![CDATA[Includes Additional controls, Attached properties and styles AttachedProperty Available Attached Property ListBox Attributes Available Property CoverView Tag TabControl MessageBox SideMenu Styles Available Styles Button Label ListBox TabControl ProgressBar TextBlock ToggleButton Badge CircleProgressBar ProgressButton SplitButton TabControl WaveProgressBar Controls Available Controls BusyIndicator GithubTimeLine LoadingIndicator MaskedTextBox PersianCalendar PersianCalendarWithClock PersianDatePicker PersianDateTimePicker SpeedoMeter MainContentBackground CheckTreeView ColorPicker [Color Picker Can Work outside of Application] Tools Available Tools Extensions Helpers BindToEnum PersianDate Dynamic Multi Language Converters Brushes Colors Interactivity]]></content>
  </entry>
  <entry>
    <title><![CDATA[Quick start]]></title>
    <url>%2Fhandycontrol%2Fquick_start%2Findex.html</url>
    <content type="text"><![CDATA[Easy WaysDownload the source code or reference the control library in Nuget mode or use Extension Nuget Github Extension HandyControl-Nuget HandyControl-Github HandyControl-Extension HandyControls-Nuget HandyControls-Github HandyControls-Extension if you are using Nuget Package or Source Code you need to Add the following code to App.xaml:12345678910&lt;Application xmlns:hc=“https://handyorg.github.io/handycontrol&quot;&gt;&lt;Application.Resources&gt; &lt;ResourceDictionary&gt; &lt;ResourceDictionary.MergedDictionaries&gt; &lt;hc:Theme Name=“HandyTheme”/&gt; &lt;/ResourceDictionary.MergedDictionaries&gt; &lt;/ResourceDictionary&gt; &lt;/Application.Resources&gt;&lt;/Application&gt;In older versions of 2.5.1, you should add this code12345678&lt;Application.Resources&gt; &lt;ResourceDictionary&gt; &lt;ResourceDictionary.MergedDictionaries&gt; &lt;ResourceDictionary Source=“pack://application:,,,/HandyControl;component/Themes/SkinDefault.xaml”/&gt; &lt;ResourceDictionary Source=“pack://application:,,,/HandyControl;component/Themes/Theme.xaml”/&gt; &lt;/ResourceDictionary.MergedDictionaries&gt; &lt;/ResourceDictionary&gt;&lt;/Application.Resources&gt; Last stepAdd a namespace: xmlns:hc=&quot;https://handyorg.github.io/handycontrol&quot; Extensionjust download and install handycontrol template from marketplace. in this way you dont need to add anything after installing hc, create new project with handycontrol template]]></content>
  </entry>
  <entry>
    <title><![CDATA[Theme]]></title>
    <url>%2Fhandycontrol%2Ftheme%2Findex.html</url>
    <content type="text"><![CDATA[Changing ThemeThere is 3 themes (Light, Dark and Violet) that you can use in your application. Set Skin in Xamlset Skin tag in &lt;hc:Theme123&lt;ResourceDictionary.MergedDictionaries&gt; &lt;hc:Theme Skin="Dark"/&gt;&lt;/ResourceDictionary.MergedDictionaries&gt; Set Skin in Code-Behindset a name for &lt;hc:Theme and create a function 123&lt;ResourceDictionary.MergedDictionaries&gt; &lt;hc:Theme Name="HandyTheme"/&gt;&lt;/ResourceDictionary.MergedDictionaries&gt; 123456internal void UpdateSkin(SkinType skin)&#123; SharedResourceDictionary.SharedDictionaries.Clear(); ResourceHelper.GetTheme("HandyTheme", Resources).Skin = skin; Current.MainWindow?.OnApplyTemplate();&#125; In older versions, follow this 12345678&lt;Application.Resources&gt; &lt;ResourceDictionary&gt; &lt;ResourceDictionary.MergedDictionaries&gt; &lt;ResourceDictionary Source="pack://application:,,,/HandyControl;component/Themes/SkinDefault.xaml"/&gt; &lt;ResourceDictionary Source="pack://application:,,,/HandyControl;component/Themes/Theme.xaml"/&gt; &lt;/ResourceDictionary.MergedDictionaries&gt; &lt;/ResourceDictionary&gt;&lt;/Application.Resources&gt; 12345678910public void UpdateSkin(SkinType skin) &#123; SharedResourceDictionary.SharedDictionaries.Clear(); Resources.MergedDictionaries.Add(ResourceHelper.GetSkin(skin)); Resources.MergedDictionaries.Add(new ResourceDictionary &#123; Source = new Uri("pack://application:,,,/HandyControl;component/Themes/Theme.xaml") &#125;); Current.MainWindow?.OnApplyTemplate(); &#125; now you can change your theme in this way: 1UpdateSkin(SkinType.Dark); Themes Name Default Dark Violet Adding or Overriding styles and colors according to the theme of the programyou can override or add colors and styles, for doing that follow the instructions first create folders:Resources\Themes\StylesResources\Themes\Basic\Colors second create xaml 12345678910111213141516Resources\Themes\Theme.xamlResources\Themes\SkinDark.xamlResources\Themes\SkinDefault.xamlResources\Themes\SkinViolet.xamlResources\Themes\Styles\Style.xamlResources\Themes\Basic\Colors\Colors.xamlResources\Themes\Basic\Colors\ColorsDark.xamlResources\Themes\Basic\Colors\ColorsViolet.xamlResources\Themes\Basic\Basic.xamlResources\Themes\Basic\Brushes.xamlResources\Themes\Basic\Converters.xamlResources\Themes\Basic\Fonts.xamlResources\Themes\Basic\Geometries.xaml If you follow these instructions, your styles and colors will change with a dark and light theme ColorsYou can put the colors in this color files.123Resources\Themes\Basic\Colors\Colors.xamlResources\Themes\Basic\Colors\ColorsDark.xamlResources\Themes\Basic\Colors\ColorsViolet.xaml To support the dark or violet mode, you need to write all three files You can also skip them and use only the Colors.xaml file (But then your colors will not change with the theme)1&lt;Color x:Key="PrimaryColor"&gt;#326cf3&lt;/Color&gt; The key must be the same in all files Brushes, Converters, Fonts, Geometries, StylesYou can put any of the brushes, converters, fonts, styles and geometries In those files. BasicWe address Brushes.xaml, Geometries.xaml, Converters.xaml and Fonts.xaml dictionaries in this file, So our file will be like this12345678910 &lt;ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"&gt; &lt;ResourceDictionary.MergedDictionaries&gt; &lt;ResourceDictionary Source="Brushes.xaml"/&gt; &lt;ResourceDictionary Source="Geometries.xaml"/&gt; &lt;ResourceDictionary Source="Converters.xaml"/&gt; &lt;ResourceDictionary Source="Fonts.xaml"/&gt; &lt;/ResourceDictionary.MergedDictionaries&gt;&lt;/ResourceDictionary&gt; SkinDark.xaml, SkinViolet.xaml, SkinDefault.xamlWe need to specify the color files in these files, For example, we do this for SkinDark.xaml file1234567&lt;ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"&gt; &lt;ResourceDictionary.MergedDictionaries&gt; &lt;ResourceDictionary Source="Basic/Colors/ColorsDark.xaml"/&gt; &lt;/ResourceDictionary.MergedDictionaries&gt;&lt;/ResourceDictionary&gt; Theme.xamlWe address Basic.xaml and Style.xaml dictionaries in this file, So our file will be like this12345678&lt;ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"&gt; &lt;ResourceDictionary.MergedDictionaries&gt; &lt;ResourceDictionary Source="Basic/Basic.xaml"/&gt; &lt;ResourceDictionary Source="Styles/Style.xaml"/&gt; &lt;/ResourceDictionary.MergedDictionaries&gt;&lt;/ResourceDictionary&gt; Last Stepcreate a class called DemoTheme.cs this class should inherit from Theme HandyControlDemo is your application namespace 1234567public class DemoTheme : Theme &#123; public override Uri ThemeUri =&gt; new Uri("pack://application:,,,/HandyControlDemo;component/Resources/Themes/Theme.xaml"); public override ResourceDictionary GetSkin(SkinType skinType) =&gt; ResourceHelper.GetSkin(typeof(App).Assembly, "Resources/Themes", skinType); &#125; now in app.xaml 1234&lt;ResourceDictionary.MergedDictionaries&gt; &lt;hc:Theme Name="HandyTheme"/&gt; &lt;resources:DemoTheme Name="DemoTheme"/&gt;&lt;/ResourceDictionary.MergedDictionaries&gt; and for changing theme we should update our UpdateSkin function12345678internal void UpdateSkin(SkinType skin)&#123; SharedResourceDictionary.SharedDictionaries.Clear(); ResourceHelper.GetTheme("HandyTheme", Resources).Skin = skin; ResourceHelper.GetTheme("DemoTheme", Resources).Skin = skin; Current.MainWindow?.OnApplyTemplate();&#125;]]></content>
  </entry>
  <entry>
    <title><![CDATA[Thanks]]></title>
    <url>%2Fhandycontrol%2Ftnx%2Findex.html</url>
    <content type="text"><![CDATA[Thanks to the following Coder for providing code contributions Thanks to the following organizations for providing open source licenses Thanks to the following donors]]></content>
  </entry>
  <entry>
    <title><![CDATA[Tools]]></title>
    <url>%2Fhandycontrol%2Ftools%2Findex.html</url>
    <content type="text"><![CDATA[Tools]]></content>
  </entry>
  <entry>
    <title><![CDATA[ArtWork]]></title>
    <url>%2Fsoftwares%2FartWork%2Findex.html</url>
    <content type="text"><![CDATA[with ArtWork you can Download and Search over 9,500 beautiful, high-resolution artworks famous paintings, sculptures, and architectural wonders from around the world. Find your favorite artists’ masterpieces, or if you’re planning to visit a city discover the must-see works of art. this app created based on City Art Search app. DownloadGet Latest Release from Github Release Page SourceGet Latest Source from Github]]></content>
  </entry>
  <entry>
    <title><![CDATA[Ganjineh]]></title>
    <url>%2Fsoftwares%2Fganjineh%2Findex.html</url>
    <content type="text"><![CDATA[Hundreds of valuable old handwritten books by Iranian writers, poets and artists Collected from libraries around the world This program works based on the Ganjoor APIs https://museum.ganjoor.net/ DownloadGet Latest Release from Github Release Page SourceGet Latest Source from Github]]></content>
  </entry>
  <entry>
    <title><![CDATA[HandySub]]></title>
    <url>%2Fsoftwares%2FhandySub%2Findex.html</url>
    <content type="text"><![CDATA[Download Subtitle from Subscene and otehr sources A quick and easy software to download movie and serial subtitles from the Subscene website and its derivatives Get Movie\Series Information from IMDB Prism MVVM Multi Language Interface (Dynamic Language Change) DownloadGet Latest Release from Github Release Page SourceGet Latest Source from Github]]></content>
  </entry>
  <entry>
    <title><![CDATA[UrlShortener]]></title>
    <url>%2Fsoftwares%2FurlShortener%2Findex.html</url>
    <content type="text"><![CDATA[A simple App to shorten links Without visiting the websites Prism MVVM DownloadGet Latest Release from Github Release Page SourceGet Latest Source from Github]]></content>
  </entry>
  <entry>
    <title><![CDATA[HandyWinGet-GUI]]></title>
    <url>%2Fsoftwares%2FhandyWinget%2Findex.html</url>
    <content type="text"><![CDATA[HandyWinGet-GUIprovides a GUI for installing apps through WinGet. .Net Core 3.1 Prism MVVM Multi Language Light/Dark Theme Check out the Releases to download. DownloadGet Latest Release from Github Release Page SourceGet Latest Source from Github]]></content>
  </entry>
  <entry>
    <title><![CDATA[BackgroundSwitchElement]]></title>
    <url>%2Fhandycontrol%2Fattach%2FbackgroundSwitchElement%2Findex.html</url>
    <content type="text"><![CDATA[Attributes Name Use MouseHoverBackground Set mouse hover background color MouseDownBackground Set mouse down background color Use CasesMouseHoverBackground Set Mouse hover background colorIn the style or template we add the following trigger code: 123&lt;Trigger Property="IsMouseOver" Value="True"&gt; &lt;Setter Property="Background" TargetName="Chrome" Value="&#123;Binding Path=(hc:BackgroundSwitchElement.MouseHoverBackground),RelativeSource=&#123;RelativeSource TemplatedParent&#125;&#125;"/&gt;&lt;/Trigger&gt; Then we can use this property: 1&lt;Target control hc:BackgroundSwitchElement.MouseHoverBackground ="Blue"/&gt; MouseDownBackground Set Mouse down background colorIn the style or template we add the following trigger code: 123&lt;Trigger Property="IsPressed" Value="True"&gt; &lt;Setter Property="Background" TargetName="Chrome" Value="&#123;Binding Path=(hc:BackgroundSwitchElement.MouseDownBackground),RelativeSource=&#123;RelativeSource TemplatedParent&#125;&#125;"/&gt;&lt;/Trigger&gt; Then we can use this property: 1&lt;Target control hc:BackgroundSwitchElement.MouseDownBackground ="Yellow"/&gt;]]></content>
  </entry>
  <entry>
    <title><![CDATA[DropDownElement]]></title>
    <url>%2Fhandycontrol%2Fattach%2FdropDownElement%2Findex.html</url>
    <content type="text"><![CDATA[Attributes Name Use ConsistentWidth Internal Use]]></content>
  </entry>
  <entry>
    <title><![CDATA[DataGridAttach]]></title>
    <url>%2Fhandycontrol%2Fattach%2FdataGridAttach%2Findex.html</url>
    <content type="text"><![CDATA[This additional attribute is specific to the hc internal DataGrid style and is not recommended for direct use. Attributes Name Use ApplyDefaultStyle Whether to apply the default style TextColumnStyle Text Column Style EditingTextColumnStyle Edit Text Column Style ComboBoxColumnStyle Combo Box Column Style EditingComboBoxColumnStyle Editing combo box column style CheckBoxColumnStyle Checkbox Column Style EditingCheckBoxColumnStyle Checkbox column style when editing ShowRowNumber Whether to display the line number]]></content>
  </entry>
  <entry>
    <title><![CDATA[BorderElement]]></title>
    <url>%2Fhandycontrol%2Fattach%2FborderElement%2Findex.html</url>
    <content type="text"><![CDATA[Attributes Name Use CornerRadius Set border fillet values Circular Whether it is rendered as a circle True is Yes, False is No Use CasesCornerRadius Set the border fillet value1234&lt;StackPanel Width="200" VerticalAlignment="Center"&gt; &lt;Button Content="Button" hc:BorderElement.CornerRadius="15" HorizontalAlignment="Stretch"/&gt; &lt;TextBox Text="TextBox" hc:BorderElement.CornerRadius="15" Margin="0,10,0,0"/&gt;&lt;/StackPanel&gt; CircularImplement a circular border with the attached property of BorderElement.Circular 1&lt;Border Style="&#123;StaticResource BorderCircular&#125;" Background="OrangeRed" Width="100" Height="100"/&gt;]]></content>
  </entry>
  <entry>
    <title><![CDATA[EdgeElement]]></title>
    <url>%2Fhandycontrol%2Fattach%2FedgeElement%2Findex.html</url>
    <content type="text"><![CDATA[Attributes Name Use LeftContent Left Boundary Content TopContent Top Boundary Content RightContent Right Side Content BottomContent Bottom border content ShowEdgeContent Whether to display border content]]></content>
  </entry>
  <entry>
    <title><![CDATA[GlobalShortcut]]></title>
    <url>%2Fhandycontrol%2Fattach%2FglobalShortcut%2Findex.html</url>
    <content type="text"><![CDATA[With this property you can use shortcut keys Name Use Host Desired window 1hc:GlobalShortcut.Host="True" 1234&lt;hc:GlobalShortcut.KeyBindings&gt; &lt;KeyBinding Modifiers="Control+Alt" Key="I" Command="&#123;Binding GlobalShortcutInfoCmd&#125;"/&gt; &lt;KeyBinding Modifiers="Control+Alt" Key="E" Command="&#123;Binding GlobalShortcutWarningCmd&#125;"/&gt; &lt;/hc:GlobalShortcut.KeyBindings&gt;]]></content>
  </entry>
  <entry>
    <title><![CDATA[IconElement]]></title>
    <url>%2Fhandycontrol%2Fattach%2FiconElement%2Findex.html</url>
    <content type="text"><![CDATA[Attributes Name Use Geometry Geometry Width Icon Width Height Icon Height Use CasesGeometry Geometric shape1234&lt;StackPanel Width="200" VerticalAlignment="Center"&gt; &lt;Button Content="Button" HorizontalAlignment="Stretch"/&gt; &lt;Button Content="Button" hc:IconElement.Geometry="&#123;StaticResource CalendarGeometry&#125;" HorizontalAlignment="Stretch" Margin="0,10,0,0"/&gt;&lt;/StackPanel&gt;]]></content>
  </entry>
  <entry>
    <title><![CDATA[ImageAttach]]></title>
    <url>%2Fhandycontrol%2Fattach%2FimageAttach%2Findex.html</url>
    <content type="text"><![CDATA[Attributes Name SourceFailed Use Cases1&lt;Image hc:ImageAttach.SourceFailed="/Resources/Img/chrome_dragon.png" Source="&#123;Binding Source&#125;"/&gt;]]></content>
  </entry>
  <entry>
    <title><![CDATA[IconSwitchElement]]></title>
    <url>%2Fhandycontrol%2Fattach%2FiconSwitchElement%2Findex.html</url>
    <content type="text"><![CDATA[Inherited from IconElement Attributes Name Use GeometrySelected Geometry when selected]]></content>
  </entry>
  <entry>
    <title><![CDATA[InfoElement]]></title>
    <url>%2Fhandycontrol%2Fattach%2FinfoElement%2Findex.html</url>
    <content type="text"><![CDATA[Inherited from TitleElement Attributes Name Use Placeholder Placeholder (input prompt) Necessary Required? Symbol Tag Information ContentHeight Content Height MinContentHeight Minimum Content Height MaxContentHeight Maximum Content Height RegexPattern Regex Pattern Use CasesPlaceholder1234&lt;StackPanel Width="200" VerticalAlignment="Center"&gt; &lt;hc:SearchBar/&gt; &lt;hc:SearchBar hc:InfoElement.Placeholder="请输入查询条件" Style="&#123;StaticResource SearchBarExtend&#125;" Margin="0,16,0,0"/&gt;&lt;/StackPanel&gt; Necessary1234 &lt;hc:SearchBar hc:InfoElement.Placeholder="Please enter the query criteria" Hc:InfoElement.Title="Query Condition" Margin="10,10" hc:InfoElement.Necessary="True" Style="&#123;StaticResource SearchBarExtend&#125;"/&gt; Where hc:InfoElement.Title=&quot;query condition&quot; inherited from parent class effect: Symbol1234 &lt;hc:SearchBar hc:InfoElement.Placeholder="Please enter the content" Hc:InfoElement.Title="This item is required" Style="&#123;StaticResource SearchBarExtend&#125;" Margin="10,10" hc:InfoElement.Necessary="True" Hc:InfoElement.Symbol="x"/&gt; ContentHeight12345 &lt;hc:SearchBar hc:InfoElement.Placeholder="Please enter the query criteria" Hc:InfoElement.ContentHeight="50" Hc:InfoElement.Title="Query Condition" Margin="10,10" hc:InfoElement.Necessary="True" Style="&#123;StaticResource SearchBarExtend&#125;"/&gt;]]></content>
  </entry>
  <entry>
    <title><![CDATA[LinkElement]]></title>
    <url>%2Fhandycontrol%2Fattach%2FlinkElement%2Findex.html</url>
    <content type="text"><![CDATA[An attached property is intended to be used as a type of global property that is settable on any object. Attributes Name Use Link Gets or sets Link Address 1&lt;hc:Shield controls:LinkElement.Link="https://github.com" Command="hc:ControlCommands.OpenLink"/&gt;]]></content>
  </entry>
  <entry>
    <title><![CDATA[MenuTopLineAttach]]></title>
    <url>%2Fhandycontrol%2Fattach%2FmenuTopLineAttach%2Findex.html</url>
    <content type="text"><![CDATA[Attributes Name Use Popup]]></content>
  </entry>
  <entry>
    <title><![CDATA[PanelElement]]></title>
    <url>%2Fhandycontrol%2Fattach%2FpanelElement%2Findex.html</url>
    <content type="text"><![CDATA[Attributes Name Use FluidMoveBehavior Set the fluid movement mode of the panel Use CasesFluidMoveBehavior Set the fluid movement mode of the panel1&lt;hc:HoneycombPanel hc:PanelElement.FluidMoveBehavior="&#123;StaticResource BehaviorXY200&#125;" /&gt; When adding or removing elements to the panel container, you can see the animation of fluid movement.]]></content>
  </entry>
  <entry>
    <title><![CDATA[PasswordBoxAttach]]></title>
    <url>%2Fhandycontrol%2Fattach%2FpasswordBoxAttach%2Findex.html</url>
    <content type="text"><![CDATA[This additional attribute is specific to the hc internal password box style and is not recommended for direct use. Attributes Name Use IsMonitoring Whether to monitor the password length PasswordLength Password Length]]></content>
  </entry>
  <entry>
    <title><![CDATA[RectangleAttach]]></title>
    <url>%2Fhandycontrol%2Fattach%2FrectangleAttach%2Findex.html</url>
    <content type="text"><![CDATA[Attributes Name Use CornerRadius Set Rectangle Rounded Corner Value Use CasesCornerRadius Set Rectangle1&lt;Rectangle Fill="Red" Width="100" Height="60" hc:RectangleAttach.Circular="True" /&gt;]]></content>
  </entry>
  <entry>
    <title><![CDATA[StatusSwitchElement]]></title>
    <url>%2Fhandycontrol%2Fattach%2FstatusSwitchElement%2Findex.html</url>
    <content type="text"><![CDATA[Attributes Name Use CheckedElement Elements displayed when selected HideUncheckedElement Hide Elements Use CasesCheckedElement The element that is displayed when selectedThis additional property applies to the ToggleButton and subclass controls, which are used to control what needs to be displayed when the selection class control is selected. The default value is False and is not displayed. 123456789101112&lt;ToggleButton Style="&#123;DynamicResource ToggleButtonCustom&#125;" Margin="5"&gt; &lt;!--Checked--&gt; &lt;hc:StatusSwitchElement.CheckedElement&gt; &lt;Border Width="60" Height="20" CornerRadius="4" BorderThickness="1" BorderBrush="&#123;DynamicResource BorderBrush&#125;"&gt; &lt;Ellipse Width="20" Height="20" Fill="&#123;DynamicResource PrimaryBrush&#125;" StrokeThickness="1" Stroke="&#123;DynamicResource BorderBrush&#125;"/&gt; &lt;/Border&gt; &lt;/hc:StatusSwitchElement.CheckedElement&gt; &lt;!--Default--&gt; &lt;Border Width="80" Height="30" CornerRadius="0" BorderThickness="1" BorderBrush="&#123;DynamicResource BorderBrush&#125;"&gt; &lt;Ellipse Width="20" Height="20" Fill="&#123;DynamicResource BorderBrush&#125;" StrokeThickness="1" Stroke="&#123;DynamicResource BorderBrush&#125;"/&gt; &lt;/Border&gt;&lt;/ToggleButton&gt; effect: Default state (when not selected) and selected state HideUncheckedElement Whether to hide elementsWhether to hide the default content when the control is selected, the default value is False, not hidden 123456789101112131415161718192021222324252627&lt;StackPanel VerticalAlignment="Center" HorizontalAlignment="Center"&gt; &lt;ToggleButton IsChecked="True" Style="&#123;DynamicResource ToggleButtonCustom&#125;" Margin="5"&gt; &lt;!--Checked--&gt; &lt;hc:StatusSwitchElement.CheckedElement&gt; &lt;Border Width="60" Height="20" CornerRadius="0" BorderThickness="1" BorderBrush="&#123;DynamicResource BorderBrush&#125;"&gt; &lt;Ellipse Width="18" Height="18" Fill="&#123;DynamicResource PrimaryBrush&#125;"/&gt; &lt;/Border&gt; &lt;/hc:StatusSwitchElement.CheckedElement&gt; &lt;!--Default--&gt; &lt;Border Width="80" Height="30" CornerRadius="0" BorderThickness="1" BorderBrush="&#123;DynamicResource BorderBrush&#125;"&gt; &lt;Ellipse Width="18" Height="18" Fill="&#123;DynamicResource BorderBrush&#125;"/&gt; &lt;/Border&gt; &lt;/ToggleButton&gt;&lt;!--Explicitly set the hidden default content element when selected--&gt; &lt;ToggleButton IsChecked="True" Style="&#123;DynamicResource ToggleButtonCustom&#125;" hc:StatusSwitchElement.HideUncheckedElement="True" Margin="5"&gt; &lt;!--Checked--&gt; &lt;hc:StatusSwitchElement.CheckedElement&gt; &lt;Border Width="60" Height="20" CornerRadius="0" BorderThickness="1" BorderBrush="&#123;DynamicResource BorderBrush&#125;"&gt; &lt;Ellipse Width="18" Height="18" Fill="&#123;DynamicResource PrimaryBrush&#125;"/&gt; &lt;/Border&gt; &lt;/hc:StatusSwitchElement.CheckedElement&gt; &lt;!--Default--&gt; &lt;Border Width="80" Height="30" CornerRadius="0" BorderThickness="1" BorderBrush="&#123;DynamicResource BorderBrush&#125;"&gt; &lt;Ellipse Width="18" Height="18" Fill="&#123;DynamicResource BorderBrush&#125;"/&gt; &lt;/Border&gt; &lt;/ToggleButton&gt;&lt;/StackPanel&gt; effect: The above two attributes are used in combination, which can easily control the display function of the state of the selected class control, and can be reasonably adjusted according to the above cases.]]></content>
  </entry>
  <entry>
    <title><![CDATA[TextBlockAttach]]></title>
    <url>%2Fhandycontrol%2Fattach%2FtextBlockAttach%2Findex.html</url>
    <content type="text"><![CDATA[Attributes Name Use AutoTooltip Set whether to show tooltips automatically Use CasesAutoTooltip Set whether to show tooltips automatically123&lt;hc:SimplePanel Width="100" VerticalAlignment="Center" HorizontalAlignment="Center"&gt; &lt;TextBlock hc:TextBlockAttach.AutoTooltip="True" Text="EEEEEEEEEEEEEEEEEEEE"/&gt;&lt;/hc:SimplePanel&gt;]]></content>
  </entry>
  <entry>
    <title><![CDATA[TipElement]]></title>
    <url>%2Fhandycontrol%2Fattach%2FtipElement%2Findex.html</url>
    <content type="text"><![CDATA[Attributes Name Use Placement Prompt Element Display Position Visibility Visibility StringFormat StringFormat Use CasesPlacement Prompt element display positionThis attribute is used to set the display position of the prompt element. Currently supports BottomRight and TopLeft (default) 1234567891011121314151617181920212223&lt;hc:RangeSlider Width="400" hc:TipElement.Visibility="Visible" TickPlacement="BottomRight" IsSnapToTickEnabled="True" Maximum="100" ValueEnd="60" TickFrequency="10" Margin="0,32,0,0"/&gt;&lt;hc:RangeSlider Width="400" hc:TipElement.Visibility="Visible" hc:TipElement.Placement="BottomRight" TickPlacement="BottomRight" IsSnapToTickEnabled="True" Maximum="100" ValueEnd="60" TickFrequency="10" Margin="0,32,0,0"/&gt;&lt;hc:RangeSlider Width="400" hc:TipElement.Visibility="Visible" hc:TipElement.Placement="Bottom" hc:TipElement.StringFormat="#0.00" ValueEnd="5" TickPlacement="Both" Margin="0,32,0,0"/&gt; effect]]></content>
  </entry>
  <entry>
    <title><![CDATA[TitleElement]]></title>
    <url>%2Fhandycontrol%2Fattach%2FtitleElement%2Findex.html</url>
    <content type="text"><![CDATA[Attributes Name Use Title Title Information Background Title Background Color Foreground Title Font Color BorderBrush Title Border Color TitlePlacement Title Alignment TitleWidth Title Width Use CasesTitle12 &lt;hc:TextBox hc:TitleElement.Title="Title Information" Margin="10,10"&gt;&lt;/hc:TextBox&gt; TitleAlignment12345678 &lt;!--The title is on the top side --&gt; &lt;hc:TextBox hc:TitleElement.Title="Title Information" Hc:TitleElement.TitlePlacement="Top" Margin="10,10"&gt;&lt;/hc:TextBox&gt; &lt;!--The title is on the left --&gt; &lt;hc:TextBox hc:TitleElement.Title="Title Information" Hc:TitleElement.TitlePlacement="Left" Margin="10,10"&gt;&lt;/hc:TextBox&gt; TitleWidth12345678910 &lt;!--Set TitleWidth to Auto--&gt; &lt;hc:TextBox hc:TitleElement.Title="Title Information" Hc:TitleElement.TitlePlacement="Left" Hc:TitleElement.TitleWidth="Auto" Margin="10,10"&gt;&lt;/hc:TextBox&gt; &lt;!--Set TitleWidth to a specific value --&gt; &lt;hc:TextBox hc:TitleElement.Title="Title Information" Hc:TitleElement.TitlePlacement="Left" Hc:TitleElement.TitleWidth="60" Margin="10,10"&gt;&lt;/hc:TextBox&gt;]]></content>
  </entry>
  <entry>
    <title><![CDATA[VisualElement]]></title>
    <url>%2Fhandycontrol%2Fattach%2FvisualElement%2Findex.html</url>
    <content type="text"><![CDATA[Attributes Name Use HighlightBrush Set Control Highlight Color HighlightBackground Set Control Background Highlight Color HighlightForeground Set Control Foreground Highlight Color HighlightBorderBrush Set Control BorderBrush Highlight Color Text Set text content Use CasesHighlightBrush Set control highlight color1234567891011&lt;UniformGrid Margin="22,22,0,0" Rows="2" Columns="2"&gt; &lt;RadioButton Margin="10,10,0,0" Background="&#123;DynamicResource SecondaryRegionBrush&#125;" Style="&#123;StaticResource RadioButtonIcon&#125;" Content="RadioButton" IsChecked="True" GroupName="radio1"/&gt; &lt;RadioButton Margin="10,10,0,0" BorderThickness="1" Style="&#123;StaticResource RadioButtonIcon&#125;" hc:VisualElement.HighlightBrush="YellowGreen" Content="RadioButton" GroupName="radio2"/&gt; &lt;/UniformGrid&gt; The following screenshot is a set of highlight comparison results when selected. The left picture is the style default color, and the right is the personal custom color. Text Set text contentIt is mainly used to set the auxiliary text of the control. When the control does not have appropriate properties for displaying the text, this additional property can be set in the custom style. For example: when the custom progress bar needs to display text, it lacks the property of displaying extra text content, and the corresponding text can be displayed through a custom style, with Text as the text content carrying property Custom style: 1234567891011121314151617181920&lt;Style x: Key = "ProgressBarBaseStyle" TargetType = "ProgressBar"&gt; &lt;Setter Property = "controls: VisualElement.Text"&gt; &lt;Setter.Value&gt; ..... ignore code ... &lt;/Setter.Value&gt; &lt;/ Setter&gt; &lt;Setter Property = "Template"&gt; &lt;Setter.Value&gt; &lt;ControlTemplate TargetType = "ProgressBar"&gt; &lt;controls: SimplePanel x: Name = "TemplateRoot"&gt;.... ignore code ... &lt;controls: SimplePanel HorizontalAlignment = "Left"&gt; .... ignore code ... &lt;TextBlock HorizontalAlignment = "Center" VerticalAlignment = "Center" Foreground = "&#123;DynamicResource TextIconBrush&#125;" Text = "&#123;Binding Path = (controls: VisualElement.Text), RelativeSource = &#123;RelativeSource TemplatedParent&#125;&#125;" /&gt; &lt;/ controls: SimplePanel&gt; &lt;/ controls: SimplePanel&gt; &lt;/ ControlTemplate&gt; &lt;/Setter.Value&gt; &lt;/ Setter&gt;&lt;/ Style&gt; Use in xaml: 12345 &lt;UniformGrid Margin = "22,22,0,0" Rows = "2" Columns = "2"&gt; &lt;ProgressBar Style = "&#123;DynamicResource ProgressBarDanger&#125;" hc: VisualElement.Text = "This is visual text" Background = "YellowGreen"&gt; &lt;/ ProgressBar&gt; &lt;/ UniformGrid&gt; effect:]]></content>
  </entry>
  <entry>
    <title><![CDATA[WindowAttach]]></title>
    <url>%2Fhandycontrol%2Fattach%2FwindowAttach%2Findex.html</url>
    <content type="text"><![CDATA[Attributes Name Use IsDragElement Whether to allow the current element to drag the form IgnoreAltF4 Whether to ignore the shortcuts Alt and F4 (the keyboard quickly exits or ends the currently running application) ShowInTaskManager Whether the form is displayed in the task manager Use CasesIsDragElement Whether to allow the current element to drag the form123456789101112131415&lt;hc:BlurWindow x:Class="Class namespace" .....Regular item...... WindowStartupLocation="CenterScreen" ShowTitle="True" Style="&#123;DynamicResource WindowBlur&#125;" xmlns:hc="https://ghost1372.github.io/handycontrol" d:DesignHeight="450" d:DesignWidth="800"&gt; &lt;hc:SimplePanel&gt; &lt;Rectangle VerticalAlignment="Top" Margin="10" Height="30" RadiusX="4" RadiusY="4" Stroke="&#123;DynamicResource BorderBrush&#125;" StrokeDashArray="2,2"/&gt; &lt;Border hc:WindowAttach.IsDragElement="True" VerticalAlignment="Top" Margin="11" Height="28" Background="&#123;DynamicResource DarkDefaultBrush&#125;" CornerRadius="4"&gt; &lt;TextBlock Text="DragHere" Style="&#123;StaticResource TextBlockDefault&#125;"/&gt; &lt;/Border&gt; &lt;Button HorizontalAlignment="Right" Margin="0,15,15,0" VerticalAlignment="Top" Padding="0" Height="20" Width="20" Style="&#123;StaticResource ButtonPrimary&#125;" hc:IconElement.Geometry="&#123;StaticResource CloseGeometry&#125;" hc:BorderElement.CornerRadius="15"/&gt; &lt;/hc:SimplePanel&gt;&lt;/hc:BlurWindow&gt; You can drag the form in the dark frame area IgnoreAltF4 Whether to ignore the shortcut keys Alt and F4Alt + F4 to close the window. 1&lt;Setter Property = "hc: WindowAttach.IgnoreAltF4" Value = "True" /&gt; ShowInTaskManager Whether to show the form to the task managerPrerequisites: -The window must be non-modal, that is, you cannot use ShowDialog to display the window.-The window must also set ShowInTaskBar tofalse ps: The effect of this additional property is not very obvious in Windows7]]></content>
  </entry>
  <entry>
    <title><![CDATA[Behavior]]></title>
    <url>%2Fhandycontrol%2Fbasic_xaml%2Fbehaviors%2Findex.html</url>
    <content type="text"><![CDATA[Fluid movement Name Use BehaviorXY200 Fluid Movement Behavior, x, y Axis Motion, 200ms End Animation BehaviorX200 Fluid Movement Behavior, x-Axis Motion, 200ms End Animation BehaviorY200 Fluid Movement Behavior, y-axis Motion, 200ms End Animation BehaviorXY400 Fluid Movement Behavior, x, y Axis Motion, 400ms End Animation BehaviorX400 Fluid Movement Behavior, x-Axis Motion, 400ms End Animation BehaviorY400 Fluid Movement Behavior, y-axis Motion, 400ms End Animation Example：hc:PanelElement.FluidMoveBehavior=&quot;{StaticResource BehaviorXY200}&quot;]]></content>
  </entry>
  <entry>
    <title><![CDATA[Brush]]></title>
    <url>%2Fhandycontrol%2Fbasic_xaml%2Fbrushes%2Findex.html</url>
    <content type="text"><![CDATA[The brush is based on color, and the existing brush is defined as follows: Name Use PrimaryBrush Main Color LightPrimaryBrush Main Color (Light) DarkPrimaryBrush Main Color (Dark) DangerBrush Error, danger LightDangerBrush Error, danger (Light) DarkDangerBrush Error, Danger (Dark) WarningBrush Warning LightWarningBrush Warning (Light) DarkWarningBrush Warning (Dark) InfoBrush Information LightInfoBrush Information (Light) DarkInfoBrush Information (Dark) SuccessBrush Success LightSuccessBrush Success (Light) DarkSuccessBrush Success (Dark) VioletBrush Main Color (Violet) Only Custom Version DarkVioletBrush Main Color (Violet) Only Custom Version PrimaryTextBrush Main Text SecondaryTextBrush Secondary Text ThirdlyTextBrush Final Text ReverseTextBrush Inverted Text TextIconBrush General for text or icons on a dark background BorderBrush Border SecondaryBorderBrush Secondary Border BackgroundBrush Main Background Color RegionBrush Region Block Background SecondaryRegionBrush Secondary Block Background ThirdlyRegionBrush Final Block Background TitleBrush Title Background DefaultBrush Default Color DarkDefaultBrush Secondary default color AccentBrush Reminder DarkAccentBrush Reminder (Dark) DarkMaskBrush Use as a mask DarkOpacityBrush Translucent Background MainContentBackgroundBrush Only Custom Version MainContentForegroundBrush Only Custom Version MainContentForegroundDrawingBrush Only Custom Version Example：Foreground=&quot;{DynamicResource PrimaryBrush}&quot;]]></content>
  </entry>
  <entry>
    <title><![CDATA[Color]]></title>
    <url>%2Fhandycontrol%2Fbasic_xaml%2Fcolors%2Findex.html</url>
    <content type="text"><![CDATA[There are three built-in color xaml definitions, as described in the following table: Name Use Colors.xaml Default configuration ColorsDark.xaml Dark Configuration ColorsViolet.xaml Purple Configuration The same color name is defined in each file, except that the color values are different. The description of the color names is shown in the following table: Name Use PrimaryColor Main Color LightPrimaryColor Main Color (Light) DarkPrimaryColor Main Color (Dark) DangerColor Error, danger LightDangerColor Error, danger (Light) DarkDangerColor Error, Danger (Dark) WarningColor Warning LightWarningColor Warning (Light) DarkWarningColor Warning (Dark) InfoColor Information LightInfoColor Information (Light) DarkInfoColor Information (Dark) SuccessColor Success LightSuccessColor Success (Light) DarkSuccessColor Success (Dark) VioletColor Main Color (Violet) Only Custom Version DarkVioletColor Main Color (Violet) Only Custom Version PrimaryTextColor Main Text SecondaryTextColor Secondary Text ThirdlyTextColor Last Text ReverseTextColor Inverted Text TextIconColor General for text or icons on a dark background BorderColor Border SecondaryBorderColor Secondary Border BackgroundColor Main Background Color RegionColor Block Background SecondaryRegionColor Secondary Block Background ThirdlyRegionColor Final Block Background TitleColor Title Background SecondaryTitleColor Subtitle Background DefaultColor Default Color DarkDefaultColor Secondary default color AccentColor Reminder DarkAccentColor Reminder (Dark) DarkMaskColor Use as a mask DarkOpacityColor Translucent Background BlurGradientValue Background for blurry windows only MainContentForegroundColor Only Custom Version MainContentBackgroundColor Only Custom Version ForthlyRegionColor Only Custom Version Example：Color=&quot;{DynamicResource PrimaryColor}&quot;]]></content>
  </entry>
  <entry>
    <title><![CDATA[Converter]]></title>
    <url>%2Fhandycontrol%2Fbasic_xaml%2Fconverters%2Findex.html</url>
    <content type="text"><![CDATA[Boolean2BooleanReConverterThis converter is used to invert Boolean types Boolean2StrConverterThe converter needs to provide a string as a parameter. The general form of the string is: [string0];[string1], when the value obtained by the converter is true, it will return [character String 0], otherwise return [string 1]. Boolean2VisibilityConverterThe converter will convert true to Visible, which will convert false to Collapse. Boolean2VisibilityReConverterThe converter case is the opposite of Boolean2VisibilityConverter. BooleanArr2VisibilityConverterThe converter will convert the Boolean array to Visibility, returning Visible when all the arrays are true, otherwise return Collapse. BorderCircularClipConverterThe converter is exclusive to the Border and accepts an array of objects of length 3, corresponding to the length, width and fillet radius of the Border, which returns a circular geometry as a Clip to trim the Border. BorderCircularConverterThe converter is exclusive to Border and accepts an array of objects of length 3, corresponding to the length, width and fillet radius of the Border. It returns a rounded rectangle as a Clip to trim the Border. BorderClipConverterThe converter is exclusive to the Border and accepts an array of objects of length 3, corresponding to the length, width and fillet radius of the Border, which returns a circular geometry as a Clip to trim the Border. ColLayoutConverterWhen the converter is used in xaml design, the main function is to convert the string to a valid ColLayout value. Color2ChannelAConverter (internal use)The converter will extract the value of the transparent channel (A) of SolidColorBrush.Color. CornerRadiusSplitConverterThe converter needs to provide a string as a parameter. The general form of the string is: [0/1], [0/1], [0/1], [0/1], 4 separated by commas The values correspond to Left, Top, Right, Bottom attributes of CornerRadius, and the value of 1 returns the value of the corresponding attribute, otherwise it returns 0. Color2HexStrConverterThe converter will convert SolidColorBrush to a hexadecimal string (with “#”). Double2GridLengthConverterThis converter will convert double values to GridLength. DoubleMinConverter (internal use)The converter can be provided with a string as the minimum value (if not provided, the minimum value defaults to 0). When the value passed in is less than the minimum value, the minimum value is returned, otherwise the value returned is returned. Int2StrConverterThe converter needs to provide a string as a parameter, the general form of the string is: [string 0]; [string 1];...[string n], the converter will be an integer The value is used as an index to get the string at the specified location and return. Long2FileSizeConverterThe converter converts long integers to a file-sized string. Number2PercentageConverterThe converter accepts a numeric array of length 2 and returns a percentage of the two numbers. Object2BooleanConverterReturns false if the converter gets a value of null, otherwise returns true. Object2VisibilityConverterReturns Collapsed if the value obtained by the converter is null, otherwise returns Visible. Object2VisibilityReConverterReturns Visible if the value obtained by the converter is null, otherwise returns Collapsed. Object2StringConverterReturns String RectangleCircularConverterThe converter is Rectangle-specific and accepts an integer array of the length and width of the Rectangle, returning half of their minimum as the radius of the circular Rectangle. String2VisibilityConverterThe converter accepts a string and returns Collapse if the string is empty or null, otherwise returns Visible. String2VisibilityReConverterThe converter case is the opposite of String2VisibilityConverter. ThicknessSplitConverterThe converter needs to provide a string as a parameter. The general form of the string is: [0/1], [0/1], [0/1], [0/1], 4 separated by commas The values correspond to the Left, Top, Right, Bottom attributes of Thickness, and the value of 1 returns the value of the corresponding attribute, otherwise it returns 0. TreeViewItemMarginConverter (internal use)This converter is used to provide the appropriate left margin for the TreeViewItem. Color2HexStringConverterBoolean2StringConverterInt2StringConverterSpeedConverter Only Custom Version (Internal use)Positive2Nagative Only Custom Version (Internal use)Convert positive value to negative ValueToBrushConverter Only Custom Version (Internal use)Convert Value to Brush Example:1Visibility=&quot;&#123;Binding ShowButton,Converter=&#123;StaticResource Boolean2VisibilityConverter&#125;&#125;&quot; StringRepeatConverter Only Custom Versionrepeat text 1&lt;hc:OutlineText Text=&quot;&#123;Binding Text, Converter=&#123;StaticResource StringRepeatConverter&#125;, ConverterParameter=2&#125;&quot;/&gt; ConverterBindableBinding Only Custom Versionif you need to use binding in Converter Parameter you can use this converter type123456&lt;Setter Property="Foreground"&gt; &lt;Setter.Value&gt; &lt;hc:ConverterBindableBinding Binding="&#123;Binding ElementName=arc, Path=Tag&#125;" Converter="&#123;StaticResource ValueToBrushConverter&#125;" ConverterParameterBinding="&#123;Binding ElementName=arc, Path=EndAngle&#125;"/&gt; &lt;/Setter.Value&gt;&lt;/Setter&gt;]]></content>
  </entry>
  <entry>
    <title><![CDATA[Font Size]]></title>
    <url>%2Fhandycontrol%2Fbasic_xaml%2Ffonts%2Findex.html</url>
    <content type="text"><![CDATA[Name Size Use LargeFontSize 24 Page Title HeadFontSize 20 Feature Title SubHeadFontSize 16 Subfunction Title TextFontSize 12 Text Example: FontSize=&quot;{StaticResource LargeFontSize}&quot;]]></content>
  </entry>
  <entry>
    <title><![CDATA[Effect]]></title>
    <url>%2Fhandycontrol%2Fbasic_xaml%2Feffects%2Findex.html</url>
    <content type="text"><![CDATA[ShadowCurrently only contains 5 levels of shadow effects: Name Radius EffectShadow1 5 EffectShadow2 8 EffectShadow3 14 EffectShadow4 25 EffectShadow5 35 Example：Effect=&quot;{StaticResource EffectShadow5}&quot;]]></content>
  </entry>
  <entry>
    <title><![CDATA[Geometric shape]]></title>
    <url>%2Fhandycontrol%2Fbasic_xaml%2Fgeometries%2Findex.html</url>
    <content type="text"><![CDATA[HandyControl comes with some geometric shape definitions, but it is obviously not enough to apply to production. We are not prepared to be all-encompassing. There is never a bottom, so we will do the opposite. It only contains the control library itself (of course users can also use it), and the rest should expand on its own. All shape definitions in the control library are listed in the following table: Name Description CalendarGeometry Calendar DeleteGeometry Delete DeleteFillCircleGeometry Delete (Circular Fill) CloseGeometry Close DownGeometry Next UpGeometry On ClockGeometry Clock LeftGeometry Left RightGeometry Right RotateLeftGeometry Rotate Left RotateRightGeometry Rotate Right EnlargeGeometry Zoom ReduceGeometry Zoom out DownloadGeometry Download SaveGeometry Save WindowsGeometry Window FullScreenGeometry Full Screen FullScreenReturnGeometry Full Screen Back SearchGeometry Search UpDownGeometry Upper and lower combinations WindowMinGeometry Window Minimization WindowRestoreGeometry Window Restore WindowMaxGeometry Window Maximization PageModeGeometry Single page mode TwoPageModeGeometry Double page mode ScrollModeGeometry Scroll mode AudioGeometry Sound BubbleTailGeometry Bubble Tail StarGeometry Love AddGeometry Add SubGeometry Subtract WarningGeometry Warning InfoGeometry Information ErrorGeometry Error SuccessGeometry Success FatalGeometry Critical AskGeometry Inquiry AllGeometry All DragGeometry Drag and Drop (for toolbars) CheckedGeometry Selected EyeOpenGeometry Open eyes EyeCloseGeometry Close eyes DropperGeometry Select Color from Shell VisualStudioGeometry Visual Studio Icon ConfigGeometry Gear Icon NewGeometry New Icon RemoveGeometry Remove Icon AlignLeftGeometry AlignRightGeometry AlignHCenterGeometry AlignHStretchGeometry AlignTopGeometry AlignBottomGeometry AlignVCenterGeometry AlignVStretchGeometry Example: Data=&quot;{StaticResource DragGeometry}&quot;]]></content>
  </entry>
  <entry>
    <title><![CDATA[Path]]></title>
    <url>%2Fhandycontrol%2Fbasic_xaml%2Fpaths%2Findex.html</url>
    <content type="text"><![CDATA[Like geometric shapes, we are not prepared to be all-inclusive. All paths in the control library are listed in the following table: Name Description PathBaseStyle Path Base Style SearchPathStyle Search FullScreenReturnPathStyle Full Screen Back FullScreenPathStyle Full Screen WindowsPathStyle Window SavePathStyle Save DownloadPathStyle Download EnlargePathStyle Zoom ReducePathStyle Zoom out RotatePathStyle Rotate Left (default) CalendarPathStyle Calendar DeletePathStyle Delete ClosePathStyle Close DownPathStyle Next ClockPathStyle Clock LeftPathStyle Left RightPathStyle Right UpDownPathStyle Upper and lower combinations Example: Style=&quot;{StaticResource SearchPathStyle}&quot;]]></content>
  </entry>
  <entry>
    <title><![CDATA[Size]]></title>
    <url>%2Fhandycontrol%2Fbasic_xaml%2Fsizes%2Findex.html</url>
    <content type="text"><![CDATA[Name Type Value Description DefaultControlHeight System.Double 30 Default Control Height DefaultControlPadding System.Windows.Thickness 10,6 Default Control Pitch DefaultInputPadding System.Windows.Thickness 8,6 Default input control padding DefaultCornerRadius System.Windows.CornerRadius 4 Default Fillet Example: CornerRadius=&quot;{StaticResource DefaultCornerRadius}&quot;]]></content>
  </entry>
  <entry>
    <title><![CDATA[InfoType]]></title>
    <url>%2Fhandycontrol%2Fdata%2FInfoType%2Findex.html</url>
    <content type="text"><![CDATA[enum(int) Message type Member Name Value Description Success 0 Success Info 1 Information Warning 2 Warning Error 3 Error Fatal 4 Serious Ask 5 Ask]]></content>
  </entry>
  <entry>
    <title><![CDATA[AnimationPath]]></title>
    <url>%2Fhandycontrol%2Fextend_controls%2FanimationPath%2Findex.html</url>
    <content type="text"><![CDATA[AnimationPath Set the data for the geometry of the Geometry that derived as PathGeometry, LineGeometry to achieve a fixed path animation effect 1public class AnimationPath : Shape AttributesDataGeometry data to be displayed for the animation path 1&lt;Geometry x:Key="GithubGeometry"&gt;M512 0C229.12 0 0 229.12 0 512c0 226.56 146.56 417.92 350.08 485.76 25.6 4.48 35.2-10.88 35.2-24.32 0-12.16-0.64-52.48-0.64-95.36-128.64 23.68-161.92-31.36-172.16-60.16-5.76-14.72-30.72-60.16-52.48-72.32-17.92-9.6-43.52-33.28-0.64-33.92 40.32-0.64 69.12 37.12 78.72 52.48 46.08 77.44 119.68 55.68 149.12 42.24 4.48-33.28 17.92-55.68 32.64-68.48-113.92-12.8-232.96-56.96-232.96-252.8 0-55.68 19.84-101.76 52.48-137.6-5.12-12.8-23.04-65.28 5.12-135.68 0 0 42.88-13.44 140.8 52.48 40.96-11.52 84.48-17.28 128-17.28 43.52 0 87.04 5.76 128 17.28 97.92-66.56 140.8-52.48 140.8-52.48 28.16 70.4 10.24 122.88 5.12 135.68 32.64 35.84 52.48 81.28 52.48 137.6 0 196.48-119.68 240-233.6 252.8 18.56 16 34.56 46.72 34.56 94.72 0 68.48-0.64 123.52-0.64 140.8 0 13.44 9.6 29.44 35.2 24.32A512.832 512.832 0 0 0 1024 512c0-282.88-229.12-512-512-512z&lt;/Geometry&gt; Case:123456&lt;Grid Width="100" Height="100"&gt; &lt;hc:AnimationPath Data="&#123;DynamicResource GithubGeometry&#125;" Duration="00:00:05" Stretch="Uniform" StrokeThickness="1" Stroke="Black"&gt;&lt;/hc:AnimationPath&gt;&lt;/Grid&gt; effect: PathLengthThe default is 0 and the property is set to 50. The effect is as follows: DurationPath animation execution interval. This property must be set, otherwise the animation path effect will not be displayed. IsPlayingDetermines the current animation playback status, which is often used as the control behavior identification flag of the control. This property can be used to pause the path animation. RepeatBehaviorSet the animation repeat behavior, the default is Forever, you can set the repeat behavior as needed Inherited from the common properties of Shape Property Name Purpose Stretch Stretch properties StrokeThickness Edge width Related eventsCompletedThis event is fired when the animation is complete.]]></content>
  </entry>
  <entry>
    <title><![CDATA[GrowlInfo]]></title>
    <url>%2Fhandycontrol%2Fdata%2FGrowlInfo%2Findex.html</url>
    <content type="text"><![CDATA[class Growl message initialization model Member Name Type Description Default Message string Notification content - ShowDateTime bool Whether to show notification time true Time int Waiting for automatic shutdown time 6 CancelStr string Cancel String Lang.Cancel ConfirmStr string Confirm String Lang.Confirm ActionBeforeClose Func&lt;bool, bool&gt; Delegate before closing - StaysOpen bool Keep open false IsCustom bool Whether to customize behavior false Type InfoType Message Type InfoType.Success Icon string Icon key name - IconBrush string Icon Paint Key Name - ShowCloseButton bool Whether to show the close button true Token string Message tag - GrowlParent bool set Growl Panel false FAQ What should I fill in Icon and IconBrush here? Icon must fill in the Key name of the resource type Geometry, for example, the following resource, its Key name GitterGeometry can be used as Icon:1&lt;Geometry x:Key="GitterGeometry"&gt;M260.8 645H160V0h100.8v645zM461.8 152.2h-100.8V1024h100.8V152.2z m201.2 0h-100.8V1024h100.8V152.2zM864 152h-100.8v494H864V152z&lt;/Geometry&gt; IconBrushKey must be filled with the Key name of the resource type Brush, such as the following resource, its Key name ToolBarBackground can be used as IconBrushKey: 1234&lt;LinearGradientBrush x:Key="ToolBarBackground" EndPoint="0.5,1" StartPoint="0.5,0"&gt; &lt;GradientStop Color="#F5F4F5" Offset="0"/&gt; &lt;GradientStop Color="#D1CFD1" Offset="1"/&gt;&lt;/LinearGradientBrush&gt;]]></content>
  </entry>
  <entry>
    <title><![CDATA[Badge]]></title>
    <url>%2Fhandycontrol%2Fextend_controls%2Fbadge%2Findex.html</url>
    <content type="text"><![CDATA[The badge control, as a specific state content badge of other controls, can minimize the invasion of the original control. It can be regarded as a content control. The internal Content is the modified control corresponding to the badge that needs to be displayed. The inheritance relationship is as follows: 1public class Badge : ContentControl Basic attributes Property Name Use Text Gets or sets the badge display content Value Get or set display value, support dynamic change of value Status Gets or sets the type of tag status, Text (Dot), Processing (Dynamic Tag) defaults to text display Maximum Gets or sets the maximum display value. When the value is displayed, the maximum value is displayed BadgeMargin Gets or sets the margin of the badge relative to the decorated control ShowBadge Gets or sets whether to display the flag, the default is True In xaml, remember to introduce the handycontrol namespace 1xmlns:hc="https://handyorg.github.io/handycontrol" Text and ValueYou may be confused when you see the property explanation. Text and Value have the same effect and value. What is the difference? In the markup control, the text and numeric types are distinguished. The numeric types can be dynamically changed and the data statistics displayed. When both are present at the same time, Text is displayed by default. Case123456&lt;hc:Badge Value="12" Text="New" BadgeMargin="0,-14,-20,0" Height="30"&gt; &lt;Button Content="Default style"/&gt;&lt;/hc:Badge&gt;&lt;hc:Badge Value="12" BadgeMargin="0,-14,-20,0" Height="30"&gt; &lt;Button Content="Default style"/&gt;&lt;/hc:Badge&gt; effect MaximumUse the Value property to add the maximum display value to limit the maximum display effect of the badge display Case123456&lt;hc:Badge Value="100" Maximum="99" BadgeMargin="0,-14,-20,0" Height="30"&gt; &lt;Button Content="Maximum"/&gt;&lt;/hc:Badge&gt;&lt;hc:Badge Value="2" Maximum="99" BadgeMargin="0,-14,-20,0" Height="30"&gt; &lt;Button Content="Maximum"/&gt;&lt;/hc:Badge&gt; effect Statusbadge status type, divided into three types, default is text display Case123456789&lt;hc:Badge Status="Text" Text="text" Height="30" Margin="32,0,0,0" Style="&#123;DynamicResource BadgeSuccess&#125;"&gt; &lt;Button Content="Text"/&gt;&lt;/hc:Badge&gt;&lt;hc:Badge Status="Dot" Height="30" Margin="32,0,0,0" Style="&#123;DynamicResource BadgeSuccess&#125;"&gt; &lt;Button Content="Dot"/&gt;&lt;/hc:Badge&gt;&lt;hc:Badge Status="Processing" Height="30" Margin="32,0,0,0" Style="&#123;DynamicResource BadgeSuccess&#125;"&gt; &lt;Button Content="Processing" /&gt;&lt;/hc:Badge&gt; effect BadgeMarginBadgeMargin is used to set the margin relative to the decorated control. Generally, this property is not modified. It is recommended to use 0, -14, -20,0 Case123456&lt;hc:Badge Height="30" Value="11" Style="&#123;DynamicResource BadgeSuccess&#125;"&gt; &lt;Button Content="BadgeMargin" /&gt;&lt;/hc:Badge&gt;&lt;hc:Badge Height="30" Value="11" BadgeMargin="30,0,0,0" Style="&#123;DynamicResource BadgeSuccess&#125;"&gt; &lt;Button Content="BadgeMargin" /&gt;&lt;/hc:Badge&gt; effect event event use ValueChanged Trigger event after value change Related styles Style name use Inherited style BadgeBaseStyle Default style, used as BaseOn inheritance - BadgePrimary Theme color badge style BadgeBaseStyle BadgeSuccess Success color badge style BadgeBaseStyle BadgeInfo Information color badge style BadgeBaseStyle BadgeWarning Warning color badge style BadgeBaseStyle BadgeDanger Anomalous badge style BadgeBaseStyle BadgeDefault Default badge style Available Only in Custom Version BadgeViolet Purple color badge style Available Only in Custom Version Case123456789101112131415161718&lt;hc:Badge Height="30" BadgeMargin="0,-14,-20,0" Value="11"&gt; &lt;Button Content="Default" /&gt;&lt;/hc:Badge&gt;&lt;hc:Badge Height="30" BadgeMargin="0,-14,-20,0" Value="11" Style="&#123;DynamicResource BadgePrimary&#125;"&gt; &lt;Button Content="Primary" /&gt;&lt;/hc:Badge&gt;&lt;hc:Badge Height="30" BadgeMargin="0,-14,-20,0" Value="11" Style="&#123;DynamicResource BadgeInfo&#125;"&gt; &lt;Button Content="Info" /&gt;&lt;/hc:Badge&gt;&lt;hc:Badge Height="30" BadgeMargin="0,-14,-20,0" Value="11" Style="&#123;DynamicResource BadgeSuccess&#125;"&gt; &lt;Button Content="Success" /&gt;&lt;/hc:Badge&gt;&lt;hc:Badge Height="30" BadgeMargin="0,-14,-20,0" Value="11" Style="&#123;DynamicResource BadgeWarning&#125;"&gt; &lt;Button Content="Warning" /&gt;&lt;/hc:Badge&gt;&lt;hc:Badge Height="30" BadgeMargin="0,-14,-20,0" Value="11" Style="&#123;DynamicResource BadgeDanger&#125;"&gt; &lt;Button Content="Danger" /&gt;&lt;/hc:Badge&gt; effect FAQCoordinate offset problem [version less than or equal to 2.4]Problem DescriptionWhen the parent container is not the default arrangement of stackpanel, the badge and decorated control are offset status quo123456&lt;hc:Badge Height="30" BadgeMargin="0,-14,-20,0" Value="11"&gt; &lt;Button Content="Default" /&gt;&lt;/hc:Badge&gt;&lt;hc:Badge Height="30" BadgeMargin="0,-14,-20,0" Value="11" Style="&#123;DynamicResource BadgePrimary&#125;"&gt; &lt;Button Content="Primary" /&gt;&lt;/hc:Badge&gt; solutionSet the properties VerticalAlignment andHorizontalAlignment in the property Badge to Center 123456&lt;hc:Badge Height="30" VerticalAlignment="Center" HorizontalAlignment="Center" BadgeMargin="0,-14,-20,0" Value="11"&gt; &lt;Button Content="Default" /&gt;&lt;/hc:Badge&gt;&lt;hc:Badge Height="30" VerticalAlignment="Center" HorizontalAlignment="Center" BadgeMargin="0,-14,-20,0" Value="11" Style="&#123;DynamicResource BadgePrimary&#125;"&gt; &lt;Button Content="Primary" /&gt;&lt;/hc:Badge&gt;]]></content>
  </entry>
  <entry>
    <title><![CDATA[BlurWindow]]></title>
    <url>%2Fhandycontrol%2Fextend_controls%2FblurWindow%2Findex.html</url>
    <content type="text"><![CDATA[BlurWindow Only supported on Windows 10BlurWindow Does not work in the following Builds Due to a bug in these versions1903(19H1), 1909(19H2), 2004(20H1), 20H2(20H2) example: 12&lt;hc:BlurWindow ..... If you are using version &lt;= 2.5.3.2 , you must follow the steps belowCreate a function in your App.cs file like this:123456789101112131415public static SystemVersionInfo GetSystemVersionInfo() &#123; var managementClass = new ManagementClass(“Win32_OperatingSystem”); var instances = managementClass.GetInstances(); foreach (var instance in instances) &#123; if (instance[“Version”] is string version) &#123; var nums = version.Split(‘.’).Select(int.Parse).ToList(); var info = new SystemVersionInfo(nums[0], nums[1], nums[2]); return info; &#125; &#125; return default(SystemVersionInfo); &#125;now in your app.cs file and OnStartup func add this line:12ConfigHelper.Instance.SystemVersionInfo = GetSystemVersionInfo();]]></content>
  </entry>
  <entry>
    <title><![CDATA[ButtonGroup]]></title>
    <url>%2Fhandycontrol%2Fextend_controls%2FbuttonGroup%2Findex.html</url>
    <content type="text"><![CDATA[RadioGroupItemBaseStyleSubset RadioButton style base class in ButtonGroup control. It is not recommended to use it directly. It is often used as Item style base class in ButtonGroup. It is also used in conjunction with ButtonGroup control. Case: 12345678910111213&lt;!--The internal Item style is automatically attached by the ButtonGroup control-the default is the horizontal item style--&gt;&lt;hc:ButtonGroup Margin="0,32,0,0"&gt; &lt;RadioButton Content="RadioButton" IsChecked="True"/&gt; &lt;RadioButton Content="RadioButton"/&gt; &lt;RadioButton IsEnabled="False" Content="RadioButton"/&gt; &lt;RadioButton Content="RadioButton"/&gt;&lt;/hc:ButtonGroup&gt;&lt;hc:ButtonGroup Margin="0,16,0,0" Style="&#123;StaticResource ButtonGroupSolid&#125;"&gt; &lt;RadioButton Content="RadioButton"/&gt; &lt;RadioButton Content="RadioButton"/&gt; &lt;RadioButton IsEnabled="False" Content="RadioButton"/&gt; &lt;RadioButton Content="RadioButton" IsChecked="True"/&gt;&lt;/hc:ButtonGroup&gt; effect: RadioGroup association style Style Key use Base class style RadioGroupItemDefault RadioGroupItem default style RadioGroupItemBaseStyle RadioGroupItemHorizontalFirst RadioGroupItem horizontal head style (from left to right) RadioGroupItemBaseStyle RadioGroupItemHorizontalLast RadioGroupItem horizontal tail style (from left to right) RadioGroupItemBaseStyle RadioGroupItemSingle RadioGroupItem single item style RadioGroupItemBaseStyle RadioGroupItemVerticalFirst RadioGroupItem vertical header style (from top to bottom) RadioGroupItemBaseStyle RadioGroupItemVerticalLast RadioGroupItem vertical tail style (from top to bottom) RadioGroupItemBaseStyle Case: Single RadioButton style: 123&lt;RadioButton Style="&#123;DynamicResource RadioGroupItemSingle&#125;" Margin="0,16,8,0" Content="RadioGroupItemSingle"&gt;&lt;/RadioButton&gt; effect: Multiple RadioButton vertical styles: 1234567891011121314&lt;StackPanel Orientation="Horizontal" HorizontalAlignment="Center"&gt; &lt;hc:ButtonGroup Margin="0,16,8,0" Orientation="Vertical"&gt; &lt;RadioButton Content="RadioButton" IsChecked="True"/&gt; &lt;RadioButton Content="RadioButton"/&gt; &lt;RadioButton IsEnabled="False" Content="RadioButton"/&gt; &lt;RadioButton Content="RadioButton"/&gt; &lt;/hc:ButtonGroup&gt; &lt;hc:ButtonGroup Margin="8,16,0,0" Orientation="Vertical" Style="&#123;StaticResource ButtonGroupSolid&#125;"&gt; &lt;RadioButton Content="RadioButton"/&gt; &lt;RadioButton Content="RadioButton"/&gt; &lt;RadioButton IsEnabled="False" Content="RadioButton"/&gt; &lt;RadioButton Content="RadioButton" IsChecked="True"/&gt; &lt;/hc:ButtonGroup&gt;&lt;/StackPanel&gt; effect:]]></content>
  </entry>
  <entry>
    <title><![CDATA[CalendarWithClock]]></title>
    <url>%2Fhandycontrol%2Fextend_controls%2FcalendarWithClock%2Findex.html</url>
    <content type="text"><![CDATA[The CalendarWithClock control consists of a calendar and a clock, allowing the user to select the date and time with the mouse. 1234[TemplatePart(Name = ElementButtonConfirm, Type = typeof(Button))][TemplatePart(Name = ElementClockPresenter, Type = typeof(ContentPresenter))][TemplatePart(Name = ElementCalendarPresenter, Type = typeof(ContentPresenter))]public class CalendarWithClock : Control Create Date Picker1&lt;hc:CalendarWithClock /&gt; 1var dateTimePicker = new CalendarWithClock(); The generated CalendarWithClock is shown below: Select date and timeSelect the date and time on the calendar and clock with the mouse, and then click the OK button to update the date and time of the CalendarWithClock control. You can also set the date like this in a XAML clock or code. 1&lt;hc:CalendarWithClock SelectedDateTime="&#123;x:Static system:DateTime.Now&#125;"/&gt; 1calendarWithClock.SelectedDateTime = DateTime.Now; Attributes Property Description SelectedDateTime Get or set the currently selected date and time DateTimeFormat Gets or sets the format used to display the selected date and time DisplayDateTime Get or set the date to be displayed ShowConfirmButton Gets or sets a value indicating whether to show OK button VerifyFunc Get or Set Data Validation Delegation IsError Get or set whether the data is wrong ErrorStr Get or Set Error Alert TextType Get or Set Text Type ShowClearButton Gets or sets whether to show the clear button Method Method Description VerifyData () Verify Data you can change calendarwithclock ui culture: 1ConfigHelper.Instance.SetLang("en");]]></content>
  </entry>
  <entry>
    <title><![CDATA[Card]]></title>
    <url>%2Fhandycontrol%2Fextend_controls%2Fcard%2Findex.html</url>
    <content type="text"><![CDATA[It is used to display data in a card. It is a derived class of ContentControl. 1public class Card : ContentControl Attributes Property use Header Card header content for displaying synchronized text HeaderTemplate Card header template HeaderTemplateSelector Card template style selector HeaderStringFormat Card header template content display format Footer Card footer content FooterTemplate Card footer template FooterTemplateSelector Card footer Style Selector FooterStringFormat Card footer content display format CaseSingle card usexamlUse12345678910111213141516171819&lt;hc:Card MaxWidth="240" BorderThickness="0" Effect="&#123;DynamicResource EffectShadow2&#125;" Margin="8"&gt; &lt;!--Card Content section--&gt; &lt;Border CornerRadius="4,4,0,0" Width="160" Height="160"&gt; &lt;TextBlock TextWrapping="Wrap" VerticalAlignment="Center" HorizontalAlignment="Center" Text="test"/&gt; &lt;/Border&gt; &lt;!--Card Footer part--&gt; &lt;hc:Card.Footer&gt; &lt;StackPanel Margin="10" Width="160"&gt; &lt;!--Card First-level content--&gt; &lt;TextBlock TextWrapping="NoWrap" Style="&#123;DynamicResource TextBlockLargeBold&#125;" TextTrimming="CharacterEllipsis" Text="Headline" HorizontalAlignment="Left"/&gt; &lt;!--Card Secondary content--&gt; &lt;TextBlock TextWrapping="NoWrap" Style="&#123;DynamicResource TextBlockDefault&#125;" TextTrimming="CharacterEllipsis" Text="Description" Margin="0,6,0,0" HorizontalAlignment="Left"/&gt; &lt;/StackPanel&gt; &lt;/hc:Card.Footer&gt;&lt;/hc:Card&gt; effect As a data templatetype of data123456public class CardModel&#123; public string Header &#123; get; set; &#125; public string Content &#123; get; set; &#125; public string Footer &#123; get; set; &#125;&#125; View entityThis entity is not designed according to the standard mvvm method, but is only used as a display for ordinary data sources. 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475public class CardDemoViewModel&#123; private IList&lt;CardModel&gt; _dataList; public CardDemoViewModel() &#123; DataList = GetCardDataList(); &#125; internal ObservableCollection&lt;CardModel&gt; GetCardDataList() &#123; return new ObservableCollection&lt;CardModel&gt; &#123; new CardModel &#123; Header = "Atomic", Content = "1.jpg", Footer = "Stive Morgan" &#125;, new CardModel &#123; Header = "Zinderlong", Content = "2.jpg", Footer = "Zonderling" &#125;, new CardModel &#123; Header = "Busy Doin' Nothin'", Content = "3.jpg", Footer = "Ace Wilder" &#125;, new CardModel &#123; Header = "Wrong", Content = "4.jpg", Footer = "Blaxy Girls" &#125;, new CardModel &#123; Header = "The Lights", Content = "5.jpg", Footer = "Panda Eyes" &#125;, new CardModel &#123; Header = "EA7-50-Cent Disco", Content = "6.jpg", Footer = "еяхат музыка" &#125;, new CardModel &#123; Header = "Monsters", Content = "7.jpg", Footer = "Different Heaven" &#125;, new CardModel &#123; Header = "Gangsta Walk", Content = "8.jpg", Footer = "Illusionize" &#125;, new CardModel &#123; Header = "Won't Back Down", Content = "9.jpg", Footer = "Boehm" &#125;, new CardModel &#123; Header = "Katchi", Content = "10.jpg", Footer = "Ofenbach" &#125; &#125;; &#125; public IList&lt;CardModel&gt; DataList &#123; get =&gt; _dataList; set =&gt; _dataList = value; &#125;&#125; xamlUsehandycontrol namespace and DataContext need to be introduced by themselves 1234xmlns:hc="https://handyorg.github.io/handycontrol"xmlns:data="CardModel namespace"xmlns:vm="CardDemoViewModel namespace"........ 1234567&lt;!--Used in the parent of listbox--&gt; &lt;listbox.Resources&gt; &lt;vm:CardDemoViewModel x:Key="Card"&gt;&lt;/vm:CardDemoViewModel&gt; &lt;/listbox.Resources&gt; &lt;listbox.DataContext&gt; &lt;Binding Source="&#123;StaticResource Card&#125;"/&gt; &lt;/listbox.DataContext&gt; 123456789101112131415161718192021222324252627&lt;ListBox Margin="32" BorderThickness="0" Style="&#123;DynamicResource WrapPanelHorizontalListBox&#125;" ItemsSource="&#123;Binding DataList&#125;"&gt; &lt;ListBox.ItemTemplate&gt; &lt;DataTemplate DataType="data:CardModel"&gt; &lt;hc:Card MaxWidth="240" BorderThickness="0" Effect="&#123;DynamicResource EffectShadow2&#125;" Margin="8" Footer="&#123;Binding Footer&#125;"&gt; &lt;!--Card Content section template--&gt; &lt;Border CornerRadius="4,4,0,0" Width="160" Height="160"&gt; &lt;TextBlock TextWrapping="Wrap" VerticalAlignment="Center" HorizontalAlignment="Center" Text="&#123;Binding Content&#125;"/&gt; &lt;/Border&gt; &lt;!--Card Footer section template--&gt; &lt;hc:Card.FooterTemplate&gt; &lt;DataTemplate&gt; &lt;StackPanel Margin="10" Width="160"&gt; &lt;!--Card First-level content--&gt; &lt;TextBlock TextWrapping="NoWrap" Style="&#123;DynamicResource TextBlockLargeBold&#125;" TextTrimming="CharacterEllipsis" Text="&#123;Binding DataContext.Header,RelativeSource=&#123;RelativeSource AncestorType=hc:Card&#125;&#125;" HorizontalAlignment="Left"/&gt; &lt;!--Card Secondary content--&gt; &lt;TextBlock TextWrapping="NoWrap" Style="&#123;DynamicResource TextBlockDefault&#125;" TextTrimming="CharacterEllipsis" Text="&#123;Binding&#125;" Margin="0,6,0,0" HorizontalAlignment="Left"/&gt; &lt;/StackPanel&gt; &lt;/DataTemplate&gt; &lt;/hc:Card.FooterTemplate&gt; &lt;/hc:Card&gt; &lt;/DataTemplate&gt; &lt;/ListBox.ItemTemplate&gt; &lt;/ListBox&gt; effect]]></content>
  </entry>
  <entry>
    <title><![CDATA[Carousel]]></title>
    <url>%2Fhandycontrol%2Fextend_controls%2Fcarousel%2Findex.html</url>
    <content type="text"><![CDATA[Carousel control allows you to display the Data in a proper way and navigate between them. 1public class Carousel : SimpleItemsControl, IDisposable Attributes Property Description AutoRun Whether to rotate automatically IsCenter Whether the carousel item is displayed in the center PageButtonStyle Page button style Interval Carousel interval time ExtendWidth Item content expansion width CaseShow filled carousel items12345678910&lt;hc:Carousel Margin="32" IsCenter="True" AutoRun="True" Width="600" Height="330" VerticalAlignment="Center"&gt; &lt;Image Width="600" Stretch="UniformToFill" Source="/HandyControlDemo;component/Resources/Img/1.jpg"/&gt; &lt;Image Width="300" Stretch="UniformToFill" Source="/HandyControlDemo;component/Resources/Img/2.jpg"/&gt; &lt;hc:SimplePanel Width="600"&gt; &lt;Image Stretch="UniformToFill" Source="/HandyControlDemo;component/Resources/Img/3.jpg"/&gt; &lt;TextBlock Text="Demo Text" Style="&#123;StaticResource TextBlockDefault&#125;" FontSize="100" FontWeight="Bold" Foreground="White"/&gt; &lt;/hc:SimplePanel&gt; &lt;Image Width="600" Stretch="UniformToFill" Source="/HandyControlDemo;component/Resources/Img/4.jpg"/&gt; &lt;Image Width="600" Stretch="UniformToFill" Source="/HandyControlDemo;component/Resources/Img/5.jpg"/&gt;&lt;/hc:Carousel&gt; Use bindings to generate carousel items1234567&lt;hc:Carousel AutoRun="True" ItemsSource="&#123;Binding Images&#125;" Width="300" Height="200"&gt; &lt;hc:Carousel.ItemTemplate&gt; &lt;DataTemplate&gt; &lt;Image Source="&#123;Binding&#125;" Width="300"/&gt; &lt;/DataTemplate&gt; &lt;/hc:Carousel.ItemTemplate&gt;&lt;/hc:Carousel&gt; ExtendWidth It will extend a certain distance after the last carousel item. Please note that this is not the concept of offset, but the concept of extension.]]></content>
  </entry>
  <entry>
    <title><![CDATA[ChatBubble]]></title>
    <url>%2Fhandycontrol%2Fextend_controls%2FchatBubble%2Findex.html</url>
    <content type="text"><![CDATA[Dialogue bubbles often appear in communication software. Compared with the contextual dialogue in the form of plain text, the use of dialogue bubbles can make the chat interface more vivid and interesting. Through extension, bubble skin can also be made, which can make the software personalized functions more abundant. 1public class ChatBubble : SelectableItem Attributes Property Description Role Dialogue role Type Message type IsRead Read ReadAction Triggered when the bubble is selected Events Event hc:ChatBubble.Selected hc:ChatBubble.Deselected Caseexample:1234567&lt;ListBox Name="ListBoxChat" ScrollViewer.HorizontalScrollBarVisibility="Disabled" ScrollViewer.CanContentScroll="False" Background="Transparent" hc:ChatBubble.MaxWidth="300" BorderThickness="0" Style="&#123;StaticResource StackPanelVerticalListBox&#125;" ItemsSource="&#123;Binding ChatInfos&#125;"&gt; &lt;ListBox.ItemTemplate&gt; &lt;DataTemplate&gt; &lt;hc:ChatBubble Role="&#123;Binding Role&#125;" Type="&#123;Binding Type&#125;" Content="&#123;Binding Message&#125;" Tag="&#123;Binding&#125;"/&gt; &lt;/DataTemplate&gt; &lt;/ListBox.ItemTemplate&gt; &lt;/ListBox&gt; we need to create a model called ChatInfoModel123456789101112public struct ChatInfoModel &#123; public object Message &#123; get; set; &#125; public string SenderId &#123; get; set; &#125; public ChatRoleType Role &#123; get; set; &#125; public ChatMessageType Type &#123; get; set; &#125; public object Enclosure &#123; get; set; &#125; &#125; we need a list for holding our items: 1public ObservableCollection&lt;ChatInfoModel&gt; ChatInfos &#123; get; set; &#125; = new ObservableCollection&lt;ChatInfoModel&gt;(); for sending string chat:12345678var info = new ChatInfoModel&#123; Message = "Hello", SenderId = _id, Type = ChatMessageType.String, Role = ChatRoleType.Sender&#125;;ChatInfos.Add(info); sending image:1234567891011121314151617var dialog = new OpenFileDialog(); if (dialog.ShowDialog() == true) &#123; var fileName = dialog.FileName; if (File.Exists(fileName)) &#123; var info = new ChatInfoModel &#123; Message = BitmapFrame.Create(new Uri(fileName)), SenderId = _id, Type = ChatMessageType.Image, Role = ChatRoleType.Sender, Enclosure = fileName &#125;; ChatInfos.Add(info); &#125; &#125; sending audio:123456789var info = new ChatInfoModel &#123; Message = "Audio", SenderId = _id, Type = ChatMessageType.Audio, Role = ChatRoleType.Sender, Enclosure = fileName &#125;; ChatInfos.Add(info); for reading audio and image message we need to create a event called hc:ChatBubble.Selected:1&lt;ListBox Name="ListBoxChat" hc:ChatBubble.Selected="ListBoxChat_Selected"... now in hc:ChatBubble.Selected event: 123456789101112131415161718private void ListBoxChat_Selected(object sender, RoutedEventArgs e)&#123; if (e.OriginalSource is FrameworkElement element &amp;&amp; element.Tag is ChatInfoModel info) &#123; if (info.Type == ChatMessageType.Image) &#123; new ImageBrowser(new Uri(info.Enclosure.ToString())) &#123; Owner = WindowHelper.GetActiveWindow() &#125;.Show(); &#125; else if (info.Type == ChatMessageType.Audio) &#123; var player = new SoundPlayer(info.Enclosure.ToString()); player.PlaySync(); &#125; &#125;&#125; You must specify the ChatRoleType to specify the Receiver and SenderYou must specify the ChatMessageType to specify the Message Type (String, Image, Audio, Custom)]]></content>
  </entry>
  <entry>
    <title><![CDATA[CheckComboBox]]></title>
    <url>%2Fhandycontrol%2Fextend_controls%2FcheckComboBox%2Findex.html</url>
    <content type="text"><![CDATA[example: 12345678910111213141516171819202122&lt;StackPanel Margin="32" Orientation="Horizontal"&gt; &lt;StackPanel&gt; &lt;hc:CheckComboBox ShowClearButton="True" MaxWidth="380" ItemsSource="&#123;Binding DataList&#125;" ShowSelectAllButton="True"/&gt; &lt;hc:CheckComboBox MaxWidth="380" ItemsSource="&#123;Binding DataList&#125;" Style="&#123;StaticResource CheckComboBoxExtend&#125;" Margin="0,16,0,0" IsEnabled="False" ShowSelectAllButton="True"/&gt; &lt;hc:CheckComboBox ShowClearButton="True" MaxWidth="380" ItemsSource="&#123;Binding DataList&#125;" Style="&#123;StaticResource CheckComboBoxExtend&#125;" hc:InfoElement.Title="&#123;ex:Lang Key=&#123;x:Static langs:LangKeys.TitleDemoStr1&#125;&#125;" Margin="0,32,0,0" ShowSelectAllButton="True"/&gt; &lt;hc:CheckComboBox MaxWidth="380" ItemsSource="&#123;Binding DataList&#125;" hc:InfoElement.Placeholder="&#123;ex:Lang Key=&#123;x:Static langs:LangKeys.PlsEnterContent&#125;&#125;" hc:InfoElement.Title="&#123;ex:Lang Key=&#123;x:Static langs:LangKeys.TitleDemoStr2&#125;&#125;" Style="&#123;StaticResource CheckComboBoxExtend&#125;" hc:InfoElement.Necessary="True" Margin="0,16,0,0"/&gt; &lt;hc:CheckComboBox ShowClearButton="True" Width="380" ItemsSource="&#123;Binding DataList&#125;" hc:InfoElement.TitleWidth="140" hc:InfoElement.TitlePlacement="Left" Style="&#123;StaticResource CheckComboBoxExtend&#125;" hc:InfoElement.Title="&#123;ex:Lang Key=&#123;x:Static langs:LangKeys.TitleDemoStr3&#125;&#125;" Margin="0,32,0,0" ShowSelectAllButton="True"/&gt; &lt;hc:CheckComboBox Width="380" ItemsSource="&#123;Binding DataList&#125;" hc:InfoElement.TitleWidth="140" hc:InfoElement.TitlePlacement="Left" hc:InfoElement.Placeholder="&#123;ex:Lang Key=&#123;x:Static langs:LangKeys.PlsEnterContent&#125;&#125;" hc:InfoElement.Title="&#123;ex:Lang Key=&#123;x:Static langs:LangKeys.TitleDemoStr3&#125;&#125;" Style="&#123;StaticResource CheckComboBoxExtend&#125;" hc:InfoElement.Necessary="True" Margin="0,16,0,0"/&gt; &lt;/StackPanel&gt; &lt;StackPanel Margin="32,0,0,0"&gt; &lt;hc:CheckComboBox ShowClearButton="True" MaxWidth="380" ItemsSource="&#123;Binding DataList&#125;" Style="&#123;StaticResource CheckComboBoxPlus&#125;" ShowSelectAllButton="True"/&gt; &lt;hc:CheckComboBox MaxWidth="380" ItemsSource="&#123;Binding DataList&#125;" Margin="0,16,0,0" IsEnabled="False" Style="&#123;StaticResource CheckComboBoxPlus&#125;"/&gt; &lt;hc:CheckComboBox MaxWidth="380" ShowClearButton="True" ItemsSource="&#123;Binding DataList&#125;" Style="&#123;StaticResource CheckComboBoxPlus&#125;" hc:InfoElement.Title="&#123;ex:Lang Key=&#123;x:Static langs:LangKeys.TitleDemoStr1&#125;&#125;" Margin="0,32,0,0" ShowSelectAllButton="True"/&gt; &lt;hc:CheckComboBox MaxWidth="380" ItemsSource="&#123;Binding DataList&#125;" hc:InfoElement.Placeholder="&#123;ex:Lang Key=&#123;x:Static langs:LangKeys.PlsEnterContent&#125;&#125;" hc:InfoElement.Title="&#123;ex:Lang Key=&#123;x:Static langs:LangKeys.TitleDemoStr2&#125;&#125;" Style="&#123;StaticResource CheckComboBoxPlus&#125;" hc:InfoElement.Necessary="True" Margin="0,16,0,0"/&gt; &lt;hc:CheckComboBox MaxWidth="380" ItemsSource="&#123;Binding DataList&#125;" ShowClearButton="True" Width="380" hc:InfoElement.TitleWidth="140" hc:InfoElement.TitlePlacement="Left" Style="&#123;StaticResource CheckComboBoxPlus&#125;" hc:InfoElement.Title="&#123;ex:Lang Key=&#123;x:Static langs:LangKeys.TitleDemoStr3&#125;&#125;" Margin="0,32,0,0" ShowSelectAllButton="True"/&gt; &lt;hc:CheckComboBox MaxWidth="380" ItemsSource="&#123;Binding DataList&#125;" Width="380" hc:InfoElement.TitleWidth="140" hc:InfoElement.TitlePlacement="Left" hc:InfoElement.Placeholder="&#123;ex:Lang Key=&#123;x:Static langs:LangKeys.PlsEnterContent&#125;&#125;" hc:InfoElement.Title="&#123;ex:Lang Key=&#123;x:Static langs:LangKeys.TitleDemoStr3&#125;&#125;" Style="&#123;StaticResource CheckComboBoxPlus&#125;" hc:InfoElement.Necessary="True" Margin="0,16,0,0"/&gt; &lt;/StackPanel&gt; &lt;/StackPanel&gt; Attributes Property IsDropDownOpen TagStyle ShowSelectAllButton IsError ErrorStr TextType ShowClearButton MaxDropDownHeight]]></content>
  </entry>
  <entry>
    <title><![CDATA[CirclePanel]]></title>
    <url>%2Fhandycontrol%2Fextend_controls%2FcirclePanel%2Findex.html</url>
    <content type="text"><![CDATA[The circular layout is often used as a container for direction buttons and function buttons. 1public class CirclePanel : Panel Attributes Property Description Diameter The size of the panel can be specified by its diameter KeepVertical Whether the element remains vertical OffsetAngle Overall angular offset Case12345678910111213141516171819202122232425262728293031323334353637&lt;Style x:Key="CirclePanelButton" BasedOn="&#123;StaticResource ButtonCustom&#125;" TargetType="Button"&gt; &lt;Setter Property="UseLayoutRounding" Value="False"/&gt; &lt;Setter Property="Height" Value="77"/&gt; &lt;Setter Property="Width" Value="36.06"/&gt; &lt;Setter Property="Template"&gt; &lt;Setter.Value&gt; &lt;ControlTemplate TargetType="Button"&gt; &lt;hc:SimplePanel&gt; &lt;Path Data="&#123;StaticResource CirclePanelDemoGeometry&#125;" Fill="&#123;DynamicResource PrimaryBrush&#125;" Height="77" Width="36.06"/&gt; &lt;Path Data="&#123;StaticResource CirclePanelRightGeometry&#125;" Stretch="Uniform" Margin="12" Fill="White"/&gt; &lt;/hc:SimplePanel&gt; &lt;ControlTemplate.Triggers&gt; &lt;Trigger Property="IsMouseOver" Value="True"&gt; &lt;Setter Property="Opacity" Value=".9"/&gt; &lt;/Trigger&gt; &lt;Trigger Property="IsPressed" Value="True"&gt; &lt;Setter Property="Opacity" Value=".6"/&gt; &lt;/Trigger&gt; &lt;Trigger Property="IsEnabled" Value="False"&gt; &lt;Setter Property="Opacity" Value="0.4"/&gt; &lt;/Trigger&gt; &lt;/ControlTemplate.Triggers&gt; &lt;/ControlTemplate&gt; &lt;/Setter.Value&gt; &lt;/Setter&gt;&lt;/Style&gt;&lt;hc:CirclePanel Margin="64" Diameter="170"&gt; &lt;Button Style="&#123;StaticResource CirclePanelButton&#125;"/&gt; &lt;Button Style="&#123;StaticResource CirclePanelButton&#125;"/&gt; &lt;Button Style="&#123;StaticResource CirclePanelButton&#125;"/&gt; &lt;Button Style="&#123;StaticResource CirclePanelButton&#125;"/&gt; &lt;Button Style="&#123;StaticResource CirclePanelButton&#125;"/&gt; &lt;Button Style="&#123;StaticResource CirclePanelButton&#125;"/&gt; &lt;Button Style="&#123;StaticResource CirclePanelButton&#125;"/&gt; &lt;Button Style="&#123;StaticResource CirclePanelButton&#125;"/&gt;&lt;/hc:CirclePanel&gt;]]></content>
  </entry>
  <entry>
    <title><![CDATA[CircleProgressBar]]></title>
    <url>%2Fhandycontrol%2Fextend_controls%2FcircleProgressBar%2Findex.html</url>
    <content type="text"><![CDATA[CircleProgressBar Control displays a value in a certain range using a cicular sector that grows clockwise until it becomes a full ring. 12[TemplatePart(Name = IndicatorTemplateName, Type = typeof(Arc))]public class CircleProgressBar : RangeBase Attributes Property Description Default Value Remarks ArcThickness Circle thickness 4 The default value is provided by the theme ShowText Whether to display text true Text Text content Progress text Styles Style Description ProgressBarCircleBaseStyle Default style ProgressBarSuccessCircle Success style ProgressBarInfoCircle Info style ProgressBarWarningCircle Warning style ProgressBarDangerCircle Danger style ProgressBarDefaultCircle Available Only in Custom Version Default style ProgressBarVioletCircle Available Only in Custom Version Violet style Case12345678&lt;StackPanel Orientation="Horizontal" Margin="0,32,0,0"&gt; &lt;hc:CircleProgressBar Value="&#123;Binding Value,ElementName=SliderDemo&#125;"/&gt; &lt;hc:CircleProgressBar Value="&#123;Binding Value,ElementName=SliderDemo&#125;" FontSize="30" Margin="16,0,0,0"/&gt; &lt;hc:CircleProgressBar Value="&#123;Binding Value,ElementName=SliderDemo&#125;" Margin="16,0,0,0" ShowText="False" Width="20" Height="20" ArcThickness="2" Style="&#123;StaticResource ProgressBarSuccessCircle&#125;"/&gt; &lt;hc:CircleProgressBar Value="&#123;Binding Value,ElementName=SliderDemo&#125;" Margin="16,0,0,0" ShowText="False" Width="30" Height="30" ArcThickness="6" Style="&#123;StaticResource ProgressBarInfoCircle&#125;"/&gt; &lt;hc:CircleProgressBar Value="&#123;Binding Value,ElementName=SliderDemo&#125;" Margin="16,0,0,0" ShowText="False" Width="40" Height="40" ArcThickness="10" Style="&#123;StaticResource ProgressBarWarningCircle&#125;"/&gt; &lt;hc:CircleProgressBar Value="&#123;Binding Value,ElementName=SliderDemo&#125;" Margin="16,0,0,0" Width="50" Height="50" Style="&#123;StaticResource ProgressBarDangerCircle&#125;"/&gt;&lt;/StackPanel&gt;]]></content>
  </entry>
  <entry>
    <title><![CDATA[Clock]]></title>
    <url>%2Fhandycontrol%2Fextend_controls%2Fclock%2Findex.html</url>
    <content type="text"><![CDATA[Clock control displays a virtual clock, allowing the user to select the time on this clock. 12345678[TemplatePart(Name = ElementButtonAm, Type = typeof(RadioButton))][TemplatePart(Name = ElementButtonPm, Type = typeof(RadioButton))][TemplatePart(Name = ElementCanvas, Type = typeof(Canvas))][TemplatePart(Name = ElementBorderTitle, Type = typeof(Border))][TemplatePart(Name = ElementBorderClock, Type = typeof(Border))][TemplatePart(Name = ElementPanelNum, Type = typeof(CirclePanel))][TemplatePart(Name = ElementTimeStr, Type = typeof(TextBlock))]public class Clock : ClockBase Create Clock1&lt;hc:Clock /&gt; 1var clock = new Clock(); The generated Clock is shown below: Choose timeYou can select the time by clicking the clock on the left, or by clicking the hour, minute, and second list on the right. You can also set the date like this in a XAML clock or code. 1&lt;hc:Clock SelectedTime="&#123;x:Static system:DateTime.Now&#125;"/&gt; 1clock.SelectedTime = DateTime.Now; Attributes Property Description SelectedTime Gets or sets the currently selected time. DisplayTime Gets or sets the current display time. TimeFormat Get or set the format used to display the selected time ClockRadioButtonStyle Get or set the style of RadioButton in Clock control ShowConfirmButton Event Event Description DisplayTimeChanged Occurs when the displayed time changes. ListClock1&lt;hc:ListClock/&gt;]]></content>
  </entry>
  <entry>
    <title><![CDATA[ColorPicker]]></title>
    <url>%2Fhandycontrol%2Fextend_controls%2FcolorPicker%2Findex.html</url>
    <content type="text"><![CDATA[Imitate Chrome’s color picker, related blog post: “WPF Control Library-Imitate Chrome’s ColorPicker” The ColorPicker is an editor that allows a user to pick a color from predefined color palettes. 123456789[TemplatePart(Name = ElementBorderColor, Type = typeof(Border))][TemplatePart(Name = ElementBorderPicker, Type = typeof(Border))][TemplatePart(Name = ElementBorderDrag, Type = typeof(Border))][TemplatePart(Name = ElementPanelColor, Type = typeof(Panel))][TemplatePart(Name = ElementSliderColor, Type = typeof(Panel))][TemplatePart(Name = ElementSliderOpacity, Type = typeof(Panel))][TemplatePart(Name = ElementPanelRgb, Type = typeof(Panel))][TemplatePart(Name = ElementButtonDropper, Type = typeof(ToggleButton))]public class ColorPicker : Control, ISingleOpen Attributes Property Description Default Value Remarks SelectedBrush Selected color Brushes.White Events Event Description Remarks SelectedColorChanged Color change event Canceled Cancel event Case1&lt;hc:ColorPicker Name="ColorPicker" Margin="32"/&gt; you can use in Code-behind without using xaml 12345678var picker = SingleOpenHelper.CreateControl&lt;ColorPicker&gt;(); var window = new PopupWindow &#123; PopupElement = picker &#125;; picker.SelectedColorChanged += delegate &#123; window.Close(); &#125;; picker.Canceled += delegate &#123; window.Close(); &#125;; window.Show(OpenButton, false);]]></content>
  </entry>
  <entry>
    <title><![CDATA[ComboBox]]></title>
    <url>%2Fhandycontrol%2Fextend_controls%2FcomboBox%2Findex.html</url>
    <content type="text"><![CDATA[HC extension of native combobox. 1public class ComboBox : System.Windows.Controls.ComboBox, IDataInput Attributes Property Description Default Value Remarks VerifyFunc Data Verification Delegation IsError Is the data wrong false ErrorStr Error prompt TextType Text Type ShowClearButton Whether to show the clear button false AutoComplete Whether to automatically complete the input false Additional attributes Attribute Description Default Value Remarks InfoElement.Placeholder Placeholder InfoElement.Necessary Is it required false InfoElement.Symbol Required mark ● InfoElement.ContentHeight Content Height 30 Available when the title is above InfoElement.MinContentHeight Minimum content height 30 Available when the title is on top TitleElement.Title Title TitleElement.TitlePlacement Title Alignment TitlePlacementType.Top TitleElement.TitleWidth TitleWidth 120 Method Method Description Remarks VerifyData Verify Data Verification can be triggered manually Style Style Description ComboBoxPlusBaseStyle Default Style CaseThe native functions behave the same on the extended ComboBox. 12345678910111213&lt;StackPanel Margin="32"&gt; &lt;hc:ComboBox ShowClearButton="True" ItemsSource="&#123;Binding DataList&#125;" SelectedIndex="0"/&gt; &lt;hc:ComboBox ItemsSource="&#123;Binding DataList&#125;" Margin="0,16,0,0" SelectedIndex="0" IsEnabled="False"/&gt; &lt;hc:ComboBox ShowClearButton="True" ItemsSource="&#123;Binding DataList&#125;" SelectedIndex="0" Margin="0,16,0,0" IsEditable="True"/&gt; &lt;hc:ComboBox ItemsSource="&#123;Binding DataList&#125;" SelectedIndex="0" hc:InfoElement.Title="&#123;ex:Lang Key=&#123;x:Static langs:LangKeys.TitleDemoStr1&#125;&#125;" Margin="0,32,0,0" Text="&#123;ex:Lang Key=&#123;x:Static langs:LangKeys.ContentDemoStr&#125;&#125;"/&gt; &lt;hc:ComboBox ShowClearButton="True" ItemsSource="&#123;Binding DataList&#125;" hc:InfoElement.Placeholder="&#123;ex:Lang Key=&#123;x:Static langs:LangKeys.PlsEnterContent&#125;&#125;" hc:InfoElement.Title="&#123;ex:Lang Key=&#123;x:Static langs:LangKeys.TitleDemoStr2&#125;&#125;" hc:InfoElement.Necessary="True" Margin="0,32,0,0"/&gt; &lt;hc:ComboBox ItemsSource="&#123;Binding DataList&#125;" IsEditable="True" SelectedIndex="0" hc:InfoElement.Title="&#123;ex:Lang Key=&#123;x:Static langs:LangKeys.TitleDemoStr1&#125;&#125;" Margin="0,32,0,0" Text="&#123;ex:Lang Key=&#123;x:Static langs:LangKeys.ContentDemoStr&#125;&#125;"/&gt; &lt;hc:ComboBox AutoComplete="True" ShowClearButton="True" ItemsSource="&#123;Binding DataList&#125;" IsEditable="True" hc:InfoElement.Placeholder="&#123;ex:Lang Key=&#123;x:Static langs:LangKeys.PlsEnterContent&#125;&#125;" hc:InfoElement.Title="&#123;ex:Lang Key=&#123;x:Static langs:LangKeys.TitleDemoStr2&#125;&#125;" hc:InfoElement.Necessary="True" Margin="0,32,0,0"/&gt; &lt;hc:ComboBox ItemsSource="&#123;Binding DataList&#125;" Width="380" hc:InfoElement.TitleWidth="140" hc:InfoElement.TitlePlacement="Left" hc:InfoElement.Title="&#123;ex:Lang Key=&#123;x:Static langs:LangKeys.TitleDemoStr3&#125;&#125;" Margin="0,32,0,0" Text="&#123;ex:Lang Key=&#123;x:Static langs:LangKeys.ContentDemoStr&#125;&#125;"/&gt; &lt;hc:ComboBox ShowClearButton="True" ItemsSource="&#123;Binding DataList&#125;" Width="380" hc:InfoElement.TitleWidth="140" hc:InfoElement.Placeholder="&#123;ex:Lang Key=&#123;x:Static langs:LangKeys.PlsEnterContent&#125;&#125;" hc:InfoElement.TitlePlacement="Left" hc:InfoElement.Title="&#123;ex:Lang Key=&#123;x:Static langs:LangKeys.TitleDemoStr3&#125;&#125;" hc:InfoElement.Necessary="True" Margin="0,32,0,0"/&gt; &lt;hc:ComboBox ItemsSource="&#123;Binding DataList&#125;" IsEditable="True" Width="380" hc:InfoElement.TitleWidth="140" hc:InfoElement.TitlePlacement="Left" hc:InfoElement.Title="&#123;ex:Lang Key=&#123;x:Static langs:LangKeys.TitleDemoStr3&#125;&#125;" Margin="0,32,0,0" Text="&#123;ex:Lang Key=&#123;x:Static langs:LangKeys.ContentDemoStr&#125;&#125;"/&gt; &lt;hc:ComboBox AutoComplete="True" ShowClearButton="True" ItemsSource="&#123;Binding DataList&#125;" IsEditable="True" Width="380" hc:InfoElement.TitleWidth="140" hc:InfoElement.Placeholder="&#123;ex:Lang Key=&#123;x:Static langs:LangKeys.PlsEnterContent&#125;&#125;" hc:InfoElement.TitlePlacement="Left" hc:InfoElement.Title="&#123;ex:Lang Key=&#123;x:Static langs:LangKeys.TitleDemoStr3&#125;&#125;" hc:InfoElement.Necessary="True" Margin="0,32,0,0"/&gt;&lt;/StackPanel&gt;]]></content>
  </entry>
  <entry>
    <title><![CDATA[CoverFlow]]></title>
    <url>%2Fhandycontrol%2Fextend_controls%2FcoverFlow%2Findex.html</url>
    <content type="text"><![CDATA[This control displays the cover in 3D and can be used to enhance the interface effect. 1234[TemplatePart(Name = ElementViewport3D, Type = typeof(Viewport3D))][TemplatePart(Name = ElementCamera, Type = typeof(ProjectionCamera))][TemplatePart(Name = ElementVisualParent, Type = typeof(ModelVisual3D))]public class CoverFlow : Control Attributes Property Description Default Value Remarks PageIndex Page Number Loop Whether to loop display Method Method Description Add(string) Add a resource Add(Uri) Add a resource AddRange(IEnumerable) Add resources in batches JumpTo(int) Jump Case1234567891011121314CoverFlowMain.AddRange(new []&#123; new Uri(@"pack://application:,,,/Resources/Img/Album/1.jpg"), new Uri(@"pack://application:,,,/Resources/Img/Album/2.jpg"), new Uri(@"pack://application:,,,/Resources/Img/Album/3.jpg"), new Uri(@"pack://application:,,,/Resources/Img/Album/4.jpg"), new Uri(@"pack://application:,,,/Resources/Img/Album/5.jpg"), new Uri(@"pack://application:,,,/Resources/Img/Album/6.jpg"), new Uri(@"pack://application:,,,/Resources/Img/Album/7.jpg"), new Uri(@"pack://application:,,,/Resources/Img/Album/8.jpg"), new Uri(@"pack://application:,,,/Resources/Img/Album/9.jpg"), new Uri(@"pack://application:,,,/Resources/Img/Album/10.jpg")&#125;);CoverFlowMain.JumpTo(2); 1&lt;hc:CoverFlow x:Name="CoverFlowMain" Margin="32" Width="500" Height="300"/&gt;]]></content>
  </entry>
  <entry>
    <title><![CDATA[CompareSlider]]></title>
    <url>%2Fhandycontrol%2Fextend_controls%2FcompareSlider%2Findex.html</url>
    <content type="text"><![CDATA[With the help of the comparison slider, you can easily see the difference before and after the element changes. 1public class CompareSlider : Slider Attributes Property Description Default Value Remarks TargetContent Target Content SourceContent Source content (current content) Value Orientation Case12345678910111213141516171819202122232425262728293031323334&lt;WrapPanel ItemHeight="384" ItemWidth="632"&gt; &lt;hc:CompareSlider Value="5" Width="600" Height="352"&gt; &lt;hc:CompareSlider.TargetContent&gt; &lt;Border&gt; &lt;Border.Background&gt; &lt;ImageBrush ImageSource="/HandyControlDemo;component/Resources/Img/b1.jpg"/&gt; &lt;/Border.Background&gt; &lt;/Border&gt; &lt;/hc:CompareSlider.TargetContent&gt; &lt;hc:CompareSlider.SourceContent&gt; &lt;Border&gt; &lt;Border.Background&gt; &lt;ImageBrush ImageSource="/HandyControlDemo;component/Resources/Img/b2.jpg"/&gt; &lt;/Border.Background&gt; &lt;/Border&gt; &lt;/hc:CompareSlider.SourceContent&gt; &lt;/hc:CompareSlider&gt; &lt;hc:CompareSlider Orientation="Vertical" Value="5" Width="600" Height="352"&gt; &lt;hc:CompareSlider.TargetContent&gt; &lt;Border&gt; &lt;Border.Background&gt; &lt;ImageBrush ImageSource="/HandyControlDemo;component/Resources/Img/b1.jpg"/&gt; &lt;/Border.Background&gt; &lt;/Border&gt; &lt;/hc:CompareSlider.TargetContent&gt; &lt;hc:CompareSlider.SourceContent&gt; &lt;Border&gt; &lt;Border.Background&gt; &lt;ImageBrush ImageSource="/HandyControlDemo;component/Resources/Img/b2.jpg"/&gt; &lt;/Border.Background&gt; &lt;/Border&gt; &lt;/hc:CompareSlider.SourceContent&gt; &lt;/hc:CompareSlider&gt;&lt;/WrapPanel&gt;]]></content>
  </entry>
  <entry>
    <title><![CDATA[CoverView]]></title>
    <url>%2Fhandycontrol%2Fextend_controls%2FcoverView%2Findex.html</url>
    <content type="text"><![CDATA[Copy the album view of Itunes. 1public class CoverView : RegularItemsControl Attributes Property Description Default Value Remarks CoverViewContentStyle CoverViewContentStyle ItemContentHeight Item ContentHeight 300 ItemContentHeightFixed Is the item content height fixed true ItemHeaderTemplate Item Header Template SourceContent Source Content (Current Content) Groups Number of Groups ItemWidth Specifies the width of the item ItemHeight Specifies the Height of the item ItemSource if you want to bind your data to ItemsSource ContentHeight Height of the CoverViewContent ShowContent Show or Hide Content when selected items, Only Available in Custom Version Case1234567891011121314&lt;hc:CoverView Margin="27" Width="880" Height="432" ItemWidth="160" ItemHeight="160" ItemsSource="&#123;Binding DataList&#125;"&gt; &lt;hc:CoverView.ItemHeaderTemplate&gt; &lt;DataTemplate&gt; &lt;Image Source="&#123;Binding ImgPath&#125;"/&gt; &lt;/DataTemplate&gt; &lt;/hc:CoverView.ItemHeaderTemplate&gt; &lt;hc:CoverView.ItemTemplate&gt; &lt;DataTemplate&gt; &lt;Border Margin="10" Height="300" Background="&#123;Binding BackgroundToken,Converter=&#123;StaticResource String2BrushConverter&#125;&#125;"&gt; &lt;TextBlock Text="&#123;ex:Lang Key=&#123;x:Static langs:LangKeys.ContentDemoStr&#125;&#125;" VerticalAlignment="Center" HorizontalAlignment="Center" Foreground="White"/&gt; &lt;/Border&gt; &lt;/DataTemplate&gt; &lt;/hc:CoverView.ItemTemplate&gt;&lt;/hc:CoverView&gt; or 123456789101112131415&lt;hc:CoverView&gt; &lt;hc:CoverViewItem&gt; &lt;hc:CoverViewItem.Header&gt; &lt;Image Source="/HandyControlDemo;component/Resources/Img/Album/1.jpg"/&gt; &lt;/hc:CoverViewItem.Header&gt; &lt;TextBlock Text="Content"/&gt; &lt;/hc:CoverViewItem&gt;&lt;hc:CoverViewItem&gt; &lt;hc:CoverViewItem.Header&gt; &lt;Image Source="/HandyControlDemo;component/Resources/Img/Album/2.jpg"/&gt; &lt;/hc:CoverViewItem.Header&gt; &lt;TextBlock Text="Content"/&gt; &lt;/hc:CoverViewItem&gt;&lt;/hc:CoverView&gt;]]></content>
  </entry>
  <entry>
    <title><![CDATA[DashBorder]]></title>
    <url>%2Fhandycontrol%2Fextend_controls%2FdashBorder%2Findex.html</url>
    <content type="text"><![CDATA[123&lt;hc:DashBorder&gt;&lt;/hc:DashBorder&gt; Attributes Property BorderThickness BorderDashThickness Padding CornerRadius BorderBrush Background BorderDashArray BorderDashCap BorderDashOffset]]></content>
  </entry>
  <entry>
    <title><![CDATA[DatePicker]]></title>
    <url>%2Fhandycontrol%2Fextend_controls%2FdatePicker%2Findex.html</url>
    <content type="text"><![CDATA[The DatePicker control allows the user to select a date by typing the date in the textbox or using the drop-down calendar control. 12[TemplatePart(Name = ElementTextBox, Type = typeof(DatePickerTextBox))]public class DatePicker : System.Windows.Controls.DatePicker, IDataInput Create DatePicker1&lt;hc:DatePicker /&gt; 1var datePicker = new DatePicker(); The generated DatePicker is shown below: Select dateYou can enter the date through the textbox, or click the button to the right of the text box to open the drop-down calendar control to select the date. You can also set the date like this in a XAML clock or code. 1&lt;hc:DatePicker SelectedDate="&#123;x:Static system:DateTime.Now&#125;"/&gt; 1datePicker.SelectedDate = DateTime.Now; Set title and placeholder textYou can add Headers and Placeholders to the DatePicker to indicate to the user what they do. 1234&lt;hc:DatePicker hc:InfoElement.TitleWidth="140" hc:InfoElement.TitlePlacement="Left" hc:InfoElement.Placeholder="&#123;x:Static langs:Lang.PlsEnterContent&#125;" hc:InfoElement.Title="&#123;x:Static langs:Lang.TitleDemoStr3&#125;" /&gt; Attributes Property Description SelectedDate Get or set the currently selected date VerifyFunc Get or Set Data Validation Delegation IsError Get or set whether the data is wrong ErrorStr Get or Set Error Alert TextType Get or Set Text Type ShowClearButton Gets or sets whether to show the clear button Method Method Description VerifyData () Verify Data you can change datepicker ui culture: 1ConfigHelper.Instance.SetLang("en");]]></content>
  </entry>
  <entry>
    <title><![CDATA[DateTimePicker]]></title>
    <url>%2Fhandycontrol%2Fextend_controls%2FdateTimePicker%2Findex.html</url>
    <content type="text"><![CDATA[The DatePicker control allows users to select a date and time by typing the date and time in a textbox, or using the drop-down calendar control. 12345[TemplatePart(Name = ElementRoot, Type = typeof(Grid))][TemplatePart(Name = ElementTextBox, Type = typeof(WatermarkTextBox))][TemplatePart(Name = ElementButton, Type = typeof(Button))][TemplatePart(Name = ElementPopup, Type = typeof(Popup))]public class DateTimePicker : Control, IDataInput Create DateTimePicker1&lt;hc:DateTimePicker /&gt; 1var dateTimePicker = new DateTimePicker(); The generated DateTimePicker is shown below: Select date and timeYou can enter the date and time through the textbox, or click the button to the right of the text box to open the drop-down calendar and clock controls to select the date and time. You can also set the date like this in XAML or code. 1&lt;hc:DateTimePicker SelectedDateTime="&#123;x:Static system:DateTime.Now&#125;"/&gt; 1dateTimePicker.SelectedDateTime = DateTime.Now; Set title and placeholder textYou can add Headers and Placeholders to the DatePicker to indicate to the user what they do. To use these two properties, you first need to apply the DateTimePickerExtend or DateTimePickerPlus styles. 1234&lt;hc:DateTimePicker ShowClearButton="True" Style="&#123;StaticResource DateTimePickerExtend&#125;" hc:InfoElement.Title="&#123;x:Static langs:Lang.TitleDemoStr1&#125;" hc:InfoElement.Placeholder="&#123;x:Static langs:Lang.PlsEnterContent&#125;"/&gt; Attributes Property Description SelectedDateTime Get or set the currently selected date and time DateTimeFormat Gets or sets the format used to display the selected date and time CalendarStyle Gets or sets the style used when rendering the calendar DisplayDateTime Get or set the date to be displayed IsDropDownOpen Gets or sets a value indicating whether the drop-down is on or off Calendar Text Get the text displayed by DateTimePicker, or set the selected date and time VerifyFunc Get or Set Data Validation Delegation IsError Get or set whether the data is wrong ErrorStr Get or Set Error Alert TextType Get or Set Text Type ShowClearButton Gets or sets whether to show the clear button Method Method Description VerifyData () Verify Data Events Event PickerClosed PickerOpened SelectedDateTimeChanged you can change datetimepicker ui culture: 1ConfigHelper.Instance.SetLang("en");]]></content>
  </entry>
  <entry>
    <title><![CDATA[Dialog]]></title>
    <url>%2Fhandycontrol%2Fextend_controls%2Fdialog%2Findex.html</url>
    <content type="text"><![CDATA[In the case of retaining the current page status, notify the user and carry related operations. 1public class Dialog : ContentControl Attributes Property Description Default Value Remarks IsClosed Is it closed Additional attributes Name Description Token Used to set the message token Method Name Description Show(object, string) Show carried content Show(string) Display the bearer content (automatically instantiate the bearer content) Close() Close Register(string, FrameworkElement) Register a message tag for the specified element Unregister(string, Panel) Unregister the message mark for the specified element Unregister(Panel) Unregister if the element is registered with a message mark Unregister(string) Unregister if the message is marked with the corresponding element CaseBasic usage123456789101112131415&lt;Border x:Class="HandyControlDemo.UserControl.TextDialog" xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation" xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml" xmlns:langs="clr-namespace:HandyControlDemo.Properties.Langs" xmlns:ex="clr-namespace:HandyControlDemo.Tools.Extension" xmlns:hc="https://handyorg.github.io/handycontrol" CornerRadius="10" Width="400" Height="247" Background="&#123;DynamicResource RegionBrush&#125;"&gt; &lt;hc:SimplePanel&gt; &lt;TextBlock Style="&#123;StaticResource TextBlockLargeBold&#125;" Text="&#123;ex:Lang Key=&#123;x:Static langs:LangKeys.PleaseWait&#125;&#125;"/&gt; &lt;Button Width="22" Height="22" Command="hc:ControlCommands.Close" Style="&#123;StaticResource ButtonIcon&#125;" Foreground="&#123;DynamicResource PrimaryBrush&#125;" hc:IconElement.Geometry="&#123;StaticResource ErrorGeometry&#125;" Padding="0" HorizontalAlignment="Right" VerticalAlignment="Top" Margin="0,4,4,0"/&gt; &lt;/hc:SimplePanel&gt;&lt;/Border&gt; 12345678910namespace HandyControlDemo.UserControl&#123; public partial class TextDialog &#123; public TextDialog() &#123; InitializeComponent(); &#125; &#125;&#125; 1Dialog.Show(new TextDialog()); Asynchronously wait for the result to returnAfter initializing the vm through the Initialize extension method, you can use the GetResultAsync method to achieve asynchronous wait on this basis: 1234Dialog.Show&lt;InteractiveDialog&gt;() .Initialize&lt;InteractiveDialogViewModel&gt;(vm =&gt; vm.Message = DialogResult) .GetResultAsync&lt;string&gt;() .ContinueWith(str =&gt; DialogResult = str.Result); A simpler asynchronous way123var d = Dialog.Show&lt;ProgressDialog&gt;();await Task.Delay(5 * 1000);d.Close(); Pop-up behaviorIf the token parameter is not given when calling the Show method, it will pop up the currently active window by default. If the value of token is given, the type of the target element will be judged internally. If the type is a window, it will pop up in the decoration layer under the window, otherwise it will look for the child elements of the target element until it finds the type of DialogContainer The child element of will finally pop up inside the child element. 12345&lt;UserControl hc:Dialog.Token="DialogContainer"&gt; &lt;hc:DialogContainer&gt; // Internal controls &lt;/hc:DialogContainer&gt;&lt;/UserControl&gt;]]></content>
  </entry>
  <entry>
    <title><![CDATA[Divider]]></title>
    <url>%2Fhandycontrol%2Fextend_controls%2Fdivider%2Findex.html</url>
    <content type="text"><![CDATA[The dividing line that separates the content. 1public class Divider : Control Attributes Property Description Default Value Remarks Content Content Orientation Orientation ContentTemplate Content Template ContentStringFormat Content String Format ContentTemplateSelector Content Template LineStroke Dividing line color LineStrokeThickness Dividing line thickness 1 LineStrokeDashArray Dividing line gap Case12345678910111213141516171819202122232425262728293031323334&lt;WrapPanel Margin="16"&gt; &lt;StackPanel Margin="16" Width="300"&gt; &lt;hc:Divider/&gt; &lt;hc:Divider Content="&#123;ex:Lang Key=&#123;x:Static langs:LangKeys.Title&#125;&#125;"/&gt; &lt;hc:Divider Content="&#123;ex:Lang Key=&#123;x:Static langs:LangKeys.Title&#125;&#125;" Padding="10,0"/&gt; &lt;hc:Divider LineStrokeThickness="2" LineStroke="&#123;DynamicResource DarkPrimaryBrush&#125;"/&gt; &lt;hc:Divider LineStrokeDashArray="2,2"/&gt; &lt;/StackPanel&gt; &lt;StackPanel Margin="16" Width="300"&gt; &lt;hc:Divider Content="&#123;ex:Lang Key=&#123;x:Static langs:LangKeys.Title&#125;&#125;" HorizontalContentAlignment="Left"/&gt; &lt;hc:Divider Content="&#123;ex:Lang Key=&#123;x:Static langs:LangKeys.Title&#125;&#125;" Padding="10,0" HorizontalContentAlignment="Right"/&gt; &lt;StackPanel Orientation="Horizontal"&gt; &lt;Button Content="&#123;ex:Lang Key=&#123;x:Static langs:LangKeys.Button&#125;&#125;"/&gt; &lt;hc:Divider Orientation="Vertical" MaxHeight="16"/&gt; &lt;Button Content="&#123;ex:Lang Key=&#123;x:Static langs:LangKeys.Button&#125;&#125;"/&gt; &lt;hc:Divider Orientation="Vertical" MaxHeight="16"/&gt; &lt;Button Content="&#123;ex:Lang Key=&#123;x:Static langs:LangKeys.Button&#125;&#125;"/&gt; &lt;/StackPanel&gt; &lt;StackPanel Orientation="Horizontal" Margin="0,16,0,0"&gt; &lt;Button Content="&#123;ex:Lang Key=&#123;x:Static langs:LangKeys.Button&#125;&#125;"/&gt; &lt;hc:Divider LineStrokeThickness="2" Orientation="Vertical" MaxHeight="16"/&gt; &lt;Button Content="&#123;ex:Lang Key=&#123;x:Static langs:LangKeys.Button&#125;&#125;"/&gt; &lt;hc:Divider LineStrokeThickness="2" Orientation="Vertical" MaxHeight="16"/&gt; &lt;Button Content="&#123;ex:Lang Key=&#123;x:Static langs:LangKeys.Button&#125;&#125;"/&gt; &lt;/StackPanel&gt; &lt;StackPanel Orientation="Horizontal" Margin="0,16,0,0"&gt; &lt;Button Content="&#123;ex:Lang Key=&#123;x:Static langs:LangKeys.Button&#125;&#125;"/&gt; &lt;hc:Divider LineStrokeThickness="2" LineStroke="&#123;DynamicResource DarkPrimaryBrush&#125;" Orientation="Vertical" MaxHeight="16"/&gt; &lt;Button Content="&#123;ex:Lang Key=&#123;x:Static langs:LangKeys.Button&#125;&#125;"/&gt; &lt;hc:Divider LineStrokeThickness="2" LineStroke="&#123;DynamicResource DarkPrimaryBrush&#125;" Orientation="Vertical" MaxHeight="16"/&gt; &lt;Button Content="&#123;ex:Lang Key=&#123;x:Static langs:LangKeys.Button&#125;&#125;"/&gt; &lt;/StackPanel&gt; &lt;/StackPanel&gt;&lt;/WrapPanel&gt;]]></content>
  </entry>
  <entry>
    <title><![CDATA[Drawer]]></title>
    <url>%2Fhandycontrol%2Fextend_controls%2Fdrawer%2Findex.html</url>
    <content type="text"><![CDATA[When the Dialog component cannot meet our needs (for example, to display some documents), you can use Drawer. 12[ContentProperty("Content")]public class Drawer : FrameworkElement Attributes Property Description Default Value Remarks IsOpen Is it closed MaskCanClose Click whether the mask layer can be closed Drawer true ShowMask Whether to show the mask layer true Dock Location Dock.Left ShowMode Display Mode DrawerShowMode.Cover MaskBrush Mask layer color Content Content Events Name Description Opened Triggered when the drawer is opened Closed Triggered when the drawer is closed Case123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566&lt;hc:SimplePanel Margin="22"&gt; &lt;Grid&gt; &lt;Grid.RowDefinitions&gt; &lt;RowDefinition/&gt; &lt;RowDefinition/&gt; &lt;RowDefinition/&gt; &lt;/Grid.RowDefinitions&gt; &lt;Grid.ColumnDefinitions&gt; &lt;ColumnDefinition/&gt; &lt;ColumnDefinition/&gt; &lt;ColumnDefinition/&gt; &lt;/Grid.ColumnDefinitions&gt; &lt;ToggleButton Margin="10" HorizontalAlignment="Stretch" Grid.Row="1" Grid.Column="0" Content="Left" IsChecked="&#123;Binding IsOpen,ElementName=DrawerLeft&#125;"/&gt; &lt;ToggleButton Margin="10" HorizontalAlignment="Stretch" Grid.Row="0" Grid.Column="1" Content="Top" IsChecked="&#123;Binding IsOpen,ElementName=DrawerTop&#125;"/&gt; &lt;ToggleButton Margin="10" HorizontalAlignment="Stretch" Grid.Row="1" Grid.Column="2" Content="Right" IsChecked="&#123;Binding IsOpen,ElementName=DrawerRight&#125;"/&gt; &lt;ToggleButton Margin="10" HorizontalAlignment="Stretch" Grid.Row="2" Grid.Column="1" Content="Bottom" IsChecked="&#123;Binding IsOpen,ElementName=DrawerBottom&#125;"/&gt; &lt;/Grid&gt; &lt;hc:Drawer Name="DrawerLeft" Dock="Left" ShowMode="Push"&gt; &lt;Border Background="&#123;DynamicResource RegionBrush&#125;" Width="300" BorderThickness="0,1,0,0" BorderBrush="&#123;DynamicResource BorderBrush&#125;"&gt; &lt;Grid&gt; &lt;Grid.RowDefinitions&gt; &lt;RowDefinition Height="Auto"/&gt; &lt;RowDefinition/&gt; &lt;/Grid.RowDefinitions&gt; &lt;TextBlock Margin="10,0,0,0" Text="Header" Style="&#123;StaticResource TextBlockTitle&#125;" HorizontalAlignment="Left"/&gt; &lt;Button Command="hc:ControlCommands.Close" Grid.Row="0" HorizontalAlignment="Right" Foreground="&#123;DynamicResource PrimaryTextBrush&#125;" Style="&#123;StaticResource ButtonIcon&#125;" hc:IconElement.Geometry="&#123;StaticResource DeleteFillCircleGeometry&#125;"/&gt; &lt;/Grid&gt; &lt;/Border&gt; &lt;/hc:Drawer&gt; &lt;hc:Drawer Name="DrawerTop" Dock="Top" ShowMode="Press"&gt; &lt;Border Background="&#123;DynamicResource RegionBrush&#125;" Height="300" BorderThickness="0,1,0,0" BorderBrush="&#123;DynamicResource BorderBrush&#125;"&gt; &lt;Grid&gt; &lt;Grid.RowDefinitions&gt; &lt;RowDefinition Height="Auto"/&gt; &lt;RowDefinition/&gt; &lt;/Grid.RowDefinitions&gt; &lt;TextBlock Margin="10,0,0,0" Text="Header" Style="&#123;StaticResource TextBlockTitle&#125;" HorizontalAlignment="Left"/&gt; &lt;Button Command="hc:ControlCommands.Close" Grid.Row="0" HorizontalAlignment="Right" Foreground="&#123;DynamicResource PrimaryTextBrush&#125;" Style="&#123;StaticResource ButtonIcon&#125;" hc:IconElement.Geometry="&#123;StaticResource DeleteFillCircleGeometry&#125;"/&gt; &lt;/Grid&gt; &lt;/Border&gt; &lt;/hc:Drawer&gt; &lt;hc:Drawer Name="DrawerRight" MaskCanClose="False"&gt; &lt;Border Background="&#123;DynamicResource RegionBrush&#125;" Width="300" BorderThickness="0,1,0,0" BorderBrush="&#123;DynamicResource BorderBrush&#125;"&gt; &lt;Grid&gt; &lt;Grid.RowDefinitions&gt; &lt;RowDefinition Height="Auto"/&gt; &lt;RowDefinition/&gt; &lt;/Grid.RowDefinitions&gt; &lt;TextBlock Margin="10,0,0,0" Text="Header" Style="&#123;StaticResource TextBlockTitle&#125;" HorizontalAlignment="Left"/&gt; &lt;Button Command="hc:ControlCommands.Close" Grid.Row="0" HorizontalAlignment="Right" Foreground="&#123;DynamicResource PrimaryTextBrush&#125;" Style="&#123;StaticResource ButtonIcon&#125;" hc:IconElement.Geometry="&#123;StaticResource DeleteFillCircleGeometry&#125;"/&gt; &lt;/Grid&gt; &lt;/Border&gt; &lt;/hc:Drawer&gt; &lt;hc:Drawer Name="DrawerBottom" Dock="Bottom" ShowMask="False"&gt; &lt;Border Background="&#123;DynamicResource RegionBrush&#125;" Height="300" BorderThickness="0,1,0,0" BorderBrush="&#123;DynamicResource BorderBrush&#125;"&gt; &lt;Grid&gt; &lt;Grid.RowDefinitions&gt; &lt;RowDefinition Height="Auto"/&gt; &lt;RowDefinition/&gt; &lt;/Grid.RowDefinitions&gt; &lt;TextBlock Margin="10,0,0,0" Text="Header" Style="&#123;StaticResource TextBlockTitle&#125;" HorizontalAlignment="Left"/&gt; &lt;Button Command="hc:ControlCommands.Close" Grid.Row="0" HorizontalAlignment="Right" Foreground="&#123;DynamicResource PrimaryTextBrush&#125;" Style="&#123;StaticResource ButtonIcon&#125;" hc:IconElement.Geometry="&#123;StaticResource DeleteFillCircleGeometry&#125;"/&gt; &lt;/Grid&gt; &lt;/Border&gt; &lt;/hc:Drawer&gt;&lt;/hc:SimplePanel&gt;]]></content>
  </entry>
  <entry>
    <title><![CDATA[FlipClock]]></title>
    <url>%2Fhandycontrol%2Fextend_controls%2FflipClock%2Findex.html</url>
    <content type="text"><![CDATA[A clock scheme in 3D form. 1public class FlipClock : Control Attributes Property Description Default Value Remarks NumberList Number Collection DisplayTime Display Time Case1&lt;hc:FlipClock Margin="32"/&gt; When you no longer use FlipClock, remember to call the Dispose method to clean up resources. The size of FlipClock can be adjusted with the help of ViewBox.]]></content>
  </entry>
  <entry>
    <title><![CDATA[FloatingBlock]]></title>
    <url>%2Fhandycontrol%2Fextend_controls%2FfloatingBlock%2Findex.html</url>
    <content type="text"><![CDATA[Special click effects can be achieved with the help of floating blocks. 1public class FloatingBlock : Control Attributes Property Description Default Value Remarks ToX X-axis disappearing position 0 ToY Y-axis disappearing position -100 Duration Animation duration 2s HorizontalOffset Horizontal Offset 0 VerticalOffset Vertical Offset 0 ContentTemplate Floating Content Template Content Floating Content Case1234567891011121314151617&lt;StackPanel Margin="32" VerticalAlignment="Center"&gt; &lt;Button hc:IconElement.Geometry="&#123;StaticResource ThumbsUpGeometry&#125;" Width="180"&gt; &lt;hc:FloatingBlock.ContentTemplate&gt; &lt;DataTemplate&gt; &lt;Path Data="&#123;StaticResource ThumbsUpGeometry&#125;" Fill="&#123;DynamicResource DangerBrush&#125;" Width="16" Height="16"/&gt; &lt;/DataTemplate&gt; &lt;/hc:FloatingBlock.ContentTemplate&gt; &lt;/Button&gt; &lt;Button Content="Good" hc:FloatingBlock.Content="Good" Width="180" Margin="0,10,0,0"/&gt; &lt;Button hc:IconElement.Geometry="&#123;StaticResource ThumbsUpGeometry&#125;" Width="180" Margin="0,10,0,0" hc:FloatingBlock.Duration="0:0:1" hc:FloatingBlock.VerticalOffset="-20" hc:FloatingBlock.ToX="50" hc:FloatingBlock.ToY="-80"&gt; &lt;hc:FloatingBlock.ContentTemplate&gt; &lt;DataTemplate&gt; &lt;Path Data="&#123;StaticResource ThumbsUpGeometry&#125;" Fill="&#123;DynamicResource DangerBrush&#125;" Width="16" Height="16"/&gt; &lt;/DataTemplate&gt; &lt;/hc:FloatingBlock.ContentTemplate&gt; &lt;/Button&gt;&lt;/StackPanel&gt;]]></content>
  </entry>
  <entry>
    <title><![CDATA[GifImage]]></title>
    <url>%2Fhandycontrol%2Fextend_controls%2FgifImage%2Findex.html</url>
    <content type="text"><![CDATA[Wpf implementation of Gif. 1public class GifImage : Image, IDisposable Attributes Property Description Default Value Remarks Uri Picture Uri Case1&lt;hc:GifImage x:Name="GifImageMain" Stretch="None" Margin="32" Uri="/HandyControlDemo;component/Resources/Img/car_chase.gif"/&gt; or 12345&lt;hc:GifImage Width="400" Height="300"&gt; &lt;hc:GifImage.Source&gt; &lt;BitmapImage UriSource="/HandyControlDemo;component/Resources/Img/car_chase.gif"/&gt; &lt;/hc:GifImage.Source&gt; &lt;/hc:GifImage&gt; When you no longer use GifImage, remember to call the Dispose method to clean up resources.]]></content>
  </entry>
  <entry>
    <title><![CDATA[GlowWindow]]></title>
    <url>%2Fhandycontrol%2Fextend_controls%2FglowWindow%2Findex.html</url>
    <content type="text"><![CDATA[A window with a glow effect on the border, the code is extracted from Visual Studio 1public class GlowWindow : Window Attributes Property Description Default Value Remarks ActiveGlowColor Glow color when the window is activated InactiveGlowColor Glow color when the window is inactive Case12345678910111213141516171819&lt;hc:GlowWindow x:Class="HandyControlDemo.Window.GlowWindow" xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation" xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml" xmlns:d="http://schemas.microsoft.com/expression/blend/2008" xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" xmlns:hc="https://handyorg.github.io/handycontrol" xmlns:langs="clr-namespace:HandyControlDemo.Properties.Langs" xmlns:ex="clr-namespace:HandyControlDemo.Tools.Extension" mc:Ignorable="d" Style="&#123;StaticResource WindowGlow&#125;" Background="&#123;DynamicResource MainContentBackgroundBrush&#125;" WindowStartupLocation="CenterScreen" Title="&#123;ex:Lang Key=&#123;x:Static langs:LangKeys.Title&#125;&#125;" ActiveGlowColor="&#123;DynamicResource PrimaryColor&#125;" Height="450" Width="800" Icon="/HandyControlDemo;component/Resources/Img/icon.ico"&gt; &lt;Border Background="&#123;DynamicResource MainContentForegroundDrawingBrush&#125;"/&gt;&lt;/hc:GlowWindow&gt;]]></content>
  </entry>
  <entry>
    <title><![CDATA[GotoTop]]></title>
    <url>%2Fhandycontrol%2Fextend_controls%2FgotoTop%2Findex.html</url>
    <content type="text"><![CDATA[You can scroll the ScrollView or the control with ScrollView to the top position by clicking GotoTop. 1public class GotoTop : Button Attributes Property Description Default Value Remarks Target ScrollView or controls with ScrollView Animated Whether to use animation true AnimationTime Animation duration 0.2s HidingHeight When ScrollView scrolls this height, GotoTop will be hidden 0 AutoHiding Whether to automatically hide true Case12345678910111213&lt;hc:SimplePanel Width="500" Height="400"&gt; &lt;hc:ScrollViewer Name="ScrollViewerDemo" IsInertiaEnabled="True" Margin="0,10,0,0"&gt; &lt;Border Height="2000" Margin="8,0"&gt; &lt;Border.Background&gt; &lt;LinearGradientBrush EndPoint="0.5,1" StartPoint="0.5,0"&gt; &lt;GradientStop Color="White" Offset="0"/&gt; &lt;GradientStop Color="Black" Offset="1"/&gt; &lt;/LinearGradientBrush&gt; &lt;/Border.Background&gt; &lt;/Border&gt; &lt;/hc:ScrollViewer&gt; &lt;hc:GotoTop Animated="True" AutoHiding="True" AnimationTime="500" Target="&#123;Binding ElementName=ScrollViewerDemo&#125;" HorizontalAlignment="Right" VerticalAlignment="Bottom" Margin="0,0,20,20"/&gt;&lt;/hc:SimplePanel&gt;]]></content>
  </entry>
  <entry>
    <title><![CDATA[Gravatar]]></title>
    <url>%2Fhandycontrol%2Fextend_controls%2Fgravatar%2Findex.html</url>
    <content type="text"><![CDATA[A way to implement random avatars for users. 1public class Gravatar : ContentControl Attributes Property Description Default Value Remarks Generator Avatar Generator GithubGravatarGenerator Id UserId Source User Profile Style Style Description GravatarBaseStyle Default Style GravatarCircle Circle Head GravatarCircleImg Circle picture avatar Case12345678910111213141516171819&lt;StackPanel Margin="32" Orientation="Horizontal"&gt; &lt;UniformGrid Rows="3" Columns="3" Width="240" Height="240"&gt; &lt;hc:Gravatar Id="User1"/&gt; &lt;hc:Gravatar Id="User2"/&gt; &lt;hc:Gravatar Style="&#123;StaticResource GravatarCircleImg&#125;"&gt; &lt;Image Source="/HandyControlDemo;component/Resources/Img/Album/2.jpg"/&gt; &lt;/hc:Gravatar&gt; &lt;hc:Gravatar Id="User4"/&gt; &lt;hc:Gravatar Id="User5" Style="&#123;StaticResource GravatarCircle&#125;"/&gt; &lt;hc:Gravatar Id="User6"/&gt; &lt;hc:Gravatar Style="&#123;StaticResource GravatarCircle&#125;" Source="/HandyControlDemo;component/Resources/Img/Album/1.jpg"/&gt; &lt;hc:Gravatar Id="User8"/&gt; &lt;hc:Gravatar Id="User9"/&gt; &lt;/UniformGrid&gt; &lt;StackPanel Margin="16,0,0,0" Height="220" VerticalAlignment="Center"&gt; &lt;TextBox Text="User1" Name="TextBoxName" Width="180"/&gt; &lt;hc:Gravatar Height="180" Width="180" Id="&#123;Binding Text,ElementName=TextBoxName&#125;" Margin="10"/&gt; &lt;/StackPanel&gt;&lt;/StackPanel&gt;]]></content>
  </entry>
  <entry>
    <title><![CDATA[Grid]]></title>
    <url>%2Fhandycontrol%2Fextend_controls%2Fgrid%2Findex.html</url>
    <content type="text"><![CDATA[Wpf implementation of grid system, web version can refer to element/layout 1public class Row : Panel 1public class Col : ContentControl AttributesRow Property Description Default Value Remarks Gutter Grid Interval 0 Col column Property Description Default Value Remarks Layout Layout Method Offset The number of intervals on the left side of the grid 0 Span Number of columns occupied by the grid 24 IsFixed Is the column fixed false Case123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147&lt;StackPanel Margin="32"&gt; &lt;TextBlock Text="&#123;ex:Lang Key=&#123;x:Static langs:LangKeys.BasicLayout&#125;&#125;" Style="&#123;StaticResource TextBlockLargeBold&#125;" HorizontalAlignment="Left"/&gt; &lt;hc:Row Margin="0,20,0,0"&gt; &lt;hc:Col Span="24"&gt; &lt;Border Background="&#123;DynamicResource SecondaryBorderBrush&#125;" Height="36" CornerRadius="4"/&gt; &lt;/hc:Col&gt; &lt;/hc:Row&gt; &lt;hc:Row Margin="0,20,0,0"&gt; &lt;hc:Col Span="12"&gt; &lt;Border Background="&#123;DynamicResource BorderBrush&#125;" Height="36" CornerRadius="4"/&gt; &lt;/hc:Col&gt; &lt;hc:Col Span="12"&gt; &lt;Border Background="&#123;DynamicResource SecondaryBorderBrush&#125;" Height="36" CornerRadius="4"/&gt; &lt;/hc:Col&gt; &lt;/hc:Row&gt; &lt;hc:Row Margin="0,20,0,0"&gt; &lt;hc:Col Span="8"&gt; &lt;Border Background="&#123;DynamicResource BorderBrush&#125;" Height="36" CornerRadius="4"/&gt; &lt;/hc:Col&gt; &lt;hc:Col Span="8"&gt; &lt;Border Background="&#123;DynamicResource SecondaryBorderBrush&#125;" Height="36" CornerRadius="4"/&gt; &lt;/hc:Col&gt; &lt;hc:Col Span="8"&gt; &lt;Border Background="&#123;DynamicResource BorderBrush&#125;" Height="36" CornerRadius="4"/&gt; &lt;/hc:Col&gt; &lt;/hc:Row&gt; &lt;hc:Row Margin="0,20,0,0"&gt; &lt;hc:Col Span="6"&gt; &lt;Border Background="&#123;DynamicResource BorderBrush&#125;" Height="36" CornerRadius="4"/&gt; &lt;/hc:Col&gt; &lt;hc:Col Span="6"&gt; &lt;Border Background="&#123;DynamicResource SecondaryBorderBrush&#125;" Height="36" CornerRadius="4"/&gt; &lt;/hc:Col&gt; &lt;hc:Col Span="6"&gt; &lt;Border Background="&#123;DynamicResource BorderBrush&#125;" Height="36" CornerRadius="4"/&gt; &lt;/hc:Col&gt; &lt;hc:Col Span="6"&gt; &lt;Border Background="&#123;DynamicResource SecondaryBorderBrush&#125;" Height="36" CornerRadius="4"/&gt; &lt;/hc:Col&gt; &lt;/hc:Row&gt; &lt;hc:Row Margin="0,20,0,0"&gt; &lt;hc:Col Span="4"&gt; &lt;Border Background="&#123;DynamicResource BorderBrush&#125;" Height="36" CornerRadius="4"/&gt; &lt;/hc:Col&gt; &lt;hc:Col Span="4"&gt; &lt;Border Background="&#123;DynamicResource SecondaryBorderBrush&#125;" Height="36" CornerRadius="4"/&gt; &lt;/hc:Col&gt; &lt;hc:Col Span="4"&gt; &lt;Border Background="&#123;DynamicResource BorderBrush&#125;" Height="36" CornerRadius="4"/&gt; &lt;/hc:Col&gt; &lt;hc:Col Span="4"&gt; &lt;Border Background="&#123;DynamicResource SecondaryBorderBrush&#125;" Height="36" CornerRadius="4"/&gt; &lt;/hc:Col&gt; &lt;hc:Col Span="4"&gt; &lt;Border Background="&#123;DynamicResource BorderBrush&#125;" Height="36" CornerRadius="4"/&gt; &lt;/hc:Col&gt; &lt;hc:Col Span="4"&gt; &lt;Border Background="&#123;DynamicResource SecondaryBorderBrush&#125;" Height="36" CornerRadius="4"/&gt; &lt;/hc:Col&gt; &lt;/hc:Row&gt; &lt;TextBlock Text="&#123;ex:Lang Key=&#123;x:Static langs:LangKeys.ColumnSpacing&#125;&#125;" Margin="0,32,0,0" Style="&#123;StaticResource TextBlockLargeBold&#125;" HorizontalAlignment="Left"/&gt; &lt;hc:Row Margin="0,20,0,0" Gutter="20"&gt; &lt;hc:Col Span="6"&gt; &lt;Border Background="&#123;DynamicResource BorderBrush&#125;" Height="36" CornerRadius="4"/&gt; &lt;/hc:Col&gt; &lt;hc:Col Span="6"&gt; &lt;Border Background="&#123;DynamicResource BorderBrush&#125;" Height="36" CornerRadius="4"/&gt; &lt;/hc:Col&gt; &lt;hc:Col Span="6"&gt; &lt;Border Background="&#123;DynamicResource BorderBrush&#125;" Height="36" CornerRadius="4"/&gt; &lt;/hc:Col&gt; &lt;hc:Col Span="6"&gt; &lt;Border Background="&#123;DynamicResource BorderBrush&#125;" Height="36" CornerRadius="4"/&gt; &lt;/hc:Col&gt; &lt;/hc:Row&gt; &lt;TextBlock Text="&#123;ex:Lang Key=&#123;x:Static langs:LangKeys.HybridLayout&#125;&#125;" Margin="0,32,0,0" Style="&#123;StaticResource TextBlockLargeBold&#125;" HorizontalAlignment="Left"/&gt; &lt;hc:Row Margin="0,20,0,0" Gutter="20"&gt; &lt;hc:Col Span="16"&gt; &lt;Border Background="&#123;DynamicResource BorderBrush&#125;" Height="36" CornerRadius="4"/&gt; &lt;/hc:Col&gt; &lt;hc:Col Span="8"&gt; &lt;Border Background="&#123;DynamicResource BorderBrush&#125;" Height="36" CornerRadius="4"/&gt; &lt;/hc:Col&gt; &lt;/hc:Row&gt; &lt;hc:Row Margin="0,20,0,0" Gutter="20"&gt; &lt;hc:Col Span="8"&gt; &lt;Border Background="&#123;DynamicResource BorderBrush&#125;" Height="36" CornerRadius="4"/&gt; &lt;/hc:Col&gt; &lt;hc:Col Span="8"&gt; &lt;Border Background="&#123;DynamicResource BorderBrush&#125;" Height="36" CornerRadius="4"/&gt; &lt;/hc:Col&gt; &lt;hc:Col Span="4"&gt; &lt;Border Background="&#123;DynamicResource BorderBrush&#125;" Height="36" CornerRadius="4"/&gt; &lt;/hc:Col&gt; &lt;hc:Col Span="4"&gt; &lt;Border Background="&#123;DynamicResource BorderBrush&#125;" Height="36" CornerRadius="4"/&gt; &lt;/hc:Col&gt; &lt;/hc:Row&gt; &lt;hc:Row Margin="0,20,0,0" Gutter="20"&gt; &lt;hc:Col Span="4"&gt; &lt;Border Background="&#123;DynamicResource BorderBrush&#125;" Height="36" CornerRadius="4"/&gt; &lt;/hc:Col&gt; &lt;hc:Col Span="16"&gt; &lt;Border Background="&#123;DynamicResource BorderBrush&#125;" Height="36" CornerRadius="4"/&gt; &lt;/hc:Col&gt; &lt;hc:Col Span="4"&gt; &lt;Border Background="&#123;DynamicResource BorderBrush&#125;" Height="36" CornerRadius="4"/&gt; &lt;/hc:Col&gt; &lt;/hc:Row&gt; &lt;TextBlock Text="&#123;ex:Lang Key=&#123;x:Static langs:LangKeys.ColumnOffset&#125;&#125;" Margin="0,32,0,0" Style="&#123;StaticResource TextBlockLargeBold&#125;" HorizontalAlignment="Left"/&gt; &lt;hc:Row Margin="0,20,0,0" Gutter="20"&gt; &lt;hc:Col Span="6"&gt; &lt;Border Background="&#123;DynamicResource BorderBrush&#125;" Height="36" CornerRadius="4"/&gt; &lt;/hc:Col&gt; &lt;hc:Col Span="6" Offset="6"&gt; &lt;Border Background="&#123;DynamicResource BorderBrush&#125;" Height="36" CornerRadius="4"/&gt; &lt;/hc:Col&gt; &lt;/hc:Row&gt; &lt;hc:Row Margin="0,20,0,0" Gutter="20"&gt; &lt;hc:Col Span="6" Offset="6"&gt; &lt;Border Background="&#123;DynamicResource BorderBrush&#125;" Height="36" CornerRadius="4"/&gt; &lt;/hc:Col&gt; &lt;hc:Col Span="6" Offset="6"&gt; &lt;Border Background="&#123;DynamicResource BorderBrush&#125;" Height="36" CornerRadius="4"/&gt; &lt;/hc:Col&gt; &lt;/hc:Row&gt; &lt;hc:Row Margin="0,20,0,0" Gutter="20"&gt; &lt;hc:Col Span="12" Offset="6"&gt; &lt;Border Background="&#123;DynamicResource BorderBrush&#125;" Height="36" CornerRadius="4"/&gt; &lt;/hc:Col&gt; &lt;/hc:Row&gt; &lt;TextBlock Text="&#123;ex:Lang Key=&#123;x:Static langs:LangKeys.ResponsiveLayout&#125;&#125;" Margin="0,32,0,0" Style="&#123;StaticResource TextBlockLargeBold&#125;" HorizontalAlignment="Left"/&gt; &lt;hc:Row Margin="0,20,0,0" Gutter="10"&gt; &lt;hc:Col Layout="8,6,4,3,1"&gt; &lt;Border Background="&#123;DynamicResource BorderBrush&#125;" Height="36" CornerRadius="4"/&gt; &lt;/hc:Col&gt; &lt;hc:Col Layout="4 6 8 9 11"&gt; &lt;Border Background="&#123;DynamicResource SecondaryBorderBrush&#125;" Height="36" CornerRadius="4"/&gt; &lt;/hc:Col&gt; &lt;hc:Col Layout="&#123;extension:ColLayout Xs=4, Sm=6, Md=8, Lg=9, Xl=11&#125;"&gt; &lt;Border Background="&#123;DynamicResource BorderBrush&#125;" Height="36" CornerRadius="4"/&gt; &lt;/hc:Col&gt; &lt;hc:Col Layout="&#123;extension:ColLayout Xs=8, Sm=6, Md=4, Lg=3, Xl=1&#125;"&gt; &lt;Border Background="&#123;DynamicResource SecondaryBorderBrush&#125;" Height="36" CornerRadius="4"/&gt; &lt;/hc:Col&gt; &lt;/hc:Row&gt;&lt;/StackPanel&gt; 3 ways to write Layout in xaml:Layout=”{extension:ColLayout Xs=4, Sm=6, Md=8, Lg=9, Xl=11}”Layout=”4,6,8,9,11”Layout=”4 6 8 9 11”]]></content>
  </entry>
  <entry>
    <title><![CDATA[Growl Information notification]]></title>
    <url>%2Fhandycontrol%2Fextend_controls%2Fgrowl%2Findex.html</url>
    <content type="text"><![CDATA[This control can be used when you want to arrange notification information from top to bottom in the right area of the window. Control effect Ready to workAdd a StackPanel container to the right side of the specified window123&lt;ScrollViewer VerticalScrollBarVisibility="Hidden" HorizontalAlignment="Right"&gt; &lt;StackPanel VerticalAlignment="Top" Margin="0,10,10,10"/&gt;&lt;/ScrollViewer&gt; In order to facilitate scrolling, a ScrollViewer is usually wrapped in the outer layer. At the same time, for the sake of beauty, we set VerticalScrollBarVisibility=&quot;Hidden&quot; of ScrollViewer. It is best to add a suitable Margin to StackPanel, which is also for aesthetics. Basic usageStep 1: Set StackPanel to the container of Growl 123&lt;ScrollViewer VerticalScrollBarVisibility="Hidden" HorizontalAlignment="Right"&gt; &lt;StackPanel controls:Growl.GrowlParent="True" VerticalAlignment="Top" Margin="0,10,10,10"/&gt;&lt;/ScrollViewer&gt; Note the code controls:Growl.GrowlParent=&quot;True&quot;。 Step 2: Call the relevant interface of Growl to display the specified message. Use case: Growl.Success(&quot;File saved successfully!&quot;); Display information notification only in the active windowRewrite OnActivated and OnDeactivated methods for windows that need to display information notifications, call Growl.SetGrowlParent(GrowlPanel, true); in OnActivated, call Growl.SetGrowlParent(GrowlPanel, false) inOnDeactivated` Where GrowlPanel is the information notification container, the type recommendation is StackPanel Need to explain here, a window corresponds to a StackPanel container, Growl internally maintains a variable to store this container, each time the notification is triggered, the instance of Growl will be inserted into the container, that is, each call Growl.SetGrowlParent(GrowlPanel, true);, GrowlPanel will become the internal variable. In this case, you don’t need to set controls:Growl.GrowlParent=&quot;True&quot; in xaml. Display information notifications in any StackPanel containerStep 1: Give the message to the StackPanel container: SuccessMsg123&lt;ScrollViewer VerticalScrollBarVisibility="Hidden" HorizontalAlignment="Right"&gt; &lt;StackPanel controls:Growl.Token="SuccessMsg" VerticalAlignment="Top" Margin="0,10,10,10"/&gt;&lt;/ScrollViewer&gt; Note the codecontrols:Growl.Token=&quot;SuccessMsg&quot;。 Step 2: Use the message tag: SuccessMsg and call the relevant interface of Growl to display the specified message. Example：Growl.Success(&quot;File saved successfully!&quot;, &quot;SuccessMsg&quot;); Now the “File saved successfully!” message will only be sent to the StackPanel container with the “SuccessMsg” message tag. Global Usageyou can use growl in desktop Not just the app itselfIn this case you don’t need anything just use Growl.XXXGlobal to display the message 123456789101112131415161718192021222324252627282930Growl.InfoGlobal("GrowlInfo");//ORGrowl.SuccessGlobal("GrowlSuccess");// ORGrowl.WarningGlobal(new GrowlInfo &#123; Message = "GrowlWarning", CancelStr = "Ignore", ActionBeforeClose = isConfirmed =&gt; &#123; Growl.InfoGlobal(isConfirmed.ToString()); return true; &#125; &#125;);// ORGrowl.ErrorGlobal("GrowlError");// ORGrowl.AskGlobal("GrowlAsk", isConfirmed =&gt; &#123; Growl.InfoGlobal(isConfirmed.ToString()); return true; &#125;);// ORGrowl.FatalGlobal(new GrowlInfo &#123; Message = "GrowlFatal", ShowDateTime = false &#125;);// And for Clearing growlsGrowl.ClearGlobal(); Attributes Property Description GrowlPanel Currently used message container Additional attribute Name Description Token Used to set message tags GrowlParent for setting up message containers Method Name Description Success(string) Show a success notification Success(string, string) Display a success notification with the specified message tag Success(GrowlInfo) Use a full message initialization model to display a success notification SuccessGlobal(string) Display a global success notification SuccessGlobal(GrowlInfo) Display a Global Success notification with the full message initialization model Info(string) Show a message notification Info(string, string) Display a message notification with the specified message tag Info(GrowlInfo) Display a message notification with the full message initialization model InfoGlobal(string) Display a global Info notification InfoGlobal(GrowlInfo) Display a Global Info notification with the full message initialization model Warning(string) Show a warning notification Warning(string, string) Display a warning notification with the specified message tag Warning(GrowlInfo) Display a warning notification with the full message initialization model WarningGlobal(string) Display a global warning notification WarningGlobal(GrowlInfo) Display a Global Warning notification with the full message initialization model Error(string) Show an error notification Error(string, string) Display an error notification with the specified message tag Error(GrowlInfo) Displaying an error notification with a full message initialization model ErrorGlobal(string) Display a global Error notification ErrorGlobal(GrowlInfo) Display a Error Fatal notification with the full message initialization model Fatal(string) Show a critical notification Fatal(string, string) Display a serious notification with the specified message tag Fatal(GrowlInfo) Display a serious notification with the full message initialization model FatalGlobal(string) Display a global Fatal notification FatalGlobal(GrowlInfo) Display a Global Fatal notification with the full message initialization model Ask(string, Func&lt;bool, bool&gt;) Show a notification Ask(string, Func&lt;bool, bool&gt;, string) Display a notification with the specified message tag Ask(GrowlInfo) Use a full message initialization model to display a notification AskGlobal(string, Func&lt;bool, bool&gt;) Show a global notification AskGlobal(GrowlInfo) Display a Global Ask notification with the full message initialization model Register(string, Panel) Register message tags for the specified container Unregister(string, Panel) Unregister the message tag for the specified container Unregister(Panel) Unregister if the container is registered with a message tag Unregister(string) Unregister if the message is marked with a corresponding container Clear( ) Clear messages in the currently used message container Clear(string) Clear the message in the message container with the specified message tag Clear(Panel) Empty messages in the specified container ClearGlobal( ) Empty messages in the global container NoteError and Fatal modes are not turned off automatically. FAQ Ask is special, what? The main focus of the Ask method is the second parameter, its type is Func&lt;bool, bool&gt;, let’s look at the sample code:12345Growl.Ask(Properties.Langs.Lang.GrowlAsk, isConfirmed =&gt;&#123; Growl.Info(isConfirmed.ToString()); return true;&#125;); By using the Ask method, the “confirm” and “cancel” buttons are displayed by default. When you click “confirm”, the value of isConfirmed in the above code is true, and clicking “cancel” is false&quot;, which can be based onisConfirmed The value of takes the corresponding action. Finally, if you returntrue, the Growl notification will be closed, and iffalse` is returned, it will not be closed.]]></content>
  </entry>
  <entry>
    <title><![CDATA[HoneycombPanel]]></title>
    <url>%2Fhandycontrol%2Fextend_controls%2FhoneycombPanel%2Findex.html</url>
    <content type="text"><![CDATA[A container that allows child elements to present a honeycomb layout. 1public class HoneycombPanel : Panel Honeycomb layoutOther elements will start from the first element and wrap around: 12345678 ● ● (7) (8) ● ● ● (6) (1) (9) ● ● ● ...(5) (0) (2) ● ● ... (4) (3) Case123456789101112&lt;ListBox Background="Transparent" BorderThickness="0" Style="&#123;StaticResource ListBoxCustom&#125;" ItemsSource="&#123;Binding DataList&#125;"&gt; &lt;ListBox.ItemsPanel&gt; &lt;ItemsPanelTemplate&gt; &lt;hc:HoneycombPanel hc:PanelElement.FluidMoveBehavior="&#123;StaticResource BehaviorXY200&#125;"/&gt; &lt;/ItemsPanelTemplate&gt; &lt;/ListBox.ItemsPanel&gt; &lt;ListBox.ItemTemplate&gt; &lt;DataTemplate&gt; &lt;hc:Gravatar Style="&#123;StaticResource GravatarCircle&#125;" Margin="10" Source="&#123;Binding Content&#125;"/&gt; &lt;/DataTemplate&gt; &lt;/ListBox.ItemTemplate&gt;&lt;/ListBox&gt;]]></content>
  </entry>
  <entry>
    <title><![CDATA[ImageBlock]]></title>
    <url>%2Fhandycontrol%2Fextend_controls%2FimageBlock%2Findex.html</url>
    <content type="text"><![CDATA[The picture block can be used to divide a large picture into small pictures with the same width and height, and play them in order to form an effect similar to gif pictures. 1public class ImageBlock : FrameworkElement Attributes Property Description Default Value Remarks StartColumn Play start column 0 StartRow Play start row 0 EndColumn Play end column 0 EndRow Play end row 0 IsPlaying Is it playing false Columns The number of columns that need to be divided 1 Rows The number of rows to be divided 1 Interval Play interval of small pictures 1s Source Large image resources Case123456789101112&lt;UniformGrid Rows="3" Columns="4" Margin="32"&gt; &lt;hc:ImageBlock Source="/HandyControlDemo;component/Resources/Img/Dance.png" Interval="0:0:0.125" Columns="8" Rows="10" StartColumn="0" StartRow="0" EndColumn="7" EndRow="0" Width="110" Height="128" IsPlaying="True"/&gt; &lt;hc:ImageBlock Source="/HandyControlDemo;component/Resources/Img/Dance.png" Interval="0:0:0.125" Columns="8" Rows="10" StartColumn="0" StartRow="1" EndColumn="7" EndRow="1" Width="110" Height="128" IsPlaying="True"/&gt; &lt;hc:ImageBlock Source="/HandyControlDemo;component/Resources/Img/Dance.png" Interval="0:0:0.125" Columns="8" Rows="10" StartColumn="0" StartRow="2" EndColumn="7" EndRow="2" Width="110" Height="128" IsPlaying="&#123;Binding IsMouseOver,RelativeSource=&#123;RelativeSource Self&#125;&#125;"/&gt; &lt;hc:ImageBlock Source="/HandyControlDemo;component/Resources/Img/Dance.png" Interval="0:0:0.125" Columns="8" Rows="10" StartColumn="0" StartRow="3" EndColumn="7" EndRow="3" Width="110" Height="128" IsPlaying="&#123;Binding IsMouseOver,RelativeSource=&#123;RelativeSource Self&#125;&#125;"/&gt; &lt;hc:ImageBlock Source="/HandyControlDemo;component/Resources/Img/Dance.png" Interval="0:0:0.1" Columns="8" Rows="10" StartColumn="0" StartRow="4" EndColumn="7" EndRow="4" Width="110" Height="128" IsPlaying="True"/&gt; &lt;hc:ImageBlock Source="/HandyControlDemo;component/Resources/Img/Dance.png" Interval="0:0:0.125" Columns="8" Rows="10" StartColumn="0" StartRow="5" EndColumn="7" EndRow="5" Width="110" Height="128" IsPlaying="True"/&gt; &lt;hc:ImageBlock Source="/HandyControlDemo;component/Resources/Img/Dance.png" Interval="0:0:0.125" Columns="8" Rows="10" StartColumn="0" StartRow="6" EndColumn="7" EndRow="6" Width="110" Height="128" IsPlaying="&#123;Binding IsMouseOver,RelativeSource=&#123;RelativeSource Self&#125;&#125;"/&gt; &lt;hc:ImageBlock Source="/HandyControlDemo;component/Resources/Img/Dance.png" Interval="0:0:0.1" Columns="8" Rows="10" StartColumn="0" StartRow="7" EndColumn="7" EndRow="7" Width="110" Height="128" IsPlaying="True"/&gt; &lt;hc:ImageBlock Source="/HandyControlDemo;component/Resources/Img/Dance.png" Interval="0:0:0.125" Columns="8" Rows="10" StartColumn="0" StartRow="8" EndColumn="7" EndRow="8" Width="110" Height="128" IsPlaying="&#123;Binding IsMouseOver,RelativeSource=&#123;RelativeSource Self&#125;&#125;"/&gt; &lt;hc:ImageBlock Source="/HandyControlDemo;component/Resources/Img/Dance.png" Interval="0:0:0.125" Columns="8" Rows="10" StartColumn="0" StartRow="9" EndColumn="7" EndRow="9" Width="110" Height="128" IsPlaying="&#123;Binding IsMouseOver,RelativeSource=&#123;RelativeSource Self&#125;&#125;"/&gt;&lt;/UniformGrid&gt; Remember to call the Dispose method to clean up resources when you no longer use ImageBlock.]]></content>
  </entry>
  <entry>
    <title><![CDATA[ImageBrowser]]></title>
    <url>%2Fhandycontrol%2Fextend_controls%2FimageBrowser%2Findex.html</url>
    <content type="text"><![CDATA[You can easily browse a single picture with the help of ImageBrowser. 1public class ImageBrowser : Window CaseAfter the constructor passes in the picture address, you can start to browse the picture: 1new ImageBrowser(new Uri("pack://application:,,,/Resources/Img/1.jpg")).Show() FeaturesThe screenshot of the function panel is as follows: The functions from left to right are: Save to local, Open the picture with the system default program, Zoom out the picture, Enlarge the picture, Original size, Turn left picture, Turn right picture .]]></content>
  </entry>
  <entry>
    <title><![CDATA[ImageSelector]]></title>
    <url>%2Fhandycontrol%2Fextend_controls%2FimageSelector%2Findex.html</url>
    <content type="text"><![CDATA[12345678&lt;UniformGrid Columns="3" Margin="16"&gt; &lt;hc:ImageSelector Width="100" Height="100" Margin="16"/&gt; &lt;hc:ImageSelector Width="100" Height="100" Margin="16" hc:BorderElement.CornerRadius="50"/&gt; &lt;hc:ImageSelector Width="100" Height="100" Margin="16" hc:BorderElement.CornerRadius="50" StrokeDashArray="10,5"/&gt; &lt;hc:ImageSelector Width="100" Height="100" Margin="16" hc:BorderElement.CornerRadius="50" BorderBrush="&#123;DynamicResource SuccessBrush&#125;"/&gt; &lt;hc:ImageSelector Width="100" Height="100" Margin="16" hc:BorderElement.CornerRadius="50" StrokeDashArray="10,5,10" BorderBrush="&#123;DynamicResource DangerBrush&#125;"/&gt; &lt;hc:ImageSelector Width="100" Height="100" Margin="16" hc:BorderElement.CornerRadius="10" StrokeThickness="2" BorderThickness="2" BorderBrush="&#123;DynamicResource PrimaryBrush&#125;"/&gt;&lt;/UniformGrid&gt; Attributes Property Uri IsPreviewEnabled Stretch PreviewBrush StrokeThickness StrokeDashArray DefaultExt Filter HasValue]]></content>
  </entry>
  <entry>
    <title><![CDATA[Loading]]></title>
    <url>%2Fhandycontrol%2Fextend_controls%2Floading%2Findex.html</url>
    <content type="text"><![CDATA[Display dynamic effects during time-consuming operation. Currently, it contains circular and linear loading bars. Related blog post: [“WPF control library-imitating the progress bar of Windows 10”] (https://www.cnblogs.com/nabian/p/9288576.html) 1public abstract class LoadingBase : ContentControl 1public class LoadingLine : LoadingBase 1public class LoadingCircle : LoadingBase LoadingBase attribute Property Description Default Value Remarks IsRunning Is it currently loading true DotCount Number of Dots 5 DotInterval Dot Interval 10 DotBorderBrush Dot border color DotBorderThickness Dot border thickness 0 DotDiameter Dot radius 6 DotSpeed The time taken for one cycle 4s DotDelayTime Animation delay of each point 80ms LoadingCircle property Property Description Default Value Remarks DotOffSet Dot Offset 20 NeedHidden Does the dot need to be hidden in the middle of the movement true Styles Style for LoadingLine Style for LoadingCircle LoadingLineLarge LoadingCircleLarge LoadingLineLargeLight LoadingCircleLargeLight LoadingLineLight LoadingCircleLight Case12345678910&lt;StackPanel Width="600" Margin="32" VerticalAlignment="Center"&gt; &lt;hc:LoadingLine/&gt; &lt;hc:LoadingLine Margin="0,30" Foreground="BlueViolet" Style="&#123;StaticResource LoadingLineLarge&#125;"/&gt; &lt;StackPanel Orientation="Horizontal" HorizontalAlignment="Center"&gt; &lt;hc:LoadingCircle/&gt; &lt;Border VerticalAlignment="Center" Margin="32,0,0,0" Background="&#123;DynamicResource PrimaryBrush&#125;" CornerRadius="10"&gt; &lt;hc:LoadingCircle Style="&#123;StaticResource LoadingCircleLight&#125;" Margin="10"/&gt; &lt;/Border&gt; &lt;/StackPanel&gt;&lt;/StackPanel&gt;]]></content>
  </entry>
  <entry>
    <title><![CDATA[ImageViewer]]></title>
    <url>%2Fhandycontrol%2Fextend_controls%2FimageViewer%2Findex.html</url>
    <content type="text"><![CDATA[ImageViewer is the core component of ImageBrowser, it can be used as an independent control without pop-up windows. 123456[TemplatePart(Name = ElementPanelMain, Type = typeof(Panel))][TemplatePart(Name = ElementCanvasSmallImg, Type = typeof(Canvas))][TemplatePart(Name = ElementBorderMove, Type = typeof(Border))][TemplatePart(Name = ElementBorderBottom, Type = typeof(Border))][TemplatePart(Name = ElementImageMain, Type = typeof(Image))]public class ImageViewer : Control Attributes Property Description Default Value Remarks ShowImgMap Whether to display the small map false ImageSource Image Resources IsFullScreen Is it in full screen display false Case1&lt;hc:ImageViewer Background="&#123;DynamicResource SecondaryRegionBrush&#125;" Width="600" Height="330" ImageSource="/HandyControlDemo;component/Resources/Img/1.jpg"/&gt;]]></content>
  </entry>
  <entry>
    <title><![CDATA[Magnifier]]></title>
    <url>%2Fhandycontrol%2Fextend_controls%2Fmagnifier%2Findex.html</url>
    <content type="text"><![CDATA[With the help of Magnifier, any control can be partially magnified. 12[TemplatePart(Name = ElementVisualBrush, Type = typeof(VisualBrush))]public class Magnifier : AdornerElement Attributes Property Description Default Value Remarks HorizontalOffset Horizontal offset relative to the mouse 0 VerticalOffset Vertical offset relative to the mouse 0 Scale Scale factor 5.0 Case1&lt;Image Margin="16" hc:Magnifier.Instance="&#123;x:Static hc:Magnifier.Default&#125;" Source="/HandyControlDemo;component/Resources/Img/b1.jpg" Stretch="None"/&gt; 12345&lt;Image Margin="16" Source="/HandyControlDemo;component/Resources/Img/b1.jpg" Stretch="None"&gt; &lt;hc:Magnifier.Instance&gt; &lt;hc:Magnifier Scale="6" HorizontalOffset="-16" VerticalOffset="-16"/&gt; &lt;/hc:Magnifier.Instance&gt;&lt;/Image&gt;]]></content>
  </entry>
  <entry>
    <title><![CDATA[MessageBox]]></title>
    <url>%2Fhandycontrol%2Fextend_controls%2FmessageBox%2Findex.html</url>
    <content type="text"><![CDATA[HC has rewritten a set of message dialogs, the usage is the same as the original one. 1public sealed class MessageBox : Window Attributes Property Description Default Value Remarks Message Message Content Image Message Type Diagram ImageBrush Message type diagram color ShowImage Whether to display the message type schematic diagram false Method Name Description Success(string, string) Show a success message Info(string, string) Display a notification message Warning(string, string) Display a warning message Error(string, string) Display an error message Fatal(string, string) Display a serious message Ask(string, string) Display an inquiry message Show(MessageBoxInfo) Show a custom message Show(string, string, MessageBoxButton, MessageBoxImage, MessageBoxResult) Show a message Show(Window, string, string, MessageBoxButton, MessageBoxImage, MessageBoxResult) Show a message Case1MessageBox.Show(Properties.Langs.Lang.GrowlAsk, Properties.Langs.Lang.Title, MessageBoxButton.YesNo, MessageBoxImage.Question); Override stylesyou can override styles like this:first in your app.xaml add this:12345678&lt;Style x:Key="MessageBoxCustom" TargetType="hc:MessageBox" BasedOn="&#123;StaticResource &#123;x:Type hc:MessageBox&#125;&#125;"&gt; &lt;Setter Property="NonClientAreaBackground" Value="#262e2f"/&gt; &lt;Setter Property="OtherButtonHoverBackground" Value="#888580"/&gt; &lt;Setter Property="OtherButtonForeground" Value="White"/&gt; &lt;Setter Property="OtherButtonHoverForeground" Value="White"/&gt; &lt;Setter Property="NonClientAreaForeground" Value="White"/&gt; &lt;Setter Property="CloseButtonForeground" Value="White"/&gt;&lt;/Style&gt; now you must set this style in your messagebox:123456789MessageBox.Show(new MessageBoxInfo &#123; Message = "Ask", Caption = "Title", Button = MessageBoxButton.YesNo, IconBrushKey = ResourceToken.AccentBrush, IconKey = ResourceToken.AskGeometry, StyleKey = "MessageBoxCustom" &#125;); Customize Button TextOnly Available in Custom Version123456MessageBox.Show(new MessageBoxInfo &#123; Message = "Ask", Caption = "Title", ConfirmContent = "Ok" &#125;);]]></content>
  </entry>
  <entry>
    <title><![CDATA[Notification]]></title>
    <url>%2Fhandycontrol%2Fextend_controls%2Fnotification%2Findex.html</url>
    <content type="text"><![CDATA[Used to display a rich content message on the desktop. 1public sealed class Notification : System.Windows.Window Method Name Description Show(object, ShowAnimation, bool) Show desktop notifications (message content, animation effect type, whether to keep it open) Case123456789101112131415&lt;Border x:Class="HandyControlDemo.UserControl.AppNotification" xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation" xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml" xmlns:hc="https://handyorg.github.io/handycontrol" Background="White" BorderThickness="1" BorderBrush="&#123;DynamicResource BorderBrush&#125;" Width="320" Height="518"&gt; &lt;hc:SimplePanel&gt; &lt;Path Margin="0,36,0,0" VerticalAlignment="Top" Width="70" Height="70" Data="&#123;StaticResource LogoGeometry&#125;" Fill="#f06632"/&gt; &lt;TextBlock Text="HandyControl" FontSize="30" Foreground="&#123;StaticResource PrimaryBrush&#125;" HorizontalAlignment="Center" Margin="0,122,0,0" VerticalAlignment="Top"/&gt; &lt;Button Command="hc:ControlCommands.CloseWindow" CommandParameter="&#123;Binding RelativeSource=&#123;RelativeSource Self&#125;&#125;" Content="Close" HorizontalAlignment="Stretch" VerticalAlignment="Bottom" Margin="10,0,10,10"/&gt; &lt;/hc:SimplePanel&gt;&lt;/Border&gt; 12345678910namespace HandyControlDemo.UserControl&#123; public partial class AppNotification &#123; public AppNotification() &#123; InitializeComponent(); &#125; &#125;&#125; 1Notification.Show(new AppNotification(), ShowAnimation.Fade, true)]]></content>
  </entry>
  <entry>
    <title><![CDATA[NotifyIcon]]></title>
    <url>%2Fhandycontrol%2Fextend_controls%2FnotifyIcon%2Findex.html</url>
    <content type="text"><![CDATA[The wpf implementation of the system tray icon. 1public class NotifyIcon : FrameworkElement, IDisposable Attributes Property Description Default Value Remarks Token Used to set the message mark Used to display the bubble prompt on the specified tray icon Text Mouse prompt text Icon Icon ContextContent Right click to pop up content BlinkInterval Blink Interval 500ms IsBlink Is it blinking false Method Name Description Init() Initialization Register(string, NotifyIcon) Register a message mark for the specified tray icon Unregister(string, NotifyIcon) Unregister the message mark for the specified tray icon Unregister(NotifyIcon) If the tray icon is registered with a message mark, cancel the registration Unregister(string) Unregister if the message is marked with a corresponding tray icon ShowBalloonTip(string, string, NotifyIconInfoType, string) Show bubble tip ShowBalloonTip(string, string, NotifyIconInfoType) Show bubble tip CloseContextControl() Close the context control Events Name Description Click Triggered when clicked MouseDoubleClick Triggered on double click Case1&lt;hc:NotifyIcon Text="HandyControl" IsBlink="true" Visibility="Visible" Icon="/HandyControlDemo;component/Resources/Img/icon-white.ico"/&gt; or 12345678&lt;hc:NotifyIcon Text="HandyControl"&gt; &lt;hc:NotifyIcon.ContextMenu&gt; &lt;ContextMenu&gt; &lt;MenuItem Command="hc:ControlCommands.PushMainWindow2Top" Header="Open"/&gt; &lt;MenuItem Command="hc:ControlCommands.ShutdownApp" Header="Exit"/&gt; &lt;/ContextMenu&gt; &lt;/hc:NotifyIcon.ContextMenu&gt; &lt;/hc:NotifyIcon&gt; or 12345678910111213&lt;hc:NotifyIcon Text="HandyControl" Icon="/HandyControlDemo;component/Resources/Img/icon-white.ico"&gt; &lt;hc:NotifyIcon.ContextContent&gt; &lt;Border&gt; &lt;StackPanel VerticalAlignment="Center" Margin="16"&gt; &lt;Path Width="100" Height="100" Fill="#f06632" Data="&#123;StaticResource LogoGeometry&#125;"/&gt; &lt;StackPanel Margin="0,16,0,0" HorizontalAlignment="Center" Orientation="Horizontal"&gt; &lt;Button Click="ButtonPush_OnClick" Command="hc:ControlCommands.PushMainWindow2Top" MinWidth="100" Content="OpenPanel"/&gt; &lt;Button Command="hc:ControlCommands.ShutdownApp" Margin="16,0,0,0" MinWidth="100" Style="&#123;StaticResource ButtonPrimary&#125;" Content="Exit"/&gt; &lt;/StackPanel&gt; &lt;/StackPanel&gt; &lt;/Border&gt; &lt;/hc:NotifyIcon.ContextContent&gt; &lt;/hc:NotifyIcon&gt; you can use hc:ControlCommands for exit app or open it. or you can use event instead of it.1private void ButtonPush_OnClick(object sender, RoutedEventArgs e) =&gt; NotifyIconContextContent.CloseContextControl(); BallonTip1NotifyIcon.ShowBalloonTip(&quot;HandyControl&quot;, &quot;Hello&quot;, NotifyIconInfoType.None, ContextMenuIsShow ? MessageToken.NotifyIconDemo : MessageToken.NotifyIconContextDemo);]]></content>
  </entry>
  <entry>
    <title><![CDATA[OutlineText]]></title>
    <url>%2Fhandycontrol%2Fextend_controls%2FoutlineText%2Findex.html</url>
    <content type="text"><![CDATA[With OutlineText control, you can create styled text. example:1&lt;hc:OutlineText Text="Content"/&gt; To use brushes, you should set Stroke and Fill Attributes Property Description Fill The color that fills in the text Stroke The color that fills the border of the text StrokeThickness Thickness for text border Text Text StrokePosition Include Center, Outside, Inside]]></content>
  </entry>
  <entry>
    <title><![CDATA[NumericUpDown]]></title>
    <url>%2Fhandycontrol%2Fextend_controls%2FnumericUpDown%2Findex.html</url>
    <content type="text"><![CDATA[The NumericUpDown control looks like a pair of arrow buttons and a TextBox that the user can click to adjust the value. The control displays and sets a value. The user can change the Value by clicking the up and down arrows, or by typing a number in the TextBox section of the control. 12[TemplatePart(Name = ElementTextBox, Type = typeof(DatePickerTextBox))]public class DatePicker : System.Windows.Controls.DatePicker, IDataInput Create NumericUpDown and set Value1&lt;hc:NumericUpDown Value="100"/&gt; 12var numericUpDown = new NumericUpDown();numericUpDown.Value = 100; The generated NumericUpDown is shown below: Setting DecimalPlacesIf you need to change the number of decimal places displayed by Value, you can change DecimalPlaces. DecimalPlaces is a int? Type, it does not limit the number of decimal places displayed when it is null, otherwise the displayed number of decimal places is the value of DecimalPlaces. 1&lt;hc:NumericUpDown DecimalPlaces="2" Value="100.12345"/&gt; 12numericUpDown.Value = 10.12345;numericUpDown.DecimalPlaces = 2; Setting IncrementYou can set the Increment to increase or decrease the number when you click the button. 1&lt;hc:NumericUpDown Value="100" Increment="10"/&gt; 1numericUpDown.Increment = 10; Set upper and lower limitsYou can set the upper and lower limits of the Value by setting the Maximum and Minimum. 1&lt;hc:NumericUpDown Maximum="500" Minimum="10"/&gt; 12numericUpDown.Minimum = 10;numericUpDown.Maximum = 1000; Set title and placeholder textYou can add Headers and Placeholders to NumericUpDown to indicate to users what they do. To use these two additional attributes, you need to apply the NumericUpDownPlus style first. 123&lt;hc:NumericUpDown hc:InfoElement.Placeholder="&#123;x:Static langs:Lang.PlsEnterContent&#125;" hc:InfoElement.Title="&#123;x:Static langs:Lang.TitleDemoStr1&#125;" Style="&#123;StaticResource NumericUpDownExtend&#125;" /&gt; Attributes Property Description Value Get or set the current value Maximum Get or Set the Maximum Allowed Value Minimum Get or set the minimum allowable value Increment Gets or sets the value that the digital display box (also known as an up-down control) increments or decrements when the up or down button is clicked. DecimalPlaces Gets or sets the decimal digits to be displayed in NumericUpDown. This property does not affect the Value property. VerifyFunc Get or Set Data Validation Delegation IsError Get or set whether the data is wrong ErrorStr Get or Set Error Alert TextType Get or Set Text Type ShowClearButton Gets or sets whether to show the clear button Method Method Description VerifyData () Verify Data Event Event Description ValueChanged Occurs after the Value property has been changed in some way.]]></content>
  </entry>
  <entry>
    <title><![CDATA[Pagination]]></title>
    <url>%2Fhandycontrol%2Fextend_controls%2Fpagination%2Findex.html</url>
    <content type="text"><![CDATA[first we create a pagination and a datagrid also we create a PageUpdated event for pagiantion123456789101112131415&lt;Grid&gt; &lt;Grid.RowDefinitions&gt; &lt;RowDefinition Height="Auto"/&gt; &lt;RowDefinition/&gt; &lt;/Grid.RowDefinitions&gt; &lt;hc:Pagination MaxPageCount="10" PageUpdated="page_PageUpdated" PageIndex="1"/&gt; &lt;DataGrid Grid.Row="1" AutoGenerateColumns="False" ItemsSource="&#123;Binding DataList&#125;"&gt; &lt;DataGrid.Columns&gt; &lt;DataGridTextColumn Binding="&#123;Binding Index&#125;" Header="Index"/&gt; &lt;DataGridTextColumn Binding="&#123;Binding Name&#125;" Header="Name"/&gt; &lt;/DataGrid.Columns&gt; &lt;/DataGrid&gt;&lt;/Grid&gt; for example we load 100 items to a list called _totalDataList then we take 10 items to a another list called DataList Which is binded on datagrid 12_totalDataList = dataService.GetDemoDataList(100);DataList = _totalDataList.Take(10).ToList(); now we need update our list based on page so we do this in PageUpdated event: 1234private void page_PageUpdated(object sender, HandyControl.Data.FunctionEventArgs&lt;int&gt; e)&#123; DataList = _totalDataList.Skip((e.Info - 1) * 10).Take(10).ToList();&#125; Attributes Property MaxPageCount DataCountPerPage PageIndex MaxPageInterval IsJumpEnabled Events Event PageUpdated]]></content>
  </entry>
  <entry>
    <title><![CDATA[PasswordBox]]></title>
    <url>%2Fhandycontrol%2Fextend_controls%2FpasswordBox%2Findex.html</url>
    <content type="text"><![CDATA[Represents a control for entering and processing passwords. 123[TemplatePart(Name = ElementPasswordBox, Type = typeof(System.Windows.Controls.PasswordBox))][TemplatePart(Name = ElementTextBox, Type = typeof(System.Windows.Controls.TextBox))]public class PasswordBox : Control, IDataInput Create PasswordBox1&lt;hc:PasswordBox /&gt; 1var passwordBox = new PasswordBox(); enter passwordYou can enter the password in the textbox, or you can set the date in the XAML clock or code. 1&lt;hc:PasswordBox Password="123456"/&gt; 1passwordBox.Password = "123456"; show passwordThe PasswordBox control can actively display the entered password. Set ShowEyeButton to true and PasswordBox will display an “eye” button. Click this button to display the password you have entered. 1234567891011&lt;hc:PasswordBox ShowClearButton="True"/&gt;``` ![PasswordBox](https://raw.githubusercontent.com/HandyOrg/HandyOrgResource/master/HandyControl/Doc/extend_controls/PasswordBox_2.gif)# Set title and placeholder textYou can add Headers and Placeholders to the PasswordBox to indicate to the user what they do.``` XML&lt;hc:PasswordBox hc:InfoElement.Placeholder="&#123;x:Static langs:Lang.PlsEnterContent&#125;" hc:InfoElement.Title="&#123;x:Static langs:Lang.TitleDemoStr2&#125;" Attributes Property Description Password Gets or sets the password currently reserved by PasswordBox. PasswordChar Gets or sets the mask character of the PasswordBox. ShowEyeButton Get or set whether to show an “eye” button. Click to display the password. ShowPassword Get or set whether to show the password. Text Get the text displayed by TimePicker, or set the selected time VerifyFunc Get or Set Data Validation Delegation IsError Get or set whether the data is wrong ErrorStr Get or Set Error Alert TextType Get or Set Text Type ShowClearButton Gets or sets whether to show the clear button SelectionOpacity CaretBrush SelectionTextBrush SelectionBrush MaxLength IsSafeEnabled if this property is false, we can bind UnsagePassword UnsafePassword Method Method Description Clear () Clears the value of the Password property. Paste () Replaces the current selection in the PasswordBox with the contents of the clipboard. SelectAll () Selects everything in PasswordBox. VerifyData () Verify the data. Binding12 &lt;hc:PasswordBox Name="PasswordBoxDemo" ShowClearButton="True" Password="123456" IsSafeEnabled="False"/&gt;&lt;TextBox Text="&#123;Binding UnsafePassword,ElementName=PasswordBoxDemo,UpdateSourceTrigger=PropertyChanged&#125;" Margin="0,6,0,0"/&gt;]]></content>
  </entry>
  <entry>
    <title><![CDATA[PinBox]]></title>
    <url>%2Fhandycontrol%2Fextend_controls%2FpinBox%2Findex.html</url>
    <content type="text"><![CDATA[The PinBox control provides a way to enter password by user. example: 1&lt;hc:PinBox Length="6"/&gt; Attributes Property Length ItemMargin ItemWidth ItemHeight Password PasswordChar Events Event Completed]]></content>
  </entry>
  <entry>
    <title><![CDATA[PopTip]]></title>
    <url>%2Fhandycontrol%2Fextend_controls%2FpopTip%2Findex.html</url>
    <content type="text"><![CDATA[The Popup control provides a way to display content in a separate window that floats over the current application window relative to a designated element or screen coordinate. This topic introduces the Popup control and provides information about its use. example:12345&lt;Button Margin="8,0" Tag="0" Style="&#123;StaticResource Button4PoptipStyle&#125;"&gt; &lt;hc:Poptip.Instance&gt; &lt;hc:Poptip Content="Text" PlacementType="TopLeft"/&gt; &lt;/hc:Poptip.Instance&gt;&lt;/Button&gt; or123456789&lt;Button Margin="8,0" Tag="1" Style="&#123;StaticResource Button4PoptipStyle&#125;"&gt; &lt;hc:Poptip.Instance&gt; &lt;hc:Poptip PlacementType="Top"&gt; &lt;hc:Poptip.Content&gt; &lt;Path Width="100" Height="100" Fill="#f06632" Data="&#123;StaticResource LogoGeometry&#125;"/&gt; &lt;/hc:Poptip.Content&gt; &lt;/hc:Poptip&gt; &lt;/hc:Poptip.Instance&gt;&lt;/Button&gt; or1&lt;Button hc:Poptip.Content="Text" hc:Poptip.PlacementType="TopRight" Margin="8,0" Tag="2" Style="&#123;StaticResource Button4PoptipStyle&#125;"/&gt; or1&lt;ToggleButton hc:Poptip.HitMode="None" hc:Poptip.IsOpen="True" hc:Poptip.Content="Text" hc:Poptip.PlacementType="RightTop" Margin="8,16" Tag="3" Style="&#123;StaticResource ToggleButton4PoptipStyle&#125;"/&gt; Attributes Property Description HitMode Includes Click, Hover, Focus, None Content ContentTemplate ContentStringFormat ContentTemplateSelector Offset PlacementType Includes LeftTop, Left, LeftBottom, TopLeft, Top, TopRight, RightTop, Right, RightBottom, BottomLeft, Bottom, BottomRight IsOpen Target Accessible through AdornerElement Instance Accessible through AdornerElement IsInstance Accessible through AdornerElement]]></content>
  </entry>
  <entry>
    <title><![CDATA[PopupWindow]]></title>
    <url>%2Fhandycontrol%2Fextend_controls%2FpopupWindow%2Findex.html</url>
    <content type="text"><![CDATA[example:123456789101112PopupWindow popup = new PopupWindow() &#123; MinWidth = 400, Title = "Title", WindowStartupLocation = WindowStartupLocation.CenterScreen, ShowInTaskbar = true, AllowsTransparency = true, WindowStyle = WindowStyle.None &#125;; TextBox txtUsername = new TextBox();popup.PopupElement = mainStack;popup.ShowDialog(); Attributes Property Description PopupElement Popup Children]]></content>
  </entry>
  <entry>
    <title><![CDATA[PreviewSlider]]></title>
    <url>%2Fhandycontrol%2Fextend_controls%2FpreviewSlider%2Findex.html</url>
    <content type="text"><![CDATA[example:1&lt;hc:PreviewSlider Value="500" Maximum="1000"/&gt; if you want to show value, you should use PreviewContent 12345&lt;hc:PreviewSlider Name="PreviewSlider" Value="500" Maximum="1000"&gt; &lt;hc:PreviewSlider.PreviewContent&gt; &lt;Label Style="&#123;StaticResource LabelPrimary&#125;" Content="&#123;Binding PreviewPosition,ElementName=PreviewSlider&#125;" ContentStringFormat="&#123;&#125;&#123;0:#0.0&#125;"/&gt; &lt;/hc:PreviewSlider.PreviewContent&gt; &lt;/hc:PreviewSlider&gt; Attributes Property Description Value slider value Maximum maximum value PreviewContentOffset PreviewPosition]]></content>
  </entry>
  <entry>
    <title><![CDATA[ProgressButton]]></title>
    <url>%2Fhandycontrol%2Fextend_controls%2FprogressButton%2Findex.html</url>
    <content type="text"><![CDATA[ProgressButton is animated progress bar activated by clicking button. example:1&lt;hc:ProgressButton Progress="0" Content="Upload"/&gt; you can use ToggleButton instead of ProgressButton 1&lt;ToggleButton Style="&#123;StaticResource ToggleButtonLoading&#125;" Progress="0" Content="Upload"/&gt; To use Brushes, you should set Style Attributes Property Style IsChecked Progress Content Styles [ProgressButton] [ToggleButton] ProgressButtonPrimary ToggleButtonLoading ProgressButtonSuccess ToggleButtonLoadingPrimary ProgressButtonInfo ToggleButtonLoadingSuccess ProgressButtonWarning ToggleButtonLoadingInfo ProgressButtonDanger ToggleButtonLoadingWarning ProgressButtonDefault Available Only in Custom Version ToggleButtonLoadingDanger ProgressButtonViolet Available Only in Custom Version ToggleButtonLoadingViolet Available Only in Custom Version]]></content>
  </entry>
  <entry>
    <title><![CDATA[PropertyGrid]]></title>
    <url>%2Fhandycontrol%2Fextend_controls%2FpropertyGrid%2Findex.html</url>
    <content type="text"><![CDATA[Events Event SelectedObjectChanged Attributes Property Description SelectedObject PropertyGrid Description PropertyGrid MaxTitleWidth PropertyGrid MinTitleWidth PropertyGrid Value PropertyItem DisplayName PropertyItem PropertyName PropertyItem PropertyType PropertyItem PropertyTypeName PropertyItem Description PropertyItem IsReadOnly PropertyItem DefaultValue PropertyItem Category PropertyItem Editor PropertyItem EditorElement PropertyItem IsSelected PropertyItem IsExpandedEnabled PropertyItem Example:1234567891011121314151617181920public class PropertyGridDemoModel&#123; [Category("Info")] public string Name &#123; get; set; &#125; [Category("Achievement")] public int Score &#123; get; set; &#125; [Category("Achievement")] public bool IsPassed &#123; get; set; &#125; [Category("Info")] public Gender Gender &#123; get; set; &#125;&#125;public enum Gender&#123; Male, Female&#125; 12345678910111213 &lt;Grid Margin="22"&gt; &lt;Grid.RowDefinitions&gt; &lt;RowDefinition Height="Auto"/&gt; &lt;RowDefinition Height="Auto"/&gt; &lt;/Grid.RowDefinitions&gt; &lt;hc:PropertyGrid Width="500" SelectedObject="&#123;Binding DemoModel&#125;"/&gt; &lt;StackPanel Grid.Row="1" Margin="10,16,10,10"&gt; &lt;TextBox hc:TitleElement.Title="Name" hc:TitleElement.TitlePlacement="Left" Style="&#123;StaticResource TextBoxExtend&#125;" Text="&#123;Binding DemoModel.Name,Mode=OneWay&#125;" IsReadOnly="True"/&gt; &lt;TextBox hc:TitleElement.Title="Gender" hc:TitleElement.TitlePlacement="Left" Style="&#123;StaticResource TextBoxExtend&#125;" Text="&#123;Binding DemoModel.Gender,Mode=OneWay&#125;" IsReadOnly="True" Margin="0,6,0,0"/&gt; &lt;TextBox hc:TitleElement.Title="Score" hc:TitleElement.TitlePlacement="Left" Style="&#123;StaticResource TextBoxExtend&#125;" Text="&#123;Binding DemoModel.Score,Mode=OneWay&#125;" IsReadOnly="True" Margin="0,6,0,0"/&gt; &lt;TextBox hc:TitleElement.Title="IsPassed" hc:TitleElement.TitlePlacement="Left" Style="&#123;StaticResource TextBoxExtend&#125;" Text="&#123;Binding DemoModel.IsPassed,Mode=OneWay&#125;" IsReadOnly="True" Margin="0,6,0,0"/&gt; &lt;/StackPanel&gt;&lt;/Grid&gt; 123456789101112131415161718192021222324public partial class PropertyGridDemoCtl&#123; public PropertyGridDemoCtl() &#123; InitializeComponent(); DemoModel = new PropertyGridDemoModel &#123; Name = "TestName", Gender = Gender.Female, IsPassed = true, Score = 98 &#125;; &#125; public static readonly DependencyProperty DemoModelProperty = DependencyProperty.Register( "DemoModel", typeof(PropertyGridDemoModel), typeof(PropertyGridDemoCtl), new PropertyMetadata(default(PropertyGridDemoModel))); public PropertyGridDemoModel DemoModel &#123; get =&gt; (PropertyGridDemoModel) GetValue(DemoModelProperty); set =&gt; SetValue(DemoModelProperty, value); &#125;&#125;]]></content>
  </entry>
  <entry>
    <title><![CDATA[RadioGroup]]></title>
    <url>%2Fhandycontrol%2Fextend_controls%2FradioGroup%2Findex.html</url>
    <content type="text"><![CDATA[123456&lt;hc:RadioGroup&gt; &lt;RadioButton Content="RadioButton" IsChecked="True"/&gt; &lt;RadioButton Content="RadioButton"/&gt; &lt;RadioButton Content="RadioButton"/&gt; &lt;RadioButton Content="RadioButton"/&gt; &lt;/hc:RadioGroup&gt; this styles also have horizontal and vertical capabilities just set Orientation 123456&lt;hc:RadioGroup Style="&#123;StaticResource RadioGroupSolid&#125;" Orientation="Vertical"&gt; &lt;RadioButton Content="RadioButton"/&gt; &lt;RadioButton Content="RadioButton"/&gt; &lt;RadioButton Content="RadioButton"/&gt; &lt;RadioButton Content="RadioButton" IsChecked="True"/&gt; &lt;/hc:RadioGroup&gt; Styles style RadioButtonIcon RadioGroupSolid]]></content>
  </entry>
  <entry>
    <title><![CDATA[Rate]]></title>
    <url>%2Fhandycontrol%2Fextend_controls%2Frate%2Findex.html</url>
    <content type="text"><![CDATA[Rate is a flexible UI component that allows users to intuitively rate by selecting number of items [stars] from a predefined number of items. example:1&lt;hc:Rate Value="2"/&gt; Attributes Property Description Count By setting a value you can easily choose number of items the user can rate from DefaultValue Sets the default value AllowHalf You can give it a half score by enabling it AllowClear By Using it, the rating can not be changed Icon You can change the default Icon by this Property, Be careful that you should use geometric images ShowText Displays the score of the selected item Foreground You can change the brush color of the image Events Event ValueChanged]]></content>
  </entry>
  <entry>
    <title><![CDATA[RangeSlider]]></title>
    <url>%2Fhandycontrol%2Fextend_controls%2FrangeSlider%2Findex.html</url>
    <content type="text"><![CDATA[example:1&lt;hc:RangeSlider Width="400" IsSnapToTickEnabled="True" ValueStart="2" ValueEnd="8"/&gt; Attributes Property IsSnapToTickEnabled ValueStart ValueEnd]]></content>
  </entry>
  <entry>
    <title><![CDATA[RelativePanel]]></title>
    <url>%2Fhandycontrol%2Fextend_controls%2FrelativePanel%2Findex.html</url>
    <content type="text"><![CDATA[RelativePanel is a layout container that is useful for creating UI that do not have a clear linear patternIf your UI consists of multiple nested panels, RelativePanel is a good option to consider. example:1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253&lt;hc:RelativePanel Width="620" Height="700" Margin="32"&gt; &lt;Border Name="Rect1" Background="&#123;DynamicResource DangerBrush&#125;" Height="50" Width="50"&gt; &lt;TextBlock Text="Rect1" Foreground="White" FontWeight="Bold" HorizontalAlignment="Center" VerticalAlignment="Center"/&gt; &lt;/Border&gt; &lt;Border Name="Rect2" Background="&#123;DynamicResource PrimaryBrush&#125;" Height="50" Width="50" hc:RelativePanel.AlignHorizontalCenterWithPanel="True"&gt; &lt;TextBlock Text="Rect2" Foreground="White" FontWeight="Bold" HorizontalAlignment="Center" VerticalAlignment="Center"/&gt; &lt;/Border&gt; &lt;Border Name="Rect3" Background="&#123;DynamicResource SuccessBrush&#125;" Height="50" Width="50" hc:RelativePanel.AlignRightWithPanel="True"&gt; &lt;TextBlock Text="Rect3" Foreground="White" FontWeight="Bold" HorizontalAlignment="Center" VerticalAlignment="Center"/&gt; &lt;/Border&gt; &lt;Border Name="Rect4" Background="&#123;DynamicResource DangerBrush&#125;" Height="50" Width="50" hc:RelativePanel.AlignBottomWithPanel="True"&gt; &lt;TextBlock Text="Rect4" Foreground="White" FontWeight="Bold" HorizontalAlignment="Center" VerticalAlignment="Center"/&gt; &lt;/Border&gt; &lt;Border Name="Rect5" Background="&#123;DynamicResource PrimaryBrush&#125;" Height="50" Width="50" hc:RelativePanel.AlignBottomWithPanel="True" hc:RelativePanel.AlignHorizontalCenterWithPanel="True"&gt; &lt;TextBlock Text="Rect5" Foreground="White" FontWeight="Bold" HorizontalAlignment="Center" VerticalAlignment="Center"/&gt; &lt;/Border&gt; &lt;Border Name="Rect6" Background="&#123;DynamicResource SuccessBrush&#125;" Height="50" Width="50" hc:RelativePanel.AlignBottomWithPanel="True" hc:RelativePanel.AlignRightWithPanel="True"&gt; &lt;TextBlock Text="Rect6" Foreground="White" FontWeight="Bold" HorizontalAlignment="Center" VerticalAlignment="Center"/&gt; &lt;/Border&gt; &lt;Border Name="Rect7" Background="&#123;DynamicResource PrimaryBrush&#125;" Height="50" hc:RelativePanel.RightOf="&#123;Binding ElementName=Rect1&#125;"&gt; &lt;TextBlock Text="Rect7 (RightOf Rect1)" Padding="10,0" Foreground="White" FontWeight="Bold" HorizontalAlignment="Center" VerticalAlignment="Center"/&gt; &lt;/Border&gt; &lt;Border Name="Rect8" Background="&#123;DynamicResource SuccessBrush&#125;" Height="50" hc:RelativePanel.Below="&#123;Binding ElementName=Rect7&#125;"&gt; &lt;TextBlock Text="Rect8 (Below Rect7)" Padding="10,0" Foreground="White" FontWeight="Bold" HorizontalAlignment="Center" VerticalAlignment="Center"/&gt; &lt;/Border&gt; &lt;Border Name="Rect9" Background="&#123;DynamicResource PrimaryBrush&#125;" Height="140" Width="460" hc:RelativePanel.AlignHorizontalCenterWithPanel="True" hc:RelativePanel.AlignVerticalCenterWithPanel="True"&gt; &lt;TextBlock Text="Rect9" Padding="10" Foreground="White" FontWeight="Bold" HorizontalAlignment="Center" VerticalAlignment="Top"/&gt; &lt;/Border&gt; &lt;Border Name="Rect10" Background="&#123;DynamicResource DangerBrush&#125;" Width="50" hc:RelativePanel.RightOf="&#123;Binding ElementName=Rect9&#125;" hc:RelativePanel.AlignVerticalCenterWith="&#123;Binding ElementName=Rect9&#125;"&gt; &lt;TextBlock Text="Rect14 (RightOf Rect9, AlignVerticalCenterWith Rect9)" Padding="10,0" Foreground="White" FontWeight="Bold" HorizontalAlignment="Center" VerticalAlignment="Center"&gt; &lt;TextBlock.LayoutTransform&gt; &lt;TransformGroup&gt; &lt;RotateTransform Angle="-90"/&gt; &lt;/TransformGroup&gt; &lt;/TextBlock.LayoutTransform&gt; &lt;/TextBlock&gt; &lt;/Border&gt; &lt;Border Name="Rect11" Background="&#123;DynamicResource DangerBrush&#125;" Height="50" hc:RelativePanel.AlignBottomWith="&#123;Binding ElementName=Rect9&#125;" hc:RelativePanel.AlignHorizontalCenterWith="&#123;Binding ElementName=Rect9&#125;"&gt; &lt;TextBlock Text="Rect11 (AlignBottomWith Rect9, AlignHorizontalCenterWith Rect9)" Padding="10,0" Foreground="White" FontWeight="Bold" HorizontalAlignment="Center" VerticalAlignment="Center"/&gt; &lt;/Border&gt; &lt;Border Name="Rect12" Background="&#123;DynamicResource DangerBrush&#125;" Height="50" hc:RelativePanel.Below="&#123;Binding ElementName=Rect8&#125;" hc:RelativePanel.AlignLeftWith="&#123;Binding ElementName=Rect7&#125;"&gt; &lt;TextBlock Text="Rect12 (Below Rect8, AlignLeftWith Rect7)" Padding="10,0" Foreground="White" FontWeight="Bold" HorizontalAlignment="Center" VerticalAlignment="Center"/&gt; &lt;/Border&gt; &lt;Border Name="Rect13" Background="&#123;DynamicResource PrimaryBrush&#125;" Height="50" hc:RelativePanel.Below="&#123;Binding ElementName=Rect12&#125;" hc:RelativePanel.AlignRightWith="&#123;Binding ElementName=Rect12&#125;"&gt; &lt;TextBlock Text="Rect13 (Below Rect12, AlignRightWith Rect12)" Padding="10,0" Foreground="White" FontWeight="Bold" HorizontalAlignment="Center" VerticalAlignment="Center"/&gt; &lt;/Border&gt; &lt;Border Name="Rect14" Background="&#123;DynamicResource SuccessBrush&#125;" Height="50" hc:RelativePanel.Above="&#123;Binding ElementName=Rect9&#125;" hc:RelativePanel.AlignRightWith="&#123;Binding ElementName=Rect9&#125;"&gt; &lt;TextBlock Text="Rect14 (Above Rect9, AlignRightWith Rect9)" Padding="10,0" Foreground="White" FontWeight="Bold" HorizontalAlignment="Center" VerticalAlignment="Center"/&gt; &lt;/Border&gt; &lt;Border Name="Rect15" Background="&#123;DynamicResource DangerBrush&#125;" Height="50" hc:RelativePanel.LeftOf="&#123;Binding ElementName=Rect2&#125;" hc:RelativePanel.AlignTopWith="&#123;Binding ElementName=Rect9&#125;"&gt; &lt;TextBlock Text="Rect15 (LeftOf Rect2, AlignTopWith Rect9)" Padding="10,0" Foreground="White" FontWeight="Bold" HorizontalAlignment="Center" VerticalAlignment="Center"/&gt; &lt;/Border&gt; &lt;/hc:RelativePanel&gt; Attributes Property Description AlignLeftWithPanel Gets or sets a value that indicates whether this element’s left edge is touching the panel’s left edge. AlignTopWithPanel Gets or sets a value that indicates whether this element’s top edge is touching the panel’s top edge. AlignRightWithPanel Gets or sets a value that indicates whether this element’s right edge is touching the panel’s right edge. AlignBottomWithPanel Gets or sets a value that indicates whether this element’s bottom edge is touching the panel’s bottom edge. AlignLeftWith Gets or sets a target element that this element’s left edge is aligned with. AlignTopWith Gets or sets a target element that this element’s top edge is aligned with. AlignRightWith Gets or sets a target element that this element’s right edge is aligned with. AlignBottomWith Gets or sets a target element that this element’s bottom edge is aligned with. LeftOf Gets or sets a target element that this element is positioned to the left of. Above Gets or sets a target element that this element is positioned above. RightOf Gets or sets a target element that this element is positioned to the right of. Below Gets or sets a target element that this element is positioned below. AlignHorizontalCenterWithPanel Gets or sets a value that indicates whether this element’s horizontal axis is touching the panel’s horizontal axis. AlignHorizontalCenterWith Gets or sets a target element that this element’s horizontal center is aligned with. AlignVerticalCenterWithPanel Gets or sets a value that indicates whether this element’s vertical axis is touching the panel’s horizontal axis. AlignVerticalCenterWith Gets or sets a target element that this element’s vertical center is aligned with.]]></content>
  </entry>
  <entry>
    <title><![CDATA[RunningBlock]]></title>
    <url>%2Fhandycontrol%2Fextend_controls%2FrunningBlock%2Findex.html</url>
    <content type="text"><![CDATA[example:1&lt;hc:RunningBlock Content="Text"/&gt; OR you can put any content1234567891011121314&lt;hc:RunningBlock Duration="0:0:20" IsRunning="True"&gt; &lt;StackPanel Orientation="Horizontal"&gt; &lt;hc:GifImage Uri="/HandyControlDemo;component/Resources/Img/QQ/1.gif" Margin="10,0"/&gt; &lt;hc:GifImage Uri="/HandyControlDemo;component/Resources/Img/QQ/2.gif" Margin="10,0"/&gt; &lt;hc:GifImage Uri="/HandyControlDemo;component/Resources/Img/QQ/3.gif" Margin="10,0"/&gt; &lt;hc:GifImage Uri="/HandyControlDemo;component/Resources/Img/QQ/4.gif" Margin="10,0"/&gt; &lt;hc:GifImage Uri="/HandyControlDemo;component/Resources/Img/QQ/5.gif" Margin="10,0"/&gt; &lt;hc:GifImage Uri="/HandyControlDemo;component/Resources/Img/QQ/6.gif" Margin="10,0"/&gt; &lt;hc:GifImage Uri="/HandyControlDemo;component/Resources/Img/QQ/7.gif" Margin="10,0"/&gt; &lt;hc:GifImage Uri="/HandyControlDemo;component/Resources/Img/QQ/8.gif" Margin="10,0"/&gt; &lt;hc:GifImage Uri="/HandyControlDemo;component/Resources/Img/QQ/9.gif" Margin="10,0"/&gt; &lt;hc:GifImage Uri="/HandyControlDemo;component/Resources/Img/QQ/10.gif" Margin="10,0"/&gt; &lt;/StackPanel&gt; &lt;/hc:RunningBlock&gt; Attributes Property Description Duration Specifies the duration of the animation motion IsRunning Get or Set Move object AutoReverse Get or Set Object Move Reverse or not Orientation Get or Set Object Move Orientation Runaway AutoRun Get or Set Autorun Object Speed Get or Set Speed]]></content>
  </entry>
  <entry>
    <title><![CDATA[ScrollViewer]]></title>
    <url>%2Fhandycontrol%2Fextend_controls%2FscrollViewer%2Findex.html</url>
    <content type="text"><![CDATA[This just replaces the standard ScrollViewer when you drop in the library, nothing fancy to activate it. example:12&lt;hc:ScrollViewer HorizontalScrollBarVisibility="Auto" VerticalScrollBarVisibility="Hidden"&gt;&lt;/hc:ScrollViewer&gt; Attributes Property Orientation IsInertiaEnable HorizontalScrollBarVisibility VerticalScrollBarVisibility IsPenetrating]]></content>
  </entry>
  <entry>
    <title><![CDATA[ScreenShot]]></title>
    <url>%2Fhandycontrol%2Fextend_controls%2Fscreenshot%2Findex.html</url>
    <content type="text"><![CDATA[example:123&lt;hc:TransitioningContentControl&gt; &lt;Button Content="Start Screenshot" Command="hc:ControlCommands.StartScreenshot"/&gt; &lt;/hc:TransitioningContentControl&gt; now add snapped event 1234567891011121314151617181920212223public partial class ScreenshotDemoCtl : IDisposable &#123; public ScreenshotDemoCtl() &#123; InitializeComponent(); Screenshot.Snapped += Screenshot_Snapped; &#125; private void Screenshot_Snapped(object sender, FunctionEventArgs&lt;ImageSource&gt; e) &#123; new HandyControl.Controls.Window &#123; Content = new Image &#123; Source = e.Info, Stretch = Stretch.None &#125;, WindowStartupLocation = WindowStartupLocation.CenterScreen &#125;.ShowDialog(); &#125; public void Dispose() =&gt; Screenshot.Snapped -= Screenshot_Snapped; &#125; Attributes Property IsDrawing IsSelecting Size SizeStr PixelColor PixelColorStr PreviewBrush Events Event Snapped]]></content>
  </entry>
  <entry>
    <title><![CDATA[SearchBar]]></title>
    <url>%2Fhandycontrol%2Fextend_controls%2FsearchBar%2Findex.html</url>
    <content type="text"><![CDATA[example:1&lt;hc:SearchBar/&gt; To use Attached Properties, you should set Style1&lt;hc:SearchBar controls:InfoElement.TitleWidth=&quot;140&quot; hc:InfoElement.Placeholder=&quot;Please Enter Content&quot; hc:InfoElement.TitlePlacement=&quot;Left&quot; hc:InfoElement.Title=&quot;Title&quot; Style=&quot;&#123;StaticResource SearchBarPlus&#125;&quot; hc:InfoElement.Necessary=&quot;True&quot;/&gt; Attributes Property Description IsRealTime By Using it you can search when you type in realtime, without need to click on search button or hit enter ShowClearButton By Using it you can empty the content TextType By specifying it, you can control the input text TextType TextType TextType TextType Mail NDouble Number Chinese NInt PDouble Common NnDouble PInt Digits NnInt Phone Double NpDouble Url Int NpInt Styles Style SearchBarPlus SearchBarExtend Events Event SearchStarted]]></content>
  </entry>
  <entry>
    <title><![CDATA[Shield]]></title>
    <url>%2Fhandycontrol%2Fextend_controls%2Fshield%2Findex.html</url>
    <content type="text"><![CDATA[Shield is Concise, consistent, and legible badges. example:1&lt;hc:Shield Subject=".net" Status="&gt;=4.0" Color="#1182c3"/&gt; you can use Command and CommandParameter1&lt;hc:Shield Subject=&quot;chat&quot; Status=&quot;on gitter&quot; Color=&quot;#4eb899&quot; Command=&quot;hc:ControlCommands.OpenLink&quot; CommandParameter=&quot;https://github.com&quot;/&gt; Attributes Property Description Subject Specifies the Subject of Shield Status Specifies the Status of Shield Color Specifies the color of the shield Status Command By Using it, The command executes by clicking on the shield]]></content>
  </entry>
  <entry>
    <title><![CDATA[SideMenu]]></title>
    <url>%2Fhandycontrol%2Fextend_controls%2FsideMenu%2Findex.html</url>
    <content type="text"><![CDATA[SideMenu is Menu that provides navigation for your app. example:123456789101112131415161718192021222324252627&lt;hc:SideMenu&gt;&lt;hc:SideMenuItem Header="Overview"&gt; &lt;hc:SideMenuItem.Icon&gt; &lt;Image Source="/HandyControlDemo;component/Resources/Img/DevOps/DevOps-Overview.png" Width="24" Height="24"/&gt; &lt;/hc:SideMenuItem.Icon&gt; &lt;hc:SideMenuItem Header="Summary"&gt; &lt;hc:SideMenuItem.Icon&gt; &lt;TextBlock Text="&amp;#xf2cb;" Style="&#123;StaticResource TextBlockFabricIcons&#125;"/&gt; &lt;/hc:SideMenuItem.Icon&gt; &lt;/hc:SideMenuItem&gt; &lt;hc:SideMenuItem Header="Dashboards"&gt; &lt;hc:SideMenuItem.Icon&gt; &lt;TextBlock Text="&amp;#xf246;" Style="&#123;StaticResource TextBlockFabricIcons&#125;"/&gt; &lt;/hc:SideMenuItem.Icon&gt; &lt;/hc:SideMenuItem&gt; &lt;/hc:SideMenuItem&gt;&lt;hc:SideMenuItem Header="Test Plans"&gt; &lt;hc:SideMenuItem.Icon&gt; &lt;Image Source="/HandyControlDemo;component/Resources/Img/DevOps/DevOps-TestPlans.png" Width="24" Height="24"/&gt; &lt;/hc:SideMenuItem.Icon&gt; &lt;hc:SideMenuItem Header="Test Plans"&gt; &lt;hc:SideMenuItem.Icon&gt; &lt;TextBlock Text="&amp;#xf3ab;" Style="&#123;StaticResource TextBlockFabricIcons&#125;"/&gt; &lt;/hc:SideMenuItem.Icon&gt; &lt;/hc:SideMenuItem&gt; &lt;/hc:SideMenuItem&gt;&lt;/hc:SideMenu&gt; Attributes Property Description ExpandMode You can specify that all menus are open or just an open category Header Side menu header text AutoSelect PanelAreaLength SideBrush Only Available in Custom Version SubSideBrush Only Available in Custom Version Events Event SelectionChanged]]></content>
  </entry>
  <entry>
    <title><![CDATA[SimpleItemsControl]]></title>
    <url>%2Fhandycontrol%2Fextend_controls%2FsimpleItemsControl%2Findex.html</url>
    <content type="text"><![CDATA[Attributes Property Description ItemTemplate ItemContainerStyle ItemsSource]]></content>
  </entry>
  <entry>
    <title><![CDATA[SimplePanel]]></title>
    <url>%2Fhandycontrol%2Fextend_controls%2FsimplePanel%2Findex.html</url>
    <content type="text"><![CDATA[example:123&lt;hc:SimplePanel&gt;&lt;/hc:SimplePanel&gt;]]></content>
  </entry>
  <entry>
    <title><![CDATA[SimpleText]]></title>
    <url>%2Fhandycontrol%2Fextend_controls%2FsimpleText%2Findex.html</url>
    <content type="text"><![CDATA[example:1&lt;hc:SimpleText Text="Content"/&gt; Attributes Property Description TextAlignment TextTrimming TextWrapping Text Text Foreground]]></content>
  </entry>
  <entry>
    <title><![CDATA[Sprite]]></title>
    <url>%2Fhandycontrol%2Fextend_controls%2Fsprite%2Findex.html</url>
    <content type="text"><![CDATA[example:first create new usercontrol like this123456789&lt;hc:SimplePanel x:Class="HandyControlDemo.UserControl.AppSprite" xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation" xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml" xmlns:hc="https://handyorg.github.io/handycontrol"&gt; &lt;Border Background="White" CornerRadius="20" Effect="&#123;StaticResource EffectShadow4&#125;"&gt; &lt;Path Width="70" Height="70" Data="&#123;StaticResource LogoGeometry&#125;" Fill="#f06632"/&gt; &lt;/Border&gt; &lt;Button Command="hc:ControlCommands.CloseWindow" CommandParameter="&#123;Binding RelativeSource=&#123;RelativeSource Self&#125;&#125;" Visibility="&#123;Binding IsMouseOver,RelativeSource=&#123;RelativeSource AncestorType=hc:SimplePanel&#125;,Converter=&#123;StaticResource Boolean2VisibilityConverter&#125;&#125;" Width="22" Height="22" Style="&#123;StaticResource ButtonIcon&#125;" Foreground="White" hc:IconElement.Geometry="&#123;StaticResource ErrorGeometry&#125;" Padding="0" HorizontalAlignment="Right" VerticalAlignment="Top" Margin="0,-8,-8,0"/&gt;&lt;/hc:SimplePanel&gt; then show sprite1Sprite.Show(new AppSprite());]]></content>
  </entry>
  <entry>
    <title><![CDATA[SplitButton]]></title>
    <url>%2Fhandycontrol%2Fextend_controls%2FsplitButton%2Findex.html</url>
    <content type="text"><![CDATA[It allows you to provide a list of items, acting as a button. example:123456789&lt;hc:SplitButton Content="Test" Command="&#123;Binding SelectCmd&#125;" CommandParameter="Command0"&gt; &lt;hc:SplitButton.DropDownContent&gt; &lt;StackPanel&gt; &lt;MenuItem Header="Test 2" Command="&#123;Binding SelectCmd&#125;" CommandParameter="Command1"/&gt; &lt;MenuItem Header="Test 3" Command="&#123;Binding SelectCmd&#125;" CommandParameter="Command2"/&gt; &lt;MenuItem Header="Test 4" Command="&#123;Binding SelectCmd&#125;" CommandParameter="Command3"/&gt; &lt;/StackPanel&gt; &lt;/hc:SplitButton.DropDownContent&gt; &lt;/hc:SplitButton&gt; Attributes Property Description HitMode Includes Click, Hover, Focus, None Styles Style SplitButtonDefault Available Only in Custom Version SplitButtonViolet Available Only in Custom Version SplitButtonPrimary SplitButtonDanger SplitButtonWarning SplitButtonInfo SplitButtonSuccess]]></content>
  </entry>
  <entry>
    <title><![CDATA[StepBar]]></title>
    <url>%2Fhandycontrol%2Fextend_controls%2FstepBar%2Findex.html</url>
    <content type="text"><![CDATA[example123456789101112&lt;Grid&gt; &lt;hc:StepBar Name="step"&gt; &lt;hc:StepBarItem Content="Register"/&gt; &lt;hc:StepBarItem Content="BasicInfo"/&gt; &lt;hc:StepBarItem Content="UploadFile"/&gt; &lt;hc:StepBarItem Content="Complete"/&gt; &lt;/hc:StepBar&gt; &lt;StackPanel&gt; &lt;Button Click="Button_Prev" Width="180" Content="Prev"/&gt; &lt;Button Click="Button_Next" Width="180" Margin="0,16,0,0" Content="Next"/&gt; &lt;/StackPanel&gt;&lt;/Grid&gt; and for changing step: 123456789private void Button_Prev(object sender, RoutedEventArgs e)&#123; step.Prev();&#125;private void Button_Next(object sender, RoutedEventArgs e)&#123; step.Next();&#125; you can change stepbar location with Dock property:123456&lt;hc:StepBar Name="step" Dock="Bottom"&gt; &lt;hc:StepBarItem Content="Register"/&gt; &lt;hc:StepBarItem Content="BasicInfo"/&gt; &lt;hc:StepBarItem Content="UploadFile"/&gt; &lt;hc:StepBarItem Content="Complete"/&gt;&lt;/hc:StepBar&gt; Change DataTemplateyou need to create a list with a model that contain Header and Content that binding to ItemsSource 12345678910111213 &lt;hc:StepBar Name="step" ItemsSource="&#123;Binding DataList&#125;" Dock="Left"&gt; &lt;hc:StepBar.ItemTemplate&gt; &lt;DataTemplate&gt; &lt;StackPanel&gt; &lt;TextBlock FontSize="16" FontWeight="Bold" HorizontalAlignment="Left"&gt; &lt;Run Text="&#123;Binding Header&#125;"/&gt; &lt;Run Text="&#123;Binding Index,RelativeSource=&#123;RelativeSource AncestorType=hc:StepBarItem&#125;&#125;"/&gt; &lt;/TextBlock&gt; &lt;TextBlock Margin="0,4,0,0" Text="&#123;Binding Content&#125;"/&gt; &lt;/StackPanel&gt; &lt;/DataTemplate&gt; &lt;/hc:StepBar.ItemTemplate&gt;&lt;/hc:StepBar&gt; Attributes Property StepIndex Dock Index (StepBar Item) Status (StepBar Item) Events Event StepChanged]]></content>
  </entry>
  <entry>
    <title><![CDATA[Tag]]></title>
    <url>%2Fhandycontrol%2Fextend_controls%2Ftag%2Findex.html</url>
    <content type="text"><![CDATA[example:1234&lt;hc:TagPanel&gt;&lt;hc:Tag Content="Test"/&gt;&lt;hc:Tag Content="Test 2"/&gt;&lt;/hc:TagPanel&gt; Attributes Property Description ShowAddButton (TagPanel) You can add new tags using it ShowAddTextBox (TagPanel) Only Available in Custom Version, You can add new tags with a textbox using ; or space character ShowCloseButton Tags can be closed using this feature Content Tag text Selectable You can select tags by this feature IsSelected You can select or unselect tag Events Event AddTagButtonClick AddTextBoxTextChanged]]></content>
  </entry>
  <entry>
    <title><![CDATA[TabControl]]></title>
    <url>%2Fhandycontrol%2Fextend_controls%2FtabControl%2Findex.html</url>
    <content type="text"><![CDATA[The TabControl represents a TabControl that offers a different navigation style than the standard TabControl to reach the extra tabs. example:1234567891011&lt;hc:TabControl&gt; &lt;hc:TabItem Header="TabItem1"&gt; &lt;Grid Background="White"/&gt; &lt;/hc:TabItem&gt; &lt;hc:TabItem Header="TabItem2"&gt; &lt;Grid Background="&#123;DynamicResource DarkDangerBrush&#125;"/&gt; &lt;/hc:TabItem&gt; &lt;hc:TabItem Header="TabItem3" IsSelected="True"&gt; &lt;Grid Background="&#123;DynamicResource PrimaryBrush&#125;"/&gt; &lt;/hc:TabItem&gt; &lt;/hc:TabControl&gt; IsUWPStyleUWP Style for TabControl Only Custom Version 1&lt;hc:TabControl IsUWPStyle="True" /&gt; Attributes Property Description IsTabFillEnable By Using it you can fit the tab in the entire content ShowCloseButton By Using this property, tabs have the ability to close IsDraggable With this property, you can drag and drop tabs with the mouse IsAnimationEnable With this property, you can enable or disable animation when Displaying tab content, opening and closing tabs IsScrollable With this property, you can enable or disable scrollable tabs ShowOverflowButton show tabs in a list ShowScrollButton show or hide scroll button ShowContextMenu show or hide Context Menu IsUWPStyle Use Windows 10 UWP Style, [Only Available in Custom Version] HeaderBrushAlignment dependent on IsUWPStyle, The location of the boarder of the selected item and Include Top, Bottom [Only Available in Custom Version] HeaderBrush dependent on IsUWPStyle and Specifies the boarder color of the selected item [Only Available in Custom Version] IconElement.Geometry if you want to show a icon in tab item you can use IconElement AttachedProperty]]></content>
  </entry>
  <entry>
    <title><![CDATA[TextBox]]></title>
    <url>%2Fhandycontrol%2Fextend_controls%2FtextBox%2Findex.html</url>
    <content type="text"><![CDATA[Represents a control that can be used to display or edit plain text. 1public class TextBox : System.Windows.Controls.TextBox, IDataInput Create TextBox1&lt;hc:TextBox /&gt; 1var textBox = new TextBox(); Enter textThis example shows how to use the Text property to set the initial text content of a TextBox control: 1&lt;hc:TextBox Text="This is the content"/&gt; 1textBox.Text = "This is the content"; The generated TextBox is shown below: For more examples of TextBox, you can refer to the Document of its base class. Set title and placeholder textYou can add a Header and a Placeholder to a TextBox to indicate to the user its purpose. To use these two attributes 12&lt;hc:TextBox hc:InfoElement.Placeholder="&#123;x:Static langs:Lang.PlsEnterContent&#125;" hc:InfoElement.Title="&#123;x:Static langs:Lang.TitleDemoStr2&#125;" Attributes Property Description Text Gets or sets the text content of the textbox. VerifyFunc Gets or sets the data validation delegate. IsError Gets or sets whether the data is wrong. ErrorStr Gets or sets the error prompt. TextType Gets or sets the text type. ShowClearButton Gets or sets whether to show the clear button. Method Method Description VerifyData () Verify the data. TextType TextType TextType TextType Mail NDouble Number Chinese NInt PDouble Common NnDouble PInt Digits NnInt Phone Double NpDouble Url Int NpInt Persian Only Custom Version IranNationalCode Only Custom Version you can use regex pattern in texttype1&lt;hc:TextBox hc:InfoElement.RegexPattern="Regex Pattern"/&gt;]]></content>
  </entry>
  <entry>
    <title><![CDATA[TimeBar]]></title>
    <url>%2Fhandycontrol%2Fextend_controls%2FtimeBar%2Findex.html</url>
    <content type="text"><![CDATA[example:1&lt;hc:TimeBar Name="TimeBarDemo" BorderThickness="0" Margin="32" Width="600" VerticalAlignment="Center"/&gt; 123456for (int i = 0; i &lt; 10; i++)&#123; var hour = 6 * i; TimeBarDemo.Hotspots.Add(new DateTimeRange(DateTime.Today.AddHours(hour), DateTime.Today.AddHours(hour + 1))); TimeBarDemo.Hotspots.Add(new DateTimeRange(DateTime.Today.AddHours(-hour), DateTime.Today.AddHours(-hour + 1)));&#125; Attributes Property HotspotsBrush ShowSpeStr TimeFormat SpeStr (Internal) SelectedTime Events Event TimeChanged]]></content>
  </entry>
  <entry>
    <title><![CDATA[TimePicker]]></title>
    <url>%2Fhandycontrol%2Fextend_controls%2FtimePicker%2Findex.html</url>
    <content type="text"><![CDATA[The TimePicker control allows the user to select the time by typing the time in the text box or using the drop-down calendar control. 12345[TemplatePart(Name = ElementRoot, Type = typeof(Grid))][TemplatePart(Name = ElementTextBox, Type = typeof(WatermarkTextBox))][TemplatePart(Name = ElementButton, Type = typeof(Button))][TemplatePart(Name = ElementPopup, Type = typeof(Popup))]public class TimePicker : Control, IDataInput Create TimePicker1&lt;hc:TimePicker /&gt; 1var timePicker = new TimePicker(); The generated TimePicker is shown below: Selection periodYou can enter the time through the text box, or click the button to the right of the text box to open the drop-down clock control to select the time. You can also set the date like this in a XAML clock or code. 1&lt;hc:TimePicker SelectedTime="&#123;x:Static system:DateTime.Now&#125;"/&gt; 1timePicker.SelectedTime = DateTime.Now; Change the clock styleBy changing the Clock property, TimePicker can change the style of the clock. 12345&lt;hc:TimePicker ShowClearButton="True" Style="&#123;StaticResource TimePickerPlus&#125;"&gt; &lt;hc:TimePicker.Clock&gt; &lt;hc:ListClock/&gt; &lt;/hc:TimePicker.Clock&gt;&lt;/hc:TimePicker&gt; Set title and placeholder textYou can add Headers and Placeholders to the DatePicker to indicate to the user what they do. To use these two properties, you first need to apply the TimePickerExtend or TimePickerPlus styles. 123&lt;hc:TimePicker hc:InfoElement.Placeholder="&#123;x:Static langs:Lang.PlsEnterContent&#125;" hc:InfoElement.Title="&#123;x:Static langs:Lang.TitleDemoStr2&#125;" Style="&#123;StaticResource TimePickerExtend&#125;"/&gt; Attributes Property Description SelectedTime Get or set the currently selected time Clock Get or set the drop-down clock TimeFormat Get or set the format used to display the selected time DisplayTime Get or set the time to be displayed IsDropDownOpen Gets or sets a value that indicates whether the pull-down clock is turned on or off Text Get the text displayed by TimePicker or set the selected time VerifyFunc Get or Set Data Validation Delegation IsError Get or set whether the data is wrong ErrorStr Get or Set Error Alert TextType Get or Set Text Type ShowClearButton Gets or sets whether to show the clear button Method Method Description VerifyData () Verify Data]]></content>
  </entry>
  <entry>
    <title><![CDATA[ToggleBlock]]></title>
    <url>%2Fhandycontrol%2Fextend_controls%2FtoggleBlock%2Findex.html</url>
    <content type="text"><![CDATA[1234567891011121314&lt;hc:ToggleBlock IsChecked="&#123;Binding DataGot&#125;" VerticalContentAlignment="Stretch" HorizontalContentAlignment="Stretch"&gt; &lt;hc:ToggleBlock.UnCheckedContent&gt; &lt;hc:LoadingCircle IsRunning="&#123;Binding DataGot,Converter=&#123;StaticResource Boolean2BooleanReConverter&#125;&#125;"/&gt; &lt;/hc:ToggleBlock.UnCheckedContent&gt; &lt;hc:ToggleBlock.CheckedContent&gt; &lt;ListBox Background="Transparent" ItemContainerStyle="&#123;StaticResource ListBoxItemCustom&#125;" BorderThickness="0" ItemsSource="&#123;Binding DataList&#125;" ItemsPanel="&#123;StaticResource FluidMoveBehaviorWrapPanelItemsPanelTemplate&#125;"&gt; &lt;ListBox.ItemTemplate&gt; &lt;DataTemplate&gt; &lt;userControl:Avatar DisplayName="&#123;Binding DisplayName&#125;" Link="&#123;Binding Link&#125;" Source="&#123;Binding AvatarUri&#125;"/&gt; &lt;/DataTemplate&gt; &lt;/ListBox.ItemTemplate&gt; &lt;/ListBox&gt; &lt;/hc:ToggleBlock.CheckedContent&gt; &lt;/hc:ToggleBlock&gt; Attributes Property IsChecked CheckedContent UnCheckedContent IndeterminateContent]]></content>
  </entry>
  <entry>
    <title><![CDATA[Transfer]]></title>
    <url>%2Fhandycontrol%2Fextend_controls%2Ftransfer%2Findex.html</url>
    <content type="text"><![CDATA[example:1234567&lt;hc:Transfer ItemsSource="&#123;Binding DataList&#125;"&gt; &lt;hc:Transfer.ItemTemplate&gt; &lt;DataTemplate&gt; &lt;TextBlock Text="&#123;Binding Name&#125;"/&gt; &lt;/DataTemplate&gt; &lt;/hc:Transfer.ItemTemplate&gt; &lt;/hc:Transfer&gt;]]></content>
  </entry>
  <entry>
    <title><![CDATA[TransitioningContentControl]]></title>
    <url>%2Fhandycontrol%2Fextend_controls%2FtransitioningContentControl%2Findex.html</url>
    <content type="text"><![CDATA[You can use TransitioningContentControl control if you want your content to run with animation. example:12345&lt;hc:TransitioningContentControl&gt; &lt;Grid&gt; &lt;/Grid&gt;&lt;/hc:TransitioningContentControl&gt; Attributes Property Description TransitionMode Page loading animation [Left2Right, Bottom2Top, Top2Bottom, Right2LeftWithFade, Left2RightWithFade, Bottom2TopWithFade, Top2BottomWithFade, Right2LeftWithFade] TransitionStoryboard [Custom1Transition, Custom2Transition, Custom3Transition] Sample TransitionStoryboard1234567891011121314151617181920212223&lt;Storyboard x:Key="Custom1Transition" x:Shared="False"&gt; &lt;DoubleAnimation From="50" To="0" Duration="0:0:0.4" Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[3].(TranslateTransform.X)"&gt; &lt;DoubleAnimation.EasingFunction&gt; &lt;ElasticEase Oscillations="1"/&gt; &lt;/DoubleAnimation.EasingFunction&gt; &lt;/DoubleAnimation&gt; &lt;/Storyboard&gt; &lt;Storyboard x:Key="Custom2Transition" x:Shared="False"&gt; &lt;DoubleAnimation From="10" To="0" Duration="0:0:0.4" Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[2].(RotateTransform.Angle)"&gt; &lt;DoubleAnimation.EasingFunction&gt; &lt;ElasticEase Oscillations="1"/&gt; &lt;/DoubleAnimation.EasingFunction&gt; &lt;/DoubleAnimation&gt; &lt;/Storyboard&gt; &lt;Storyboard x:Key="Custom3Transition" x:Shared="False"&gt; &lt;DoubleAnimation From=".8" To="1" Duration="0:0:0.4" Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[0].(ScaleTransform.ScaleX)"&gt; &lt;DoubleAnimation.EasingFunction&gt; &lt;ElasticEase Oscillations="1"/&gt; &lt;/DoubleAnimation.EasingFunction&gt; &lt;/DoubleAnimation&gt; &lt;/Storyboard&gt;]]></content>
  </entry>
  <entry>
    <title><![CDATA[WaterfallPanel]]></title>
    <url>%2Fhandycontrol%2Fextend_controls%2FwaterfallPanel%2Findex.html</url>
    <content type="text"><![CDATA[example:123&lt;hc:WaterfallPanel&gt; &lt;TextBlock Text="Content"/&gt;&lt;/hc:WaterfallPanel&gt; you can use Attached Properties123456&lt;hc:WaterfallPanel Groups=&quot;3&quot; hc:PanelElement.FluidMoveBehavior=&quot;&#123;StaticResource BehaviorXY200&#125;&quot;&gt; &lt;TextBlock Text=&quot;Content&quot;/&gt;&lt;TextBlock Text=&quot;Content&quot;/&gt;&lt;TextBlock Text=&quot;Content&quot;/&gt;&lt;TextBlock Text=&quot;Content&quot;/&gt;&lt;/hc:WaterfallPanel&gt; Attributes Property Description Groups Number of items to be placed in each column (if you set Orientation to Horizontal) or Row (if you set Orientation to Vertical) Orientation Specifies the position of the items inside the panel Behavior Behavior BehaviorX200 BehaviorX400 BehaviorY200 BehaviorY400 BehaviorXY200 BehaviorXY400]]></content>
  </entry>
  <entry>
    <title><![CDATA[Watermark]]></title>
    <url>%2Fhandycontrol%2Fextend_controls%2Fwatermark%2Findex.html</url>
    <content type="text"><![CDATA[example:123&lt;hc:Watermark Mark="Website" FontSize="80" MarkMargin="30,0"&gt; &lt;ListBox/&gt;&lt;/hc:Watermark&gt; or123&lt;hc:Watermark Mark="&#123;StaticResource QqGeometry&#125;" MarkWidth="200" MarkHeight="200" MarkMargin="30"&gt; &lt;!-- Content --&gt;&lt;/hc:Watermark&gt; Attributes Property Mark MarkMargin MarkWidth MarkHeight Angle Content MarkBrush AutoSizeEnabled]]></content>
  </entry>
  <entry>
    <title><![CDATA[WaveProgressBar]]></title>
    <url>%2Fhandycontrol%2Fextend_controls%2FwaveProgressBar%2Findex.html</url>
    <content type="text"><![CDATA[example:1&lt;hc:WaveProgressBar Value="40"/&gt; Attributes Property Description ShowText Displays the current value WaveStroke Specifies the thickness of the WaveProgressBar WaveThickness Specifies the Thickness of the WaveProgressBar WaveFill color for filling wave Style Set Style Styles Style ProgressBarSuccessWave ProgressBarInfoWave ProgressBarWarningWave ProgressBarDangerWave ProgressBarPrimaryWave ProgressBarDefaultWave Available Only in Custom Version ProgressBarVioletWave Available Only in Custom Version]]></content>
  </entry>
  <entry>
    <title><![CDATA[Window]]></title>
    <url>%2Fhandycontrol%2Fextend_controls%2Fwindow%2Findex.html</url>
    <content type="text"><![CDATA[Attached Propertiesyou can use WindowAttach Attached Property for dragging window or any control.123 &lt;hc:BlurWindow WindowAttach:IsDragElement="True" .../&gt; Shortcutyou should use GlobalShortcut.KeyBindings1234&lt;hc:GlobalShortcut.KeyBindings&gt; &lt;KeyBinding Modifiers="Control+Alt" Key="E" Command="&#123;Binding GlobalShortcutErrorCmd&#125;"/&gt; &lt;KeyBinding Modifiers="Control+Alt" Key="I" Command="&#123;Binding Main.GlobalShortcutInfoCmd, Source=&#123;StaticResource Locator&#125;&#125;"/&gt; &lt;/hc:GlobalShortcut.KeyBindings&gt; MenuIf you want to use menus in the title bar, you should use NonClientAreaContent property1234567891011&lt;hc:Window.NonClientAreaContent&gt; &lt;StackPanel VerticalAlignment="Stretch" Orientation="Horizontal"&gt; &lt;Button Content="About" Style="&#123;StaticResource ButtonCustom&#125;"/&gt; &lt;Button Content="Help" Style="&#123;StaticResource ButtonCustom&#125;"/&gt; &lt;Menu&gt; &lt;MenuItem Header="Repository"&gt; &lt;MenuItem Header="GitHub"/&gt; &lt;/MenuItem&gt; &lt;/Menu&gt; &lt;/StackPanel&gt;&lt;/hc:Window.NonClientAreaContent&gt; Attributes Property Description NonClientAreaBackground Specifies the title bar background NonClientAreaForeground Specifies the title bar foreground OtherButtonHoverBackground Specifies the Maximize and Minimize Buttons background when mouse hover it OtherButtonHoverForeground Specifies the Maximize and Minimize Buttons foreground when mouse hover it OtherButtonBackground Specifies the Maximize and Minimize Buttons background OtherButtonForeground Specifies the Maximize and Minimize Buttons foreground ShowNonClientArea Specifies whether to display the title bar or not NonClientAreaContent You can put any objects or text in the title bar NonClientAreaHeight Specifies the title bar Height CloseButtonBackground Specifies the Close Button Background CloseButtonForeground Specifies the Close Button Foreground CloseButtonHoverBackground Specifies the Close Button Background when mouse hover it CloseButtonHoverForeground Specifies the Close Button Foreground when mouse hover it ShowTitle Specifies whether to display the program title in the title bar NonClientAreaContentIf you want to put objects, you should use it in this way123&lt;hc:Window.NonClientAreaContent&gt; &lt;!-- Put your objects here --&gt;&lt;/hc:Window.NonClientAreaContent&gt;]]></content>
  </entry>
  <entry>
    <title><![CDATA[Behaviors]]></title>
    <url>%2Fhandycontrol%2Finteractivity%2Fbehaviors%2Findex.html</url>
    <content type="text"><![CDATA[FluidMoveBehavior123456789&lt;StackPanel x:Name="Panel" Grid.Row="0"&gt; &lt;hc:Interaction.Behaviors&gt; &lt;hc:FluidMoveBehavior Duration="00:00:01" AppliesTo="Children"&gt; &lt;hc:FluidMoveBehavior.EaseY&gt; &lt;BounceEase EasingMode="EaseOut" Bounces="2" /&gt; &lt;/hc:FluidMoveBehavior.EaseY&gt; &lt;/hc:FluidMoveBehavior&gt; &lt;/hc:Interaction.Behaviors&gt;&lt;/StackPanel&gt; now add items:123456Rectangle rect = new Rectangle();rect.Height = 50;rect.Width = 50;rect.Fill = Brushes.DeepPink;rect.Margin = new Thickness(5.0);this.Panel.Children.Add(rect); or remove items:1234if (this.Panel.Children.Count &gt; 0)&#123; this.Panel.Children.RemoveAt(0);&#125; MouseDragElementBehavior12345&lt;Rectangle Width="40" Height="40" Fill="DeepPink"&gt; &lt;hc:Interaction.Behaviors&gt; &lt;hc:MouseDragElementBehavior/&gt; &lt;/hc:Interaction.Behaviors&gt;&lt;/Rectangle&gt;]]></content>
  </entry>
  <entry>
    <title><![CDATA[Commands]]></title>
    <url>%2Fhandycontrol%2Finteractivity%2Fcommands%2Findex.html</url>
    <content type="text"><![CDATA[you can bind this pre-definded commands in your xaml Commands Command Description OpenLink Open Link ShutdownApp Close Application PushMainWindow2Top Open MainWindow in front CloseWindow Close Current Window StartScreenshot Take Screenshot example: 1&lt;Button Command="hc:ControlCommands.OpenLink" CommandParameter="https://google.com" /&gt;]]></content>
  </entry>
  <entry>
    <title><![CDATA[Hooks]]></title>
    <url>%2Fhandycontrol%2Finteractivity%2Fhooks%2Findex.html</url>
    <content type="text"><![CDATA[There are some hooks to work with Windows functions Hooks Name ClipboardHook KeyboardHook SystemMenuHook ClipboardHookMethods and Events Method Event Start ContentChanged Stop Case123456ClipboardHook.Start();ClipboardHook.Stop();ClipboardHook.ContentChanged +=ClipboardHook_ContentChanged;private void ClipboardHook_ContentChanged() &#123; &#125; KeyboardHookMethods and Events Method Event Start KeyDown Stop KeyUp Case123456KeyboardHook.Start();KeyboardHook.Stop();KeyboardHook.KeyDown +=KeyboardHook_KeyDown;private void KeyboardHook_KeyDown(object sender, HandyControl.Data.KeyboardHookEventArgs e) &#123; &#125; SystemMenuHookWith this hook you can add a new item to the context menu Or display your Custom context menu Methods and Events Method Event Insert Click InsertSeperator Remove SetCustomContextMenu CaseAdd Items to ContextMenu Put this code on WindowLoaded Event 123SystemMenuHook.Insert(0, 1000, "Item 1", this);SystemMenuHook.InsertSeperator(1, this);SystemMenuHook.Remove(1000); if you want to handle click event, you need to create click event 1234567891011SystemMenuHook.Click += SystemMenuHook_Click;private void SystemMenuHook_Click(int obj) &#123; switch (obj) &#123; case MenuId: MessageBox.Show("Hello"); break; &#125; &#125; Display your Custom ContextMenu [Available Only in Custom Version]first add a ContextMenu to your window resource with a Key123456789&lt;hc:Window.Resources&gt; &lt;ContextMenu x:Key="systemMenu"&gt; &lt;MenuItem Header="Help"/&gt; &lt;MenuItem Header="Choose theme"/&gt; &lt;MenuItem Header="Add Note"/&gt; &lt;Separator /&gt; &lt;MenuItem Header="Exit"/&gt; &lt;/ContextMenu&gt; &lt;/hc:Window.Resources&gt; then Put this code on WindowLoaded Event 12var context = Resources["systemMenu"] as ContextMenu;SystemMenuHook.SetCustomContextMenu(this, context);]]></content>
  </entry>
  <entry>
    <title><![CDATA[Triggers]]></title>
    <url>%2Fhandycontrol%2Finteractivity%2Ftriggers%2Findex.html</url>
    <content type="text"><![CDATA[You can use Interaction Triggers to handle user-initiated events EventTriggerEventToCommandYou can use this method if you want to handle event and pass event args to commandexample: you should write event name in EventName Section 1234567 &lt;hc:SearchBar&gt; &lt;hc:Interaction.Triggers&gt; &lt;hc:EventTrigger EventName="SearchStarted"&gt; &lt;hc:EventToCommand Command="&#123;Binding OnSearchStartedCommand&#125;" PassEventArgsToCommand="True"/&gt; &lt;/hc:EventTrigger&gt; &lt;/hc:Interaction.Triggers&gt;&lt;/hc:SearchBar&gt; InvokeCommandAction12345&lt;hc:Interaction.Triggers&gt; &lt;hc:EventTrigger EventName="MouseLeftButtonDown" &gt; &lt;hc:InvokeCommandAction Command="&#123;Binding LeftMouseButtonDownCommand&#125;" CommandParameter="test" /&gt; &lt;/hc:EventTrigger&gt;&lt;/hc:Interaction.Triggers&gt; LaunchUriOrFileActionOpen Url or File 1234567&lt;Button x:Name="button" Content="Click Me"&gt; &lt;hc:Interaction.Triggers&gt; &lt;hc:EventTrigger EventName="Click" SourceObject="&#123;Binding ElementName=button&#125;"&gt; &lt;hc:LaunchUriOrFileAction Path="https://ghost1372.github.io" /&gt; &lt;/hc:EventTrigger&gt; &lt;/hc:Interaction.Triggers&gt;&lt;/Button&gt;]]></content>
  </entry>
  <entry>
    <title><![CDATA[Border]]></title>
    <url>%2Fhandycontrol%2Fnative_controls%2Fborder%2Findex.html</url>
    <content type="text"><![CDATA[Styles Available Styles BorderTipPrimary BorderTipDanger BorderTipWarning BorderTipInfo BorderTipSuccess BorderRegionStyleThis style is used to wrap a control area, with several DropShadowEffect resources in the base xaml definition to make the following effects: The xaml code for the above effects is as follows: 1234567891011121314151617181920212223242526272829303132&lt;UniformGrid Margin="32,32,0,0" Columns="3" Rows="2"&gt; &lt;Border Style="&#123;StaticResource BorderRegion&#125;" Width="200" Height="200" Margin="0,0,32,32"&gt; &lt;Border Background="&#123;DynamicResource PrimaryBrush&#125;"&gt; &lt;TextBlock Text="&#123;x:Static langs:Lang.ContentDemoStr&#125;" VerticalAlignment="Center" HorizontalAlignment="Center" Foreground="White"/&gt; &lt;/Border&gt; &lt;/Border&gt; &lt;Border Style="&#123;StaticResource BorderRegion&#125;" Width="200" Height="200" Margin="0,0,32,32" Effect="&#123;StaticResource EffectShadow1&#125;"&gt; &lt;Border Background="&#123;DynamicResource InfoBrush&#125;"&gt; &lt;TextBlock Text="&#123;x:Static langs:Lang.ContentDemoStr&#125;" VerticalAlignment="Center" HorizontalAlignment="Center" Foreground="White"/&gt; &lt;/Border&gt; &lt;/Border&gt; &lt;Border Style="&#123;StaticResource BorderRegion&#125;" Width="200" Height="200" Margin="0,0,32,32" Effect="&#123;StaticResource EffectShadow2&#125;"&gt; &lt;Border Background="&#123;DynamicResource WarningBrush&#125;"&gt; &lt;TextBlock Text="&#123;x:Static langs:Lang.ContentDemoStr&#125;" VerticalAlignment="Center" HorizontalAlignment="Center" Foreground="White"/&gt; &lt;/Border&gt; &lt;/Border&gt; &lt;Border Style="&#123;StaticResource BorderRegion&#125;" Width="200" Height="200" Margin="0,0,32,32" Effect="&#123;StaticResource EffectShadow3&#125;"&gt; &lt;Border Background="&#123;DynamicResource DangerBrush&#125;"&gt; &lt;TextBlock Text="&#123;x:Static langs:Lang.ContentDemoStr&#125;" VerticalAlignment="Center" HorizontalAlignment="Center" Foreground="White"/&gt; &lt;/Border&gt; &lt;/Border&gt; &lt;Border Style="&#123;StaticResource BorderRegion&#125;" Width="200" Height="200" Margin="0,0,32,32" Effect="&#123;StaticResource EffectShadow4&#125;"&gt; &lt;Border Background="&#123;DynamicResource AccentBrush&#125;"&gt; &lt;TextBlock Text="&#123;x:Static langs:Lang.ContentDemoStr&#125;" VerticalAlignment="Center" HorizontalAlignment="Center" Foreground="White"/&gt; &lt;/Border&gt; &lt;/Border&gt; &lt;Border Style="&#123;StaticResource BorderRegion&#125;" Width="200" Height="200" Margin="0,0,32,32" Effect="&#123;StaticResource EffectShadow5&#125;"&gt; &lt;Border Background="&#123;DynamicResource BorderBrush&#125;"&gt; &lt;TextBlock Text="&#123;x:Static langs:Lang.ContentDemoStr&#125;" VerticalAlignment="Center" HorizontalAlignment="Center"/&gt; &lt;/Border&gt; &lt;/Border&gt;&lt;/UniformGrid&gt; Tip: The BorderRegion used in the new version is different from the old version using the BorderRegionStyle. BorderVerticallySplitterThis style uses a 1 unit width Border to split the horizontally arranged controls. Example:1234567891011&lt;StackPanel Height=&quot;20&quot; Orientation=&quot;Horizontal&quot;&gt; &lt;Ellipse Margin=&quot;5,0&quot; Fill=&quot;OrangeRed&quot; Width=&quot;20&quot; Height=&quot;20&quot;/&gt; &lt;Border Style=&quot;&#123;StaticResource BorderVerticallySplitter&#125;&quot;/&gt; &lt;Ellipse Margin=&quot;5,0&quot; Fill=&quot;OrangeRed&quot; Width=&quot;20&quot; Height=&quot;20&quot;/&gt; &lt;Border Style=&quot;&#123;StaticResource BorderVerticallySplitter&#125;&quot;/&gt; &lt;Ellipse Margin=&quot;5,0&quot; Fill=&quot;OrangeRed&quot; Width=&quot;20&quot; Height=&quot;20&quot;/&gt; &lt;Border Style=&quot;&#123;StaticResource BorderVerticallySplitter&#125;&quot;/&gt; &lt;Ellipse Margin=&quot;5,0&quot; Fill=&quot;OrangeRed&quot; Width=&quot;20&quot; Height=&quot;20&quot;/&gt; &lt;Border Style=&quot;&#123;StaticResource BorderVerticallySplitter&#125;&quot;/&gt; &lt;Ellipse Margin=&quot;5,0&quot; Fill=&quot;OrangeRed&quot; Width=&quot;20&quot; Height=&quot;20&quot;/&gt;&lt;/StackPanel&gt; BorderHorizontallySplitterThis style uses a 1 unit height Border to split the vertically arranged controls. Example:1234567891011&lt;StackPanel Width=&quot;20&quot;&gt; &lt;Ellipse Margin=&quot;0,5&quot; Fill=&quot;OrangeRed&quot; Width=&quot;20&quot; Height=&quot;20&quot;/&gt; &lt;Border Style=&quot;&#123;StaticResource BorderHorizontallySplitter&#125;&quot;/&gt; &lt;Ellipse Margin=&quot;0,5&quot; Fill=&quot;OrangeRed&quot; Width=&quot;20&quot; Height=&quot;20&quot;/&gt; &lt;Border Style=&quot;&#123;StaticResource BorderHorizontallySplitter&#125;&quot;/&gt; &lt;Ellipse Margin=&quot;0,5&quot; Fill=&quot;OrangeRed&quot; Width=&quot;20&quot; Height=&quot;20&quot;/&gt; &lt;Border Style=&quot;&#123;StaticResource BorderHorizontallySplitter&#125;&quot;/&gt; &lt;Ellipse Margin=&quot;0,5&quot; Fill=&quot;OrangeRed&quot; Width=&quot;20&quot; Height=&quot;20&quot;/&gt; &lt;Border Style=&quot;&#123;StaticResource BorderHorizontallySplitter&#125;&quot;/&gt; &lt;Ellipse Margin=&quot;0,5&quot; Fill=&quot;OrangeRed&quot; Width=&quot;20&quot; Height=&quot;20&quot;/&gt;&lt;/StackPanel&gt; BorderCircularThis style implements a circular border with the addition of the BorderElement.Circular property. Example:1&lt;Border Style=&quot;&#123;StaticResource BorderCircular&#125;&quot; Background=&quot;OrangeRed&quot; Width=&quot;100&quot; Height=&quot;100&quot;/&gt; BorderClipThis style adds a cropping function to the ‘BorderCircular`, which is often used to display a circular Image. Example:123&lt;Border Style=&quot;&#123;StaticResource BorderClip&#125;&quot; Width=&quot;100&quot; Height=&quot;100&quot;&gt; &lt;Image Source=&quot;/HandyControlDemo;component/Resources/Img/Album/2.jpg&quot;/&gt;&lt;/Border&gt;]]></content>
  </entry>
  <entry>
    <title><![CDATA[Button]]></title>
    <url>%2Fhandycontrol%2Fnative_controls%2Fbutton%2Findex.html</url>
    <content type="text"><![CDATA[ButtonBaseStyle : ButtonBaseBaseStyleThe default style of the button is not recommended for direct use and should always be used by other styles in the BasedOn mode. All buttons that inherit this style can use the additional properties defined in IconElement to control the properties of the geometry in the button. All buttons that inherit this style can use the BorderElement.CornerRadius attached property to control the fillet size of the button. Example:123456&lt;StackPanel Orientation=&quot;Horizontal&quot;&gt; &lt;Button Content=&quot;This is a button&quot;/&gt; &lt;Button Content=&quot;This is a button&quot; Margin=&quot;10,0,0,0&quot; controls:BorderElement.CornerRadius=&quot;15&quot;/&gt; &lt;Button Content=&quot;This is a button&quot; Margin=&quot;10,0,0,0&quot;controls:IconElement.Geometry=&quot;&#123;StaticResource GithubGeometry&#125;&quot;/&gt;&lt;/StackPanel&gt; ButtonPrimary : ButtonBaseStyleMain Button Example:12345&lt;StackPanel Orientation=&quot;Horizontal&quot;&gt; &lt;Button Style=&quot;&#123;StaticResource ButtonPrimary&#125;&quot; Content=&quot;This is a button&quot;/&gt; &lt;Button Style=&quot;&#123;StaticResource ButtonPrimary&#125;&quot; Content=&quot;This is a button&quot; Margin=&quot;10,0,0,0&quot; controls:BorderElement.CornerRadius=&quot;15&quot;/&gt; &lt;Button Style=&quot;&#123;StaticResource ButtonPrimary&#125;&quot; Content=&quot;This is a button&quot; Margin=&quot;10,0,0,0&quot; controls:IconElement.Geometry=&quot;&#123;StaticResource GithubGeometry&#125;&quot;/&gt;&lt;/StackPanel&gt; ButtonSuccess : ButtonBaseStyleSuccess button Example：12345&lt;StackPanel Orientation=&quot;Horizontal&quot;&gt; &lt;Button Style=&quot;&#123;StaticResource ButtonSuccess&#125;&quot; Content=&quot;This is a button&quot;/&gt; &lt;Button Style=&quot;&#123;StaticResource ButtonSuccess&#125;&quot; Content=&quot;This is a button&quot; Margin=&quot;10,0,0,0&quot; controls:BorderElement.CornerRadius=&quot;15&quot;/&gt; &lt;Button Style=&quot;&#123;StaticResource ButtonSuccess&#125;&quot; Content=&quot;This is a button&quot; Margin=&quot;10,0,0,0&quot; controls:IconElement.Geometry=&quot;&#123;StaticResource GithubGeometry&#125;&quot;/&gt;&lt;/StackPanel&gt; ButtonInfo : ButtonBaseStyleInformation button Example：12345&lt;StackPanel Orientation=&quot;Horizontal&quot;&gt; &lt;Button Style=&quot;&#123;StaticResource ButtonInfo&#125;&quot; Content=&quot;This is a button&quot;/&gt; &lt;Button Style=&quot;&#123;StaticResource ButtonInfo&#125;&quot; Content=&quot;This is a button&quot; Margin=&quot;10,0,0,0&quot; controls:BorderElement.CornerRadius=&quot;15&quot;/&gt; &lt;Button Style=&quot;&#123;StaticResource ButtonInfo&#125;&quot; Content=&quot;This is a button&quot; Margin=&quot;10,0,0,0&quot; controls:IconElement.Geometry=&quot;&#123;StaticResource GithubGeometry&#125;&quot;/&gt;&lt;/StackPanel&gt; ButtonWarning : ButtonBaseStyleWarning button Example：12345&lt;StackPanel Orientation=&quot;Horizontal&quot;&gt; &lt;Button Style=&quot;&#123;StaticResource ButtonWarning&#125;&quot; Content=&quot;This is a button&quot;/&gt; &lt;Button Style=&quot;&#123;StaticResource ButtonWarning&#125;&quot; Content=&quot;This is a button&quot; Margin=&quot;10,0,0,0&quot; controls:BorderElement.CornerRadius=&quot;15&quot;/&gt; &lt;Button Style=&quot;&#123;StaticResource ButtonWarning&#125;&quot; Content=&quot;This is a button&quot; Margin=&quot;10,0,0,0&quot; controls:IconElement.Geometry=&quot;&#123;StaticResource GithubGeometry&#125;&quot;/&gt;&lt;/StackPanel&gt; ButtonDanger : ButtonBaseStyleDanger button Example：12345&lt;StackPanel Orientation=&quot;Horizontal&quot;&gt; &lt;Button Style=&quot;&#123;StaticResource ButtonDanger&#125;&quot; Content=&quot;This is a button&quot;/&gt; &lt;Button Style=&quot;&#123;StaticResource ButtonDanger&#125;&quot; Content=&quot;This is a button&quot; Margin=&quot;10,0,0,0&quot; controls:BorderElement.CornerRadius=&quot;15&quot;/&gt; &lt;Button Style=&quot;&#123;StaticResource ButtonDanger&#125;&quot; Content=&quot;This is a button&quot; Margin=&quot;10,0,0,0&quot; controls:IconElement.Geometry=&quot;&#123;StaticResource GithubGeometry&#125;&quot;/&gt;&lt;/StackPanel&gt; ButtonViolet : ButtonBaseStyleViolet button Only Custom Version Example：12345&lt;StackPanel Orientation=&quot;Horizontal&quot;&gt; &lt;Button Style=&quot;&#123;StaticResource ButtonViolet&#125;&quot; Content=&quot;This is a button&quot;/&gt; &lt;Button Style=&quot;&#123;StaticResource ButtonViolet&#125;&quot; Content=&quot;This is a button&quot; Margin=&quot;10,0,0,0&quot; controls:BorderElement.CornerRadius=&quot;15&quot;/&gt; &lt;Button Style=&quot;&#123;StaticResource ButtonViolet&#125;&quot; Content=&quot;This is a button&quot; Margin=&quot;10,0,0,0&quot; controls:IconElement.Geometry=&quot;&#123;StaticResource GithubGeometry&#125;&quot;/&gt;&lt;/StackPanel&gt; ButtonDefault : ButtonBaseStyleDefault button Only Custom Version Example：12345&lt;StackPanel Orientation=&quot;Horizontal&quot;&gt; &lt;Button Style=&quot;&#123;StaticResource ButtonDefault&#125;&quot; Content=&quot;This is a button&quot;/&gt; &lt;Button Style=&quot;&#123;StaticResource ButtonDefault&#125;&quot; Content=&quot;This is a button&quot; Margin=&quot;10,0,0,0&quot; controls:BorderElement.CornerRadius=&quot;15&quot;/&gt; &lt;Button Style=&quot;&#123;StaticResource ButtonDefault&#125;&quot; Content=&quot;This is a button&quot; Margin=&quot;10,0,0,0&quot; controls:IconElement.Geometry=&quot;&#123;StaticResource GithubGeometry&#125;&quot;/&gt;&lt;/StackPanel&gt; ButtonIcon : ButtonBaseStyleThis style is recommended if you only want to display the geometry button. Example：12345&lt;StackPanel Orientation=&quot;Horizontal&quot;&gt; &lt;Button Style=&quot;&#123;StaticResource ButtonIcon&#125;&quot; Foreground=&quot;Black&quot; controls:IconElement.Geometry=&quot;&#123;StaticResource UpDownGeometry&#125;&quot;/&gt; &lt;Button Style=&quot;&#123;StaticResource ButtonIcon&#125;&quot; Background=&quot;Black&quot; Foreground=&quot;White&quot; controls:BorderElement.CornerRadius=&quot;15&quot; controls:IconElement.Geometry=&quot;&#123;StaticResource UpDownGeometry&#125;&quot; Margin=&quot;10,0,0,0&quot;/&gt; &lt;Button Style=&quot;&#123;StaticResource ButtonIcon&#125;&quot; BorderThickness=&quot;1&quot; BorderBrush=&quot;Black&quot; Foreground=&quot;Black&quot; controls:IconElement.Geometry=&quot;&#123;StaticResource UpDownGeometry&#125;&quot; Margin=&quot;10,0,0,0&quot;/&gt;&lt;/StackPanel&gt; ButtonCustomThis style is recommended if you want to fully customize the content of the button. The content in ButtonCustom is entirely up to you. In addition, you can switch the background with additional properties in BackgroundSwitchElement: Example：1&lt;Button Height=&quot;30&quot; Padding=&quot;10,0&quot; Background=&quot;Black&quot; Foreground=&quot;White&quot; Content=&quot;This is a button&quot; Style=&quot;&#123;StaticResource ButtonCustom&#125;&quot; controls:BackgroundSwitchElement.MouseHoverBackground=&quot;Red&quot; controls:BackgroundSwitchElement.MouseDownBackground=&quot;PaleVioletRed&quot;/&gt; Styles Style ButtonPrimary ButtonInfo ButtonDanger ButtonWarning ButtonViolet (Only Custom Version) ButtonDefault (Only Custom Version) ButtonSuccess ButtonIcon ButtonIconCircular ButtonDashed ButtonDashedPrimary ButtonDashedSuccess ButtonDashedInfo ButtonDashedWarning ButtonDashedDanger ButtonCustom ButtonGroupItemDefault ButtonGroupItemHorizontalFirst ButtonGroupItemHorizontalLast ButtonGroupItemSingle ButtonGroupItemVerticalFirst ButtonGroupItemVerticalLast]]></content>
  </entry>
  <entry>
    <title><![CDATA[Calendar]]></title>
    <url>%2Fhandycontrol%2Fnative_controls%2Fcalendar%2Findex.html</url>
    <content type="text"><![CDATA[CalendarBaseStyleThe default style of the calendar is not recommended for direct use and should always be used by other styles in the BasedOn mode. Example：1&lt;Calendar/&gt; you can change calendar ui culture:1ConfigHelper.Instance.SetLang(&quot;en&quot;);]]></content>
  </entry>
  <entry>
    <title><![CDATA[CheckBox]]></title>
    <url>%2Fhandycontrol%2Fnative_controls%2FcheckBox%2Findex.html</url>
    <content type="text"><![CDATA[CheckBoxBaseStyleThe default style of the checkbox is not recommended for direct use and should always be used by other styles in the BasedOn mode. Example：12345678&lt;StackPanel&gt; &lt;CheckBox Content=&quot;CheckBox&quot; IsChecked=&quot;True&quot;/&gt; &lt;CheckBox Margin=&quot;0,16,0,0&quot; Content=&quot;CheckBox&quot; IsChecked=&quot;True&quot; IsEnabled=&quot;False&quot;/&gt; &lt;CheckBox Margin=&quot;0,16,0,0&quot; Content=&quot;CheckBox&quot;/&gt; &lt;CheckBox Margin=&quot;0,16,0,0&quot; Content=&quot;CheckBox&quot; IsEnabled=&quot;False&quot;/&gt; &lt;CheckBox Margin=&quot;0,16,0,0&quot; Content=&quot;CheckBox&quot; IsChecked=&quot;&#123;x:Null&#125;&quot;/&gt; &lt;CheckBox Margin=&quot;0,16,0,0&quot; Content=&quot;CheckBox&quot; IsChecked=&quot;&#123;x:Null&#125;&quot; IsEnabled=&quot;False&quot;/&gt;&lt;/StackPanel&gt;]]></content>
  </entry>
  <entry>
    <title><![CDATA[ComboBox]]></title>
    <url>%2Fhandycontrol%2Fnative_controls%2FcomboBox%2Findex.html</url>
    <content type="text"><![CDATA[ComboBoxBaseStyleThe default style of the original combo box is not recommended for direct use. It should always be used by other styles in the BasedOn method. Native combo box uses this style by default if no style is set: Default style&lt;ComboBox ItemsSource=&quot;{Binding DataList}&quot; SelectedIndex=&quot;0&quot;/&gt; ComboBoxExtendBaseStyle : ComboBoxBaseStyleThe native combo box extends the default style and is not recommended for direct use. It should always be used by other styles in the BasedOn method. ComboBoxExtend : ComboBoxExtendBaseStyleRelative to the default style of the original combo box, it can implement the function of title and watermark by means of additional attributes. Heading on&lt;ComboBox ItemsSource=&quot;{Binding DataList}&quot; SelectedIndex=&quot;0&quot; hc:InfoElement.Title=&quot;This is the title&quot; Style=&quot;{StaticResource ComboBoxExtend}&quot; Text=&quot;Body 1&quot;/&gt; Heading left&lt;ComboBox ItemsSource=&quot;{Binding DataList}&quot; Width=&quot;380&quot; hc:InfoElement.TitleWidth=&quot;140&quot; hc:InfoElement.TitlePlacement=&quot;Left&quot; hc:InfoElement.Title=&quot;Heading on the left&quot; Style=&quot;{StaticResource ComboBoxExtend}&quot; Text=&quot;Body 1&quot;/&gt; When the title is on the left, in order to align the left side of multiple input boxes, you need to set the title width. The title width does not need to be set one by one, and can be set uniformly on the external container. common problem:The font of Combobox is larger than the original default font, and the title is set to the left, and the title is incomplete due to the font size.solution:Add the additional attribute hc:InfoElement.ContentHeight to the Combobox. The default value is 30. The default font number is 12. After the change, the value of the additional attribute can be set according to the new font size. As shown above, the font size is 18. Then set hc:InfoElement.ContentHeight to 38 and the result is as follows: Heading on, with watermark&lt;ComboBox ItemsSource=&quot;{Binding DataList}&quot; hc:InfoElement.Placeholder=&quot;Please enter the content&quot; hc:InfoElement.Title=&quot;This field is required&quot; Style=&quot;{StaticResource ComboBoxExtend}&quot;/&gt; Title is on, with watermark, and is required&lt;ComboBox ItemsSource=&quot;{Binding DataList}&quot; hc:InfoElement.Placeholder=&quot;Please enter the content&quot; hc:InfoElement.Title=&quot;This field is required&quot; Style=&quot;{StaticResource ComboBoxExtend}&quot; hc:InfoElement.Necessary=&quot;True&quot;/&gt; The title is on, with a watermark, and is required, and a custom required prompt&lt;ComboBox ItemsSource=&quot;{Binding DataList}&quot; hc:InfoElement.Placeholder=&quot;Please enter the content&quot; hc:InfoElement.Title=&quot;This field is required&quot; Style=&quot;{StaticResource ComboBoxExtend}&quot; hc:InfoElement.Necessary=&quot;True&quot; hc:InfoElement.Symbol=&quot;*&quot;/&gt; To use Attached Properties (InfoElement), you should set Style to ComboBoxExtend]]></content>
  </entry>
  <entry>
    <title><![CDATA[ContentControl]]></title>
    <url>%2Fhandycontrol%2Fnative_controls%2FcontentControl%2Findex.html</url>
    <content type="text"><![CDATA[All ContentControl cannot get focus by default]]></content>
  </entry>
  <entry>
    <title><![CDATA[ContextMenu]]></title>
    <url>%2Fhandycontrol%2Fnative_controls%2FcontextMenu%2Findex.html</url>
    <content type="text"><![CDATA[ContextMenuBaseStyleThe default style of the context menu is not recommended for direct use and should always be used by other styles in the BasedOn mode. Example：1234567&lt;ContextMenu ItemsSource=&quot;&#123;Binding DataList&#125;&quot;&gt; &lt;ContextMenu.ItemTemplate&gt; &lt;HierarchicalDataTemplate ItemsSource=&quot;&#123;Binding DataList&#125;&quot;&gt; &lt;TextBlock Text=&quot;&#123;Binding Name&#125;&quot;/&gt; &lt;/HierarchicalDataTemplate&gt; &lt;/ContextMenu.ItemTemplate&gt;&lt;/ContextMenu&gt;]]></content>
  </entry>
  <entry>
    <title><![CDATA[DataGrid]]></title>
    <url>%2Fhandycontrol%2Fnative_controls%2FdataGrid%2Findex.html</url>
    <content type="text"><![CDATA[Style Name Type Description RowHeaderGripperStyle Thumb Row Header Drag Strip Style ColumnHeaderGripperStyle Thumb Column Header Drag Style DataGridCellStyle DataGridCell Cell Style DataGridRowStyle DataGridRow Line Style DataGridColumnHeaderStyle DataGridColumnHeader Column Header Style DataGridRowHeaderStyle DataGridRowHeader Row Header Style TextBlockComboBoxStyle ComboBox ComboBox Non-Edit Mode Style DataGridTextColumnStyle TextBlock Default Text Style Example：123456789101112131415161718192021&lt;DataGrid HeadersVisibility=&quot;All&quot; RowHeaderWidth=&quot;60&quot; AutoGenerateColumns=&quot;False&quot; ItemsSource=&quot;&#123;Binding DataList&#125;&quot;&gt; &lt;DataGrid.RowHeaderTemplate&gt; &lt;DataTemplate&gt; &lt;CheckBox IsChecked=&quot;&#123;Binding IsSelected,RelativeSource=&#123;RelativeSource AncestorType=DataGridRow&#125;&#125;&quot;/&gt; &lt;/DataTemplate&gt; &lt;/DataGrid.RowHeaderTemplate&gt; &lt;DataGrid.Columns&gt; &lt;DataGridTextColumn IsReadOnly=&quot;True&quot; Width=&quot;80&quot; CanUserResize=&quot;False&quot; Binding=&quot;&#123;Binding Index&#125;&quot; Header=&quot;&#123;x:Static langs:Lang.Index&#125;&quot;/&gt; &lt;DataGridTemplateColumn Width=&quot;60&quot; CanUserResize=&quot;False&quot;&gt; &lt;DataGridTemplateColumn.CellTemplate&gt; &lt;DataTemplate&gt; &lt;Image Source=&quot;&#123;Binding ImgPath&#125;&quot; Width=&quot;32&quot; Height=&quot;32&quot; Stretch=&quot;Uniform&quot;/&gt; &lt;/DataTemplate&gt; &lt;/DataGridTemplateColumn.CellTemplate&gt; &lt;/DataGridTemplateColumn&gt; &lt;DataGridTextColumn Width=&quot;1&quot; Binding=&quot;&#123;Binding Name&#125;&quot; Header=&quot;&#123;x:Static langs:Lang.Name&#125;&quot;/&gt; &lt;DataGridCheckBoxColumn Width=&quot;100&quot; CanUserResize=&quot;False&quot; Binding=&quot;&#123;Binding IsSelected&#125;&quot; Header=&quot;&#123;x:Static langs:Lang.Selected&#125;&quot;/&gt; &lt;DataGridComboBoxColumn ItemsSource=&quot;&#123;Binding Source=&#123;StaticResource DemoTypes&#125;&#125;&quot; Width=&quot;100&quot; CanUserResize=&quot;False&quot; SelectedValueBinding=&quot;&#123;Binding Type&#125;&quot; Header=&quot;&#123;x:Static langs:Lang.Type&#125;&quot;/&gt; &lt;DataGridTextColumn Width=&quot;1&quot; Binding=&quot;&#123;Binding Remark&#125;&quot; Header=&quot;&#123;x:Static langs:Lang.Remark&#125;&quot;/&gt; &lt;/DataGrid.Columns&gt;&lt;/DataGrid&gt; FAQ For the text display column DataGridTextColumn, you need to set the text content horizontal centered or horizontal right&#39;, instead of the default style set in HandyControl asleft left, you need to inherit theDataGridCellStyleoverrideHorizontalContentAlignmentattribute. ForCenterorRight`, it should be noted that this method is only applicable to projects that have introduced the HandControl resource style. This is not valid for normal native DataGrids. Use for example: 123456789101112131415style:&lt;Style x:Key=&quot;DataGridTextCenterColumnStyle&quot; TargetType=&quot;DataGridCell&quot; BasedOn=&quot;&#123;StaticResource DataGridCellStyle&#125;&quot;&gt; &lt;Setter Property=&quot;HorizontalContentAlignment&quot; Value=&quot;Center&quot;/&gt;&lt;/Style&gt;Use in xaml:&lt;DataGrid ItemsSource=&quot;&#123;Binding Datas&#125;&quot; AutoGenerateColumns=&quot;False&quot;&gt; &lt;DataGrid.Columns&gt; &lt;DataGridTextColumn Header=&quot;Left&quot; Binding=&quot;&#123;Binding Name&#125;&quot; Width=&quot;*&quot;/&gt; &lt;DataGridTextColumn Header=&quot;Centered&quot; CellStyle=&quot;&#123;StaticResource DataGridTextCenterColumnStyle&#125;&quot; Width=&quot;*&quot; Binding=&quot;&#123;Binding Name&#125;&quot;/&gt;​ &lt;/DataGrid.Columns&gt;&lt;/DataGrid&gt; The effect is as follows: if you want to generate row numbers you should use DataGridAttach Attached Property.First Remove DataGrid.RowHeaderTemplate Then add this Attached Property1&lt;DataGrid hc:DataGridAttach.ShowRowNumber=&quot;True&quot;/&gt;]]></content>
  </entry>
  <entry>
    <title><![CDATA[DatePicker]]></title>
    <url>%2Fhandycontrol%2Fnative_controls%2FdatePicker%2Findex.html</url>
    <content type="text"><![CDATA[DatePickerBaseStyleNative datepicker default style, not recommended for direct use, should always be used by other styles in the BasedOn mode. The native datepicker uses this style by default if no style is set: Default style&lt;DatePicker SelectedDate=&quot;{x:Static system:DateTime.Now}&quot;/&gt; DatePickerExtendBaseStyle : DatePickerBaseStyleThe native datepicker extends the default style and is not recommended for direct use. It should always be used by other styles in the BasedOn mode. DatePickerExtend : DatePickerExtendBaseStyle Heading on&lt;DatePicker SelectedDate=&quot;{x:Static system:DateTime.Now}&quot; Style=&quot;{StaticResource DatePickerExtend}&quot; hc:InfoElement.Title=&quot;This is the title&quot;/&gt; Heading left&lt;DatePicker SelectedDate=&quot;{x:Static system:DateTime.Now}&quot; Width=&quot;380&quot; hc:InfoElement.TitleWidth=&quot;140&quot; hc:InfoElement.TitlePlacement=&quot;Left&quot; Style=&quot;{StaticResource DatePickerExtend}&quot; hc:InfoElement.Title=&quot;Heading on the left&quot;/&gt; When the title is on the left, in order to align the left side of multiple input boxes, you need to set the title width. The title width does not need to be set one by one, and can be set uniformly on the external container. Heading on, with watermarkSee Combobox Title is on, with watermark, and is requiredSee Combobox The title is on, with a watermark, and is required, and a custom required promptSee Combobox you can change datepicker ui culture:1ConfigHelper.Instance.SetLang(&quot;en&quot;); To use Attached Properties (InfoElement), you should set Style to DatePickerExtend]]></content>
  </entry>
  <entry>
    <title><![CDATA[Expander]]></title>
    <url>%2Fhandycontrol%2Fnative_controls%2Fexpander%2Findex.html</url>
    <content type="text"><![CDATA[ExpanderBaseStyleExpander Expand Box The default style, which is not recommended for direct use, should always be used by other styles in the BasedOn method. Example:1234567891011121314&lt;StackPanel Margin=&quot;32&quot; VerticalAlignment=&quot;Center&quot; Width=&quot;240&quot;&gt; &lt;Expander Header=&quot;&#123;x:Static langs:Lang.Title&#125;&quot; BorderThickness=&quot;1,1,1,0&quot; BorderBrush=&quot;&#123;DynamicResource BorderBrush&#125;&quot;&gt; &lt;Border Height=&quot;100&quot; Background=&quot;&#123;DynamicResource SecondaryRegionBrush&#125;&quot;/&gt; &lt;/Expander&gt; &lt;Expander Header=&quot;&#123;x:Static langs:Lang.Title&#125;&quot; BorderThickness=&quot;1,1,1,0&quot; BorderBrush=&quot;&#123;DynamicResource BorderBrush&#125;&quot;&gt; &lt;Border Height=&quot;100&quot; Background=&quot;&#123;DynamicResource SecondaryRegionBrush&#125;&quot;/&gt; &lt;/Expander&gt; &lt;Expander Header=&quot;&#123;x:Static langs:Lang.Title&#125;&quot; BorderThickness=&quot;1,1,1,0&quot; BorderBrush=&quot;&#123;DynamicResource BorderBrush&#125;&quot;&gt; &lt;Border Height=&quot;100&quot; Background=&quot;&#123;DynamicResource SecondaryRegionBrush&#125;&quot;/&gt; &lt;/Expander&gt; &lt;Expander Header=&quot;&#123;x:Static langs:Lang.Title&#125;&quot; BorderThickness=&quot;1&quot; BorderBrush=&quot;&#123;DynamicResource BorderBrush&#125;&quot;&gt; &lt;Border Height=&quot;100&quot; Background=&quot;&#123;DynamicResource SecondaryRegionBrush&#125;&quot;/&gt; &lt;/Expander&gt;&lt;/StackPanel&gt;]]></content>
  </entry>
  <entry>
    <title><![CDATA[FlowDocument]]></title>
    <url>%2Fhandycontrol%2Fnative_controls%2FflowDocument%2Findex.html</url>
    <content type="text"><![CDATA[FlowDocumentScrollViewerBaseStyleThe default style of the scrolling view of the stream document is not recommended. It should always be used by other styles as the BaseOn method. Case: 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293&lt;FlowDocumentScrollViewer IsToolBarVisible="True" Width="502" Height="400" Margin="32"&gt; &lt;FlowDocument ColumnWidth="400" IsOptimalParagraphEnabled="True" IsHyphenationEnabled="True"&gt; &lt;Section FontSize="12"&gt; &lt;Paragraph&gt; &lt;Bold&gt;Neptune&lt;/Bold&gt; (planet), major planet in the solar system, eighth planet from the Sun and fourth largest in diameter. Neptune maintains an almost constant distance, about 4,490 million km (about 2,790 million mi), from the Sun. Neptune revolves outside the orbit of Uranus and for most of its orbit moves inside the elliptical path of the outermost planet Pluto (see Solar System). Every 248 years, Pluto’s elliptical orbit brings the planet inside Neptune’s nearly circular orbit for about 20 years, temporarily making Neptune the farthest planet from the Sun. The last time Pluto’s orbit brought it inside Neptune’s orbit was in 1979. In 1999 Pluto’s orbit carried it back outside Neptune’s orbit. &lt;Figure Width="140" Height="50" Background="GhostWhite" HorizontalAnchor="PageLeft" HorizontalOffset="100" VerticalOffset="20"&gt; &lt;Paragraph FontStyle="Italic" TextAlignment="Left" Background="Beige" Foreground="DarkGreen"&gt; Neptune has 72 times Earth's volume... &lt;/Paragraph&gt; &lt;/Figure&gt; &lt;Floater Background="GhostWhite" Width="285" HorizontalAlignment="Left"&gt; &lt;Table CellSpacing="5"&gt; &lt;Table.Columns&gt; &lt;TableColumn Width="155"/&gt; &lt;TableColumn Width="130"/&gt; &lt;/Table.Columns&gt; &lt;TableRowGroup&gt; &lt;TableRow&gt; &lt;TableCell ColumnSpan="3"&gt; &lt;Paragraph&gt;Neptune Stats&lt;/Paragraph&gt; &lt;/TableCell&gt; &lt;/TableRow&gt; &lt;TableRow Background="LightGoldenrodYellow" FontSize="12"&gt; &lt;TableCell&gt; &lt;Paragraph FontWeight="Bold"&gt;Mean Distance from Sun&lt;/Paragraph&gt; &lt;/TableCell&gt; &lt;TableCell&gt; &lt;Paragraph&gt;4,504,000,000 km&lt;/Paragraph&gt; &lt;/TableCell&gt; &lt;/TableRow&gt; &lt;TableRow FontSize="12" Background="LightGray"&gt; &lt;TableCell&gt; &lt;Paragraph FontWeight="Bold"&gt;Mean Diameter&lt;/Paragraph&gt; &lt;/TableCell&gt; &lt;TableCell&gt; &lt;Paragraph&gt;49,532 km&lt;/Paragraph&gt; &lt;/TableCell&gt; &lt;/TableRow&gt; &lt;TableRow Background="LightGoldenrodYellow" FontSize="12"&gt; &lt;TableCell&gt; &lt;Paragraph FontWeight="Bold"&gt;Approximate Mass&lt;/Paragraph&gt; &lt;/TableCell&gt; &lt;TableCell&gt; &lt;Paragraph&gt;1.0247e26 kg&lt;/Paragraph&gt; &lt;/TableCell&gt; &lt;/TableRow&gt; &lt;TableRow&gt; &lt;TableCell ColumnSpan="4"&gt; &lt;Paragraph FontSize="10" FontStyle="Italic"&gt; Information from the &lt;Hyperlink NavigateUri="http://encarta.msn.com/encnet/refpages/artcenter.aspx"&gt;Encarta&lt;/Hyperlink&gt; web site. &lt;/Paragraph&gt; &lt;/TableCell&gt; &lt;/TableRow&gt; &lt;/TableRowGroup&gt; &lt;/Table&gt; &lt;/Floater&gt; &lt;/Paragraph&gt; &lt;Paragraph&gt; Astronomers believe Neptune has an inner rocky core that is surrounded by a vast ocean of water mixed with rocky material. From the inner core, this ocean extends upward until it meets a gaseous atmosphere of hydrogen, helium, and trace amounts of methane. Neptune has four rings and 11 known moons. Even though Neptune's volume is 72 times Earth’s volume, its mass is only 17.15 times Earth’s mass. Because of its size, scientists classify Neptune—along with Jupiter, Saturn, and Uranus—as one of the giant or Jovian planets (so-called because they resemble Jupiter). &lt;/Paragraph&gt; &lt;Paragraph&gt; &lt;Figure Width="140" Height="50" Background="GhostWhite" TextAlignment="Left" HorizontalAnchor="PageCenter" WrapDirection="Both"&gt; &lt;Paragraph FontStyle="Italic" Background="Beige" Foreground="DarkGreen" &gt; Neptune has an orbital period of ~20 years... &lt;/Paragraph&gt; &lt;/Figure&gt; Mathematical theories of astronomy led to the discovery of Neptune. To account for wobbles in the orbit of the planet Uranus, British astronomer John Couch Adams and French astronomer Urbain Jean Joseph Leverrier independently calculated the existence and position of a new planet in 1845 and 1846, respectively. They theorized that the gravitational attraction of this planet for Uranus was causing the wobbles in Uranus’s orbit. Using information from Leverrier, German astronomer Johann Gottfried Galle first observed the planet in 1846. &lt;/Paragraph&gt; &lt;/Section&gt; &lt;/FlowDocument&gt; &lt;/FlowDocumentScrollViewer&gt; effect: FlowDocumentPageViewerBaseStyleThe default style of the single page view of the stream document is not recommended. It should always be used by other styles as the BaseOn method. FlowDocumentReaderBaseStyleThe default style of the Streaming Document Viewer is not recommended. It should always be used by other styles as BasedOn.]]></content>
  </entry>
  <entry>
    <title><![CDATA[GroupBox]]></title>
    <url>%2Fhandycontrol%2Fnative_controls%2FgroupBox%2Findex.html</url>
    <content type="text"><![CDATA[GroupBoxBaseStyleThe default style of the GroupBox. It is not recommended to use it directly, and it should always be used by other styles as BasedOn. Example:1234567 &lt;GroupBox Grid.Row = &quot;0&quot; Grid.Column = &quot;0&quot; Width = &quot;300&quot; Height = &quot;200&quot; Header = &quot;&#123;x: Static langs: Lang.TitleDemoStr1&#125;&quot; Padding = &quot;10&quot; Margin = &quot;16&quot;&gt; &lt;Border Background = &quot;&#123;DynamicResource PrimaryBrush&#125;&quot; CornerRadius = &quot;4&quot;&gt; &lt;TextBlock Text = &quot;&#123;x: Static langs: Lang.ContentDemoStr&#125;&quot; VerticalAlignment = &quot;Center&quot; HorizontalAlignment = &quot;Center&quot; Foreground = &quot;White&quot; /&gt; &lt;/ Border&gt; &lt;/ GroupBox&gt; Here is another style for developers to choose Just add extended attributes1hc:TitleElement.TitlePlacement=&quot;Left&quot;Example:1234567&lt;GroupBox Grid.Row=&quot;0&quot; Grid.Column=&quot;1&quot; Width=&quot;300&quot; Height=&quot;200&quot; Header=&quot;&#123;x:Static langs:Lang.TitleDemoStr1&#125;&quot; Padding=&quot;10&quot; Margin=&quot;16&quot; hc:TitleElement.TitlePlacement=&quot;Left&quot;&gt; &lt;Border Background=&quot;&#123;DynamicResource PrimaryBrush&#125;&quot; CornerRadius=&quot;4&quot;&gt; &lt;TextBlock Text=&quot;&#123;x:Static langs:Lang.ContentDemoStr&#125;&quot; VerticalAlignment=&quot;Center&quot; HorizontalAlignment=&quot;Center&quot; Foreground=&quot;White&quot;/&gt; &lt;/Border&gt;&lt;/GroupBox&gt; GroupBoxTab : GroupBoxTabBaseStyle : GroupBoxBaseStyleAnother style of GroupBox is GroupBoxTabBaseStyle which is not recommended to be used directly, and should always be used by other styles as BasedOn. Example:1234567&lt;GroupBox Grid.Row=&quot;1&quot; Grid.Column=&quot;0&quot; Width=&quot;300&quot; Height=&quot;200&quot; Header=&quot;&#123;x:Static langs:Lang.TitleDemoStr1&#125;&quot; Padding=&quot;10&quot; Margin=&quot;16&quot; Style=&quot;&#123;StaticResource GroupBoxTab&#125;&quot;&gt; &lt;Border Background=&quot;&#123;DynamicResource PrimaryBrush&#125;&quot; CornerRadius=&quot;4&quot;&gt; &lt;TextBlock Text=&quot;&#123;x:Static langs:Lang.ContentDemoStr&#125;&quot; VerticalAlignment=&quot;Center&quot; HorizontalAlignment=&quot;Center&quot; Foreground=&quot;White&quot;/&gt; &lt;/Border&gt;&lt;/GroupBox&gt;You can also use extended attributes 1hc:TitleElement.TitlePlacement=&quot;Left&quot; GroupBoxOriginal : GroupBoxOriginalBaseStyle : GroupBoxBaseStyleAnother style of GroupBox is GroupBoxOriginalBaseStyle which is not recommended to be used directly, it should always be used by other styles in the way of BasedOn. example:123456789&lt;GroupBox Grid.Row=&quot;2&quot; Grid.Column=&quot;0&quot; Width=&quot;300&quot; Header=&quot;&#123;x:Static langs:Lang.TitleDemoStr1&#125;&quot; Margin=&quot;16&quot; Style=&quot;&#123;StaticResource GroupBoxOriginal&#125;&quot; HorizontalContentAlignment=&quot;Left&quot;&gt; &lt;TextBox/&gt;&lt;/GroupBox&gt;&lt;GroupBox Grid.Row=&quot;2&quot; VerticalAlignment=&quot;Bottom&quot; Grid.Column=&quot;1&quot; Width=&quot;300&quot; hc:TitleElement.TitleWidth=&quot;100&quot; Header=&quot;&#123;x:Static langs:Lang.TitleDemoStr1&#125;&quot; Margin=&quot;16&quot; Style=&quot;&#123;StaticResource GroupBoxOriginal&#125;&quot; HorizontalContentAlignment=&quot;Left&quot; hc:TitleElement.TitlePlacement=&quot;Left&quot;&gt; &lt;ComboBox DataContext=&quot;&#123;Binding ComboBoxDemo,Source=&#123;StaticResource Locator&#125;&#125;&quot; ItemsSource=&quot;&#123;Binding DataList&#125;&quot;/&gt;&lt;/GroupBox&gt;]]></content>
  </entry>
  <entry>
    <title><![CDATA[Frame]]></title>
    <url>%2Fhandycontrol%2Fnative_controls%2Fframe%2Findex.html</url>
    <content type="text"><![CDATA[FrameBaseStyleThe default style of the navigation framework is not recommended. It should always be used by other styles in the manner of BasedOn. Case: 1&lt;Frame Margin="32" Width="500" Height="360" Name="FrameDemo" NavigationUIVisibility="Visible"/&gt; effect:]]></content>
  </entry>
  <entry>
    <title><![CDATA[Image]]></title>
    <url>%2Fhandycontrol%2Fnative_controls%2Fimage%2Findex.html</url>
    <content type="text"><![CDATA[In HandyControl, corresponding to the nativeImage control, only a default control style is provided, and no special style is provided. For personalized customization, users need to customize it themselves Example:1234&lt;StackPanel Background=&quot;LightGray&quot;&gt; &lt;Image Source=&quot;Resources/Images/Image_basestyle.png&quot; Margin=&quot;0,10&quot;&gt;&lt;/Image&gt; &lt;Image Source=&quot;Resources/Images/Image_basestyle.png&quot; RenderOptions.BitmapScalingMode=&quot;HighQuality&quot; Stretch=&quot;Uniform&quot;&gt;&lt;/Image&gt;&lt;/StackPanel&gt;]]></content>
  </entry>
  <entry>
    <title><![CDATA[Lable]]></title>
    <url>%2Fhandycontrol%2Fnative_controls%2Flabel%2Findex.html</url>
    <content type="text"><![CDATA[LabelBaseStyleThe default style of the Label. which is not recommended. It should always be used by other styles based on On. Example：1&lt;Label Content=&quot;Label default style&quot; Margin=&quot;10&quot;&gt;&lt;/Label&gt; LabelPrimary : LabelBaseStylePrimary style: Example：1&lt;Label Content=&quot;LabelPrimary style&quot; Margin=&quot;10&quot; Style=&quot;&#123;DynamicResource LabelPrimary&#125;&quot;&gt;&lt;/Label&gt; LabelSuccess : LabelBaseStyleSuccess type style Example：1&lt;Label Content=&quot;LabelSuccess style&quot; Margin=&quot;10&quot; Style=&quot;&#123;DynamicResource LabelSuccess&#125;&quot;&gt;&lt;/Label&gt; LabelInfo : LabelBaseStyleInformation type style Example：1&lt;Label Content=&quot;LabelInfo style&quot; Margin=&quot;10&quot; Style=&quot;&#123;DynamicResource LabelInfo&#125;&quot;&gt;&lt;/Label&gt; LabelWarning : LabelBaseStyleWarning type style Example：1&lt;Label Content=&quot;LabelWarning style&quot; Margin=&quot;10&quot; Style=&quot;&#123;DynamicResource LabelWarning&#125;&quot;&gt;&lt;/Label&gt; LabelDanger : LabelBaseStyleDanger type style Example：1&lt;Label Content=&quot;LabelDanger style&quot; Margin=&quot;10&quot; Style=&quot;&#123;DynamicResource LabelDanger&#125;&quot;&gt;&lt;/Label&gt; LabelViolet : LabelBaseStyleViolet type style Only Custom Version Example：1&lt;Label Content=&quot;LabelViolet style&quot; Margin=&quot;10&quot; Style=&quot;&#123;DynamicResource LabelViolet&#125;&quot;&gt;&lt;/Label&gt; LabelDefault : LabelBaseStyleDefault type style Only Custom Version Example：1&lt;Label Content=&quot;LabelDefault style&quot; Margin=&quot;10&quot; Style=&quot;&#123;DynamicResource LabelDefault&#125;&quot;&gt;&lt;/Label&gt;]]></content>
  </entry>
  <entry>
    <title><![CDATA[ListView]]></title>
    <url>%2Fhandycontrol%2Fnative_controls%2FlistView%2Findex.html</url>
    <content type="text"><![CDATA[HandyControl only provides a default ListView style, which can be customized according to personal needs. Example：123456789&lt;ListView ItemsSource=&quot;&#123;Binding DataList&#125;&quot; Margin=&quot;20&quot;&gt; &lt;ListView.View&gt; &lt;GridView&gt; &lt;GridViewColumn Width=&quot;80&quot; Header=&quot;title1&quot; DisplayMemberBinding=&quot;&#123;Binding Index&#125;&quot;/&gt; &lt;GridViewColumn Width=&quot;100&quot; Header=&quot;title2&quot; DisplayMemberBinding=&quot;&#123;Binding Name&#125;&quot;/&gt; &lt;GridViewColumn Width=&quot;200&quot; Header=&quot;title3&quot; DisplayMemberBinding=&quot;&#123;Binding Remark&#125;&quot;/&gt; &lt;/GridView&gt; &lt;/ListView.View&gt;&lt;/ListView&gt;]]></content>
  </entry>
  <entry>
    <title><![CDATA[Menu]]></title>
    <url>%2Fhandycontrol%2Fnative_controls%2Fmenu%2Findex.html</url>
    <content type="text"><![CDATA[MenuBaseStyleThe default style of the menu is not recommended. It should always be used by other styles in the manner of BasedOn. example:1234567 &lt;Menu ItemsSource=&quot;&#123;Binding Menus&#125;&quot;&gt; &lt;Menu.ItemTemplate&gt; &lt;HierarchicalDataTemplate ItemsSource=&quot;&#123;Binding Children&#125;&quot;&gt; &lt;TextBlock Text=&quot;&#123;Binding Name&#125;&quot;&gt;&lt;/TextBlock&gt; &lt;/HierarchicalDataTemplate&gt; &lt;/Menu.ItemTemplate&gt;&lt;/Menu&gt;]]></content>
  </entry>
  <entry>
    <title><![CDATA[ListBox]]></title>
    <url>%2Fhandycontrol%2Fnative_controls%2FlistBox%2Findex.html</url>
    <content type="text"><![CDATA[Attached Property Properties Description IsOddEvenRow Change Listbox Item Background based on odd and even row Only Custom Version IsNew Add New Label next to the text Only Custom Version Geometry Change IsNew Geometry Only Custom Version GeoemtryBrush Change Geometry Brush Only Custom Version Width Change Geometry Width Only Custom Version Height Change Geometry Height Only Custom Version ListBoxBaseStyle ListBox default style is not recommended to use directly, it should always be used by other styles in BasedOn mode. Example：1 &lt;ListBox hc:ListBoxAttach.IsOddEvenRow=&quot;True&quot; AlternationCount=&quot;2&quot;/&gt; Example：1 &lt;Style BasedOn = &quot;&#123;StaticResource ListBoxBaseStyle&#125;&quot; TargetType = &quot;ListBox&quot; /&gt; ListBoxCustom : ListBoxBaseStyleListBox ListCustomstyle, which retains the basic attribute style of the Listbox, and the data display style is customized by the current user to achieve personalized customization. Example：12345678910111213&lt;ListBox Margin=&quot;10&quot; ItemsSource=&quot;&#123;Binding Datas&#125;&quot; Style=&quot;&#123;DynamicResource ListBoxCustom&#125;&quot;&gt; &lt;ListBox.ItemTemplate&gt; &lt;DataTemplate&gt; &lt;Border BorderThickness=&quot;1&quot; BorderBrush=&quot;Black&quot; Margin=&quot;0,5&quot;&gt; &lt;DockPanel LastChildFill=&quot;True&quot;&gt; &lt;Path DockPanel.Dock=&quot;Left&quot; Fill=&quot;YellowGreen&quot; Width=&quot;20&quot; Margin=&quot;10,0,10,0&quot; HorizontalAlignment=&quot;Center&quot; Data=&quot;&#123;DynamicResource BubbleTailGeometry&#125;&quot;&gt;&lt;/Path&gt; &lt;TextBlock Padding=&quot;10&quot; Text=&quot;&#123;Binding Name&#125;&quot;&gt;&lt;/TextBlock&gt; &lt;/DockPanel&gt; &lt;/Border&gt; &lt;/DataTemplate&gt; &lt;/ListBox.ItemTemplate&gt;&lt;/ListBox&gt; WrapPanelHorizontalListBox : ListBoxCustomThe layout container is WrapPanel, and the display style is horizontal. Example：12345678910111213&lt;ListBox Margin=&quot;10&quot; ItemsSource=&quot;&#123;Binding Datas&#125;&quot; Style=&quot;&#123;DynamicResource WrapPanelHorizontalListBox&#125;&quot;&gt; &lt;ListBox.ItemTemplate&gt; &lt;DataTemplate&gt; &lt;Border BorderThickness=&quot;1&quot; BorderBrush=&quot;Black&quot; Margin=&quot;5,0&quot;&gt; &lt;DockPanel LastChildFill=&quot;True&quot;&gt; &lt;Path DockPanel.Dock=&quot;Left&quot; Fill=&quot;YellowGreen&quot; Width=&quot;20&quot; Margin=&quot;10,0,10,0&quot; HorizontalAlignment=&quot;Center&quot; Data=&quot;&#123;DynamicResource BubbleTailGeometry&#125;&quot;&gt;&lt;/Path&gt; &lt;TextBlock Padding=&quot;10&quot; Text=&quot;&#123;Binding Name&#125;&quot;&gt;&lt;/TextBlock&gt; &lt;/DockPanel&gt; &lt;/Border&gt; &lt;/DataTemplate&gt; &lt;/ListBox.ItemTemplate&gt;&lt;/ListBox&gt; WrapPanelVerticalListBox : ListBoxCustomThe layout container is WrapPanel, and the display style is vertical. Example：12345678910111213&lt;ListBox Margin=&quot;10&quot; ItemsSource=&quot;&#123;Binding Datas&#125;&quot; Style=&quot;&#123;DynamicResource WrapPanelVerticalListBox&#125;&quot;&gt; &lt;ListBox.ItemTemplate&gt; &lt;DataTemplate&gt; &lt;Border BorderThickness=&quot;1&quot; BorderBrush=&quot;Black&quot; Margin=&quot;0,5&quot;&gt; &lt;DockPanel LastChildFill=&quot;True&quot;&gt; &lt;Path DockPanel.Dock=&quot;Left&quot; Fill=&quot;YellowGreen&quot; Width=&quot;20&quot; Margin=&quot;10,0,10,0&quot; HorizontalAlignment=&quot;Center&quot; Data=&quot;&#123;DynamicResource BubbleTailGeometry&#125;&quot;&gt;&lt;/Path&gt; &lt;TextBlock Padding=&quot;10&quot; Text=&quot;&#123;Binding Name&#125;&quot;&gt;&lt;/TextBlock&gt; &lt;/DockPanel&gt; &lt;/Border&gt; &lt;/DataTemplate&gt; &lt;/ListBox.ItemTemplate&gt;&lt;/ListBox&gt; StackPanelHorizontalListBox : ListBoxCustomThe layout container is a StackPanel, and the display style is horizontal. Example：12345678910111213&lt;ListBox Margin=&quot;10&quot; ItemsSource=&quot;&#123;Binding Datas&#125;&quot; Style=&quot;&#123;DynamicResource StackPanelHorizontalListBox&#125;&quot;&gt; &lt;ListBox.ItemTemplate&gt; &lt;DataTemplate&gt; &lt;Border BorderThickness=&quot;1&quot; BorderBrush=&quot;Black&quot; Margin=&quot;5,0&quot;&gt; &lt;DockPanel LastChildFill=&quot;True&quot;&gt; &lt;Path DockPanel.Dock=&quot;Left&quot; Fill=&quot;YellowGreen&quot; Width=&quot;20&quot; Margin=&quot;10,0,10,0&quot; HorizontalAlignment=&quot;Center&quot; Data=&quot;&#123;DynamicResource BubbleTailGeometry&#125;&quot;&gt;&lt;/Path&gt; &lt;TextBlock Padding=&quot;10&quot; Text=&quot;&#123;Binding Name&#125;&quot;&gt;&lt;/TextBlock&gt; &lt;/DockPanel&gt; &lt;/Border&gt; &lt;/DataTemplate&gt; &lt;/ListBox.ItemTemplate&gt;&lt;/ListBox&gt; StackPanelVerticalListBox : ListBoxCustomThe layout container is a StackPanel, which displays the style vertically. Example：12345678910111213&lt;ListBox Margin=&quot;10&quot; ItemsSource=&quot;&#123;Binding Datas&#125;&quot; Style=&quot;&#123;DynamicResource StackPanelVerticalListBox&#125;&quot;&gt; &lt;ListBox.ItemTemplate&gt; &lt;DataTemplate&gt; &lt;Border BorderThickness=&quot;1&quot; BorderBrush=&quot;Black&quot; Margin=&quot;0,1&quot;&gt; &lt;DockPanel LastChildFill=&quot;True&quot;&gt; &lt;Path DockPanel.Dock=&quot;Left&quot; Fill=&quot;YellowGreen&quot; Width=&quot;20&quot; Margin=&quot;10,0,10,0&quot; HorizontalAlignment=&quot;Center&quot; Data=&quot;&#123;DynamicResource BubbleTailGeometry&#125;&quot;&gt;&lt;/Path&gt; &lt;TextBlock Padding=&quot;10&quot; Text=&quot;&#123;Binding Name&#125;&quot;&gt;&lt;/TextBlock&gt; &lt;/DockPanel&gt; &lt;/Border&gt; &lt;/DataTemplate&gt; &lt;/ListBox.ItemTemplate&gt;&lt;/ListBox&gt; ListBoxModernStyle This style is Only Available in Custom Versionyou can use IconElement and ListBoxAttach AttachedProperty12345&lt;ListBox Style=&quot;&#123;StaticResource ListBoxModernStyle&#125;&quot; Width=&quot;200&quot; Margin=&quot;32&quot;&gt; &lt;ListBoxItem Content=&quot;Item 1&quot; hc:IconElement.Height=&quot;16&quot; hc:IconElement.Width=&quot;16&quot; hc:IconElement.Geometry=&quot;&#123;StaticResource ConfigGeometry&#125;&quot;/&gt; &lt;ListBoxItem Content=&quot;Item 2&quot; hc:ListBoxAttach.IsNew=&quot;True&quot; hc:IconElement.Height=&quot;16&quot; hc:IconElement.Width=&quot;16&quot; hc:IconElement.Geometry=&quot;&#123;StaticResource ConfigGeometry&#125;&quot;/&gt; &lt;ListBoxItem Content=&quot;Item 3&quot; hc:ListBoxAttach.IsNew=&quot;True&quot; hc:ListBoxAttach.GeoemtryBrush=&quot;&#123;DynamicResource WarningBrush&#125;&quot; hc:ListBoxAttach.Geometry=&quot;&#123;DynamicResource ClockGeometry&#125;&quot; hc:IconElement.Height=&quot;16&quot; hc:IconElement.Width=&quot;16&quot; hc:IconElement.Geometry=&quot;&#123;StaticResource ConfigGeometry&#125;&quot;/&gt;&lt;/ListBox&gt; ListBoxTransparentStyleThis style is Only Available in Custom Version 1&lt;ListBox Style=&#123;StaticResource ListBoxTransparentStyle&#125;/&gt; ListBoxItemNewStyleThis style is Only Available in Custom Version this style is for Listbox Item with a new geometry icon123&lt;ListBox&gt;&lt;ListBoxItem Style="&#123;StaticResource ListBoxItemNewStyle&#125;"/&gt;&lt;/ListBox&gt;]]></content>
  </entry>
  <entry>
    <title><![CDATA[NavigationWindow]]></title>
    <url>%2Fhandycontrol%2Fnative_controls%2FnavigationWindow%2Findex.html</url>
    <content type="text"><![CDATA[Implicit styles are not automatically applied to windows in wpf, and related methods are provided in hc to solve this problem. The default style of the navigationWindow can be set via ConfigHelper.Instance.SetNavigationWindowDefaultStyle(). 12345678910&lt;NavigationWindow x:Class=&quot;HandyControlDemo.Window.NavigationWindow&quot; xmlns=&quot;http://schemas.microsoft.com/winfx/2006/xaml/presentation&quot; xmlns:x=&quot;http://schemas.microsoft.com/winfx/2006/xaml&quot; WindowStartupLocation=&quot;CenterScreen&quot; xmlns:langs=&quot;clr-namespace:HandyControlDemo.Properties.Langs&quot; Title=&quot;&#123;x:Static langs:Lang.Title&#125;&quot; Height=&quot;450&quot; Width=&quot;800&quot; Icon=&quot;/HandyControlDemo;component/Resources/Img/icon.ico&quot;&gt;&lt;/NavigationWindow&gt; 123456789101112131415161718192021222324252627282930313233343536373839404142434445private readonly List&lt;Page&gt; _pageList; public NavigationWindow() &#123; InitializeComponent(); AddHandler(ButtonBase.ClickEvent, new RoutedEventHandler(Button_Click)); _pageList = new List&lt;Page&gt;(); for (var i = 0; i &lt; 5; i++) &#123; _pageList.Add(CreatePage(i)); &#125; Navigate(_pageList[0]); &#125; private Page CreatePage(int index) &#123; var indexStr = index.ToString(); var button = new Button &#123; HorizontalAlignment = HorizontalAlignment.Center, VerticalAlignment = VerticalAlignment.Center, Content = indexStr, Width = 320, Tag = indexStr &#125;; return new Page &#123; Title = indexStr, Content = button &#125;; &#125; private void Button_Click(object sender, RoutedEventArgs e) &#123; if (e.OriginalSource is Button button &amp;&amp; button.Tag is string tag) &#123; var index = tag.Value&lt;int&gt;() + 1; Navigate(index &gt;= _pageList.Count ? _pageList[0] : _pageList[index]); &#125; &#125; &#125;]]></content>
  </entry>
  <entry>
    <title><![CDATA[PasswordBox]]></title>
    <url>%2Fhandycontrol%2Fnative_controls%2FpasswordBox%2Findex.html</url>
    <content type="text"><![CDATA[PasswordBoxBaseStyleThe default style of the native passwordbox is not recommended. It should always be used by other styles based on On. Example：1&lt;PasswordBox PasswordChar=&quot;*&quot; VerticalAlignment=&quot;Center&quot; Width=&quot;120&quot;&gt;&lt;/PasswordBox&gt; PasswordBoxExtendBaseStyle : PasswordBoxBaseStyleThe native passwordbox extends the default style. It is not recommended to use it directly, and it should always be used by other styles as BasedOn. PasswordBoxExtend : PasswordBoxExtendBaseStyleCompared to the default style of the native passwordbox, it can implement the functions of title and watermark with the help of additional attributes. example:1234567891011&lt;!–In order to display the watermark in the normal password input text box, you need to set PasswordBoxAttach.PasswordLength=&quot;0&quot;–&gt;&lt;PasswordBox Style=&quot;&#123;DynamicResource PasswordBoxExtend&#125;&quot; PasswordChar=&quot;&quot; hc:PasswordBoxAttach.PasswordLength=&quot;0&quot; hc:InfoElement.Placeholder=&quot;Please enter the password&quot; VerticalAlignment=&quot;Center&quot; Width=&quot;120&quot;&gt;&lt;/PasswordBox&gt;&lt;PasswordBox Style=&quot;&#123;DynamicResource PasswordBoxExtend&#125;&quot; PasswordChar=&quot;&quot; hc:TitleElement.Title=&quot;user password:&quot; hc:TitleElement.TitlePlacement=&quot;Top&quot; VerticalAlignment=&quot;Center&quot; Width=&quot;120&quot;&gt;&lt;/PasswordBox&gt;]]></content>
  </entry>
  <entry>
    <title><![CDATA[ProgressBar]]></title>
    <url>%2Fhandycontrol%2Fnative_controls%2FprogressBar%2Findex.html</url>
    <content type="text"><![CDATA[ProgressBarBaseStyleThe default style of the progressbar. It is not recommended to use it directly, and it should always be used by other styles as BasedOn. Other stylesOther styles and effects included in HandyControl, including the following styles: Style Key Uses Parent Style ProgressBarSuccess ProgressBar ProgressBarBaseStyle ProgressBarInfo Prompt Color ProgressBar ProgressBarBaseStyle ProgressBarWarning Warning color progressbar ProgressBarBaseStyle ProgressBarDanger Dangerous ProgressBar ProgressBarBaseStyle ProgressBarViolet Violet ProgressBar ProgressBarBaseStyle ProgressBarDefault Default ProgressBar ProgressBarBaseStyle ProgressBarStripeBaseStyle Stripe progressbar default style (not recommended for direct use) - ProgressBarPrimaryStripe Stripe ProgressBar ProgressBarStripeBaseStyle ProgressBarSuccessStripe ProgressBar Stripe ProgressBarStripeBaseStyle ProgressBarInfoStripe Information color stripe progressbar ProgressBarStripeBaseStyle ProgressBarWarningStripe ProgressBar with warning stripes ProgressBarStripeBaseStyle ProgressBarDangerStripe Dangerous Stripe ProgressBar ProgressBarStripeBaseStyle ProgressBarVioletStripe Violet Stripe ProgressBar ProgressBarStripeBaseStyle ProgressBarFlat Flat style - Case: 1234567891011121314151617181920212223242526272829303132333435363738394041424344&lt;StackPanel Margin="20"&gt; &lt;TextBlock Text="Default style"&gt;&lt;/TextBlock&gt; &lt;ProgressBar Value="40"&gt;&lt;/ProgressBar&gt; &lt;/StackPanel&gt; &lt;StackPanel Margin="20"&gt; &lt;TextBlock Text="ProgressBarSuccess"&gt;&lt;/TextBlock&gt; &lt;ProgressBar Style="&#123;DynamicResource ProgressBarSuccess&#125;" Value="40"&gt;&lt;/ProgressBar&gt; &lt;/StackPanel&gt; &lt;StackPanel Margin="20"&gt; &lt;TextBlock Text="ProgressBarInfo"&gt;&lt;/TextBlock&gt; &lt;ProgressBar Style="&#123;DynamicResource ProgressBarInfo&#125;" Value="40"&gt;&lt;/ProgressBar&gt; &lt;/StackPanel&gt; &lt;StackPanel Margin="20"&gt; &lt;TextBlock Text="ProgressBarWarning"&gt;&lt;/TextBlock&gt; &lt;ProgressBar Style="&#123;DynamicResource ProgressBarWarning&#125;" Value="40"&gt;&lt;/ProgressBar&gt; &lt;/StackPanel&gt; &lt;StackPanel Margin="20"&gt; &lt;TextBlock Text="ProgressBarDanger"&gt;&lt;/TextBlock&gt; &lt;ProgressBar Style="&#123;DynamicResource ProgressBarDanger&#125;" Value="40"&gt;&lt;/ProgressBar&gt; &lt;/StackPanel&gt; &lt;StackPanel Margin="20"&gt; &lt;TextBlock Text="ProgressBarPrimaryStripe"&gt;&lt;/TextBlock&gt; &lt;ProgressBar Style="&#123;DynamicResource ProgressBarPrimaryStripe&#125;" Value="40"&gt;&lt;/ProgressBar&gt; &lt;/StackPanel&gt; &lt;StackPanel Margin="20"&gt; &lt;TextBlock Text="ProgressBarSuccessStripe"&gt;&lt;/TextBlock&gt; &lt;ProgressBar Style="&#123;DynamicResource ProgressBarSuccessStripe&#125;" Value="40"&gt;&lt;/ProgressBar&gt; &lt;/StackPanel&gt; &lt;StackPanel Margin="20"&gt; &lt;TextBlock Text="ProgressBarInfoStripe"&gt;&lt;/TextBlock&gt; &lt;ProgressBar Style="&#123;DynamicResource ProgressBarInfoStripe&#125;" Value="40"&gt;&lt;/ProgressBar&gt; &lt;/StackPanel&gt; &lt;StackPanel Margin="20"&gt; &lt;TextBlock Text="ProgressBarWarningStripe"&gt;&lt;/TextBlock&gt; &lt;ProgressBar Style="&#123;DynamicResource ProgressBarWarningStripe&#125;" Value="40"&gt;&lt;/ProgressBar&gt; &lt;/StackPanel&gt; &lt;StackPanel Margin="20"&gt; &lt;TextBlock Text="ProgressBarDangerStripe"&gt;&lt;/TextBlock&gt; &lt;ProgressBar Style="&#123;DynamicResource ProgressBarDangerStripe&#125;" Value="40"&gt;&lt;/ProgressBar&gt; &lt;/StackPanel&gt; &lt;StackPanel Margin="20"&gt; &lt;TextBlock Text="ProgressBarFlat"&gt;&lt;/TextBlock&gt; &lt;ProgressBar Style="&#123;DynamicResource ProgressBarFlat&#125;" Value="40"&gt;&lt;/ProgressBar&gt; &lt;/StackPanel&gt; effect: TipsFor color, rounded corners or other custom requirements, please refer to ProgressBar Style SourceDefine it yourself.]]></content>
  </entry>
  <entry>
    <title><![CDATA[RadioButton]]></title>
    <url>%2Fhandycontrol%2Fnative_controls%2FradioButton%2Findex.html</url>
    <content type="text"><![CDATA[RadioButtonBaseStyleThe default style of the radiobutton is not recommended. It should always be used by other styles as BasedOn. Case: 123456&lt;StackPanel&gt; &lt;RadioButton Content="Default style"/&gt; &lt;RadioButton Margin="0,16,0,0" Content="Not editable" IsChecked="True" IsEnabled="False"/&gt; &lt;RadioButton Margin="0,16,0,0" Content="Default style"/&gt; &lt;RadioButton Margin="0,16,0,0" Content="Not editable" IsEnabled="False"/&gt;&lt;/StackPanel&gt; effect: RadioButtonIcon : RadioButtonBaseStyleWith icon style, can display only icons or graphics Case: 123456&lt;UniformGrid Margin="22,0,0,0" Rows="2" Columns="2"&gt; &lt;RadioButton Margin="10,0,0,0" Background="&#123;DynamicResource SecondaryRegionBrush&#125;" hc:IconElement.Geometry="&#123;StaticResource CalendarGeometry&#125;" Style="&#123;StaticResource RadioButtonIcon&#125;" Content="RadioButtonIcon"/&gt; &lt;RadioButton Margin="10,0,0,0" Background="&#123;DynamicResource SecondaryRegionBrush&#125;" Style="&#123;StaticResource RadioButtonIcon&#125;" Content="RadioButtonIcon" IsChecked="True"/&gt; &lt;RadioButton Margin="10,0,0,0" BorderThickness="1" hc:IconElement.Geometry="&#123;StaticResource CalendarGeometry&#125;" Style="&#123;StaticResource RadioButtonIcon&#125;" Content="RadioButtonIcon"/&gt; &lt;RadioButton Margin="10,0,0,0" BorderThickness="1" Style="&#123;StaticResource RadioButtonIcon&#125;" Content="RadioButtonIcon"/&gt;&lt;/UniformGrid&gt; effect:]]></content>
  </entry>
  <entry>
    <title><![CDATA[RichTextBox]]></title>
    <url>%2Fhandycontrol%2Fnative_controls%2FrichTextBox%2Findex.html</url>
    <content type="text"><![CDATA[TextBoxBaseBaseStyleThe default style is not recommended. It should always be used by other styles as BasedOn. RichTextBoxBaseStyle : TextBoxBaseBaseStyleThe default style of the richtext box is not recommended. It should always be used by other styles as BasedOn. Case: 1&lt;RichTextBox Margin="10,10" VerticalAlignment="Center" HorizontalAlignment="Center"&gt;&lt;/RichTextBox&gt; 1&lt;RichTextBox Margin="10,10" VerticalAlignment="Center" HorizontalAlignment="Center"&gt;&lt;/RichTextBox&gt; effect:]]></content>
  </entry>
  <entry>
    <title><![CDATA[RepeatButton]]></title>
    <url>%2Fhandycontrol%2Fnative_controls%2FrepeatButton%2Findex.html</url>
    <content type="text"><![CDATA[RepeatButtonBaseStyle : ButtonBaseBaseStyleThe default style of the repeatButton is not recommended for direct use and should always be used by other styles in the BasedOn mode. All repeatButtons that inherit this style can use the additional properties defined in IconElement to control the properties of the geometry in the repeatButton. All repeatButtons that inherit this style can use the BorderElement.CornerRadius attached property to control the fillet size of the repeatButton. Example:123456&lt;StackPanel Orientation=&quot;Horizontal&quot;&gt; &lt;RepeatButton Content=&quot;This is a RepeatButton&quot;/&gt; &lt;RepeatButton Content=&quot;This is a RepeatButton&quot; Margin=&quot;10,0,0,0&quot; controls:BorderElement.CornerRadius=&quot;15&quot;/&gt; &lt;RepeatButton Content=&quot;This is a RepeatButton&quot; Margin=&quot;10,0,0,0&quot;controls:IconElement.Geometry=&quot;&#123;StaticResource GithubGeometry&#125;&quot;/&gt;&lt;/StackPanel&gt; RepeatButtonPrimary : RepeatButtonBaseStyleMain RepeatButton Example:12345&lt;StackPanel Orientation=&quot;Horizontal&quot;&gt; &lt;RepeatButton Style=&quot;&#123;StaticResource RepeatButtonPrimary&#125;&quot; Content=&quot;This is a RepeatButton&quot;/&gt; &lt;RepeatButton Style=&quot;&#123;StaticResource RepeatButtonPrimary&#125;&quot; Content=&quot;This is a RepeatButton&quot; Margin=&quot;10,0,0,0&quot; controls:BorderElement.CornerRadius=&quot;15&quot;/&gt; &lt;RepeatButton Style=&quot;&#123;StaticResource RepeatButtonPrimary&#125;&quot; Content=&quot;This is a RepeatButton&quot; Margin=&quot;10,0,0,0&quot; controls:IconElement.Geometry=&quot;&#123;StaticResource GithubGeometry&#125;&quot;/&gt;&lt;/StackPanel&gt; RepeatButtonSuccess : RepeatButtonBaseStyleSuccess RepeatButton Example：12345&lt;StackPanel Orientation=&quot;Horizontal&quot;&gt; &lt;RepeatButton Style=&quot;&#123;StaticResource RepeatButtonSuccess&#125;&quot; Content=&quot;This is a RepeatButton&quot;/&gt; &lt;RepeatButton Style=&quot;&#123;StaticResource RepeatButtonSuccess&#125;&quot; Content=&quot;This is a RepeatButton&quot; Margin=&quot;10,0,0,0&quot; controls:BorderElement.CornerRadius=&quot;15&quot;/&gt; &lt;RepeatButton Style=&quot;&#123;StaticResource RepeatButtonSuccess&#125;&quot; Content=&quot;This is a RepeatButton&quot; Margin=&quot;10,0,0,0&quot; controls:IconElement.Geometry=&quot;&#123;StaticResource GithubGeometry&#125;&quot;/&gt;&lt;/StackPanel&gt; RepeatRepeatButtonInfo : RepeatButtonBaseStyleInformation RepeatButton Example：12345&lt;StackPanel Orientation=&quot;Horizontal&quot;&gt; &lt;RepeatButton Style=&quot;&#123;StaticResource RepeatButtonInfo&#125;&quot; Content=&quot;This is a RepeatButton&quot;/&gt; &lt;RepeatButton Style=&quot;&#123;StaticResource RepeatButtonInfo&#125;&quot; Content=&quot;This is a RepeatButton&quot; Margin=&quot;10,0,0,0&quot; controls:BorderElement.CornerRadius=&quot;15&quot;/&gt; &lt;RepeatButton Style=&quot;&#123;StaticResource RepeatButtonInfo&#125;&quot; Content=&quot;This is a RepeatButton&quot; Margin=&quot;10,0,0,0&quot; controls:IconElement.Geometry=&quot;&#123;StaticResource GithubGeometry&#125;&quot;/&gt;&lt;/StackPanel&gt; RepeatButtonWarning : RepeatButtonBaseStyleWarning RepeatButton Example：12345&lt;StackPanel Orientation=&quot;Horizontal&quot;&gt; &lt;RepeatButton Style=&quot;&#123;StaticResource RepeatButtonWarning&#125;&quot; Content=&quot;This is a RepeatButton&quot;/&gt; &lt;RepeatButton Style=&quot;&#123;StaticResource RepeatButtonWarning&#125;&quot; Content=&quot;This is a RepeatButton&quot; Margin=&quot;10,0,0,0&quot; controls:BorderElement.CornerRadius=&quot;15&quot;/&gt; &lt;RepeatButton Style=&quot;&#123;StaticResource RepeatButtonWarning&#125;&quot; Content=&quot;This is a RepeatButton&quot; Margin=&quot;10,0,0,0&quot; controls:IconElement.Geometry=&quot;&#123;StaticResource GithubGeometry&#125;&quot;/&gt;&lt;/StackPanel&gt; RepeatButtonDanger : RepeatButtonBaseStyleDanger RepeatButton Example：12345&lt;StackPanel Orientation=&quot;Horizontal&quot;&gt; &lt;RepeatButton Style=&quot;&#123;StaticResource RepeatButtonDanger&#125;&quot; Content=&quot;This is a RepeatButton&quot;/&gt; &lt;RepeatButton Style=&quot;&#123;StaticResource RepeatButtonDanger&#125;&quot; Content=&quot;This is a RepeatButton&quot; Margin=&quot;10,0,0,0&quot; controls:BorderElement.CornerRadius=&quot;15&quot;/&gt; &lt;RepeatButton Style=&quot;&#123;StaticResource RepeatButtonDanger&#125;&quot; Content=&quot;This is a RepeatButton&quot; Margin=&quot;10,0,0,0&quot; controls:IconElement.Geometry=&quot;&#123;StaticResource GithubGeometry&#125;&quot;/&gt;&lt;/StackPanel&gt; RepeatButtonViolet : RepeatButtonBaseStyleViolet RepeatButton Only Custom Version Example：12345&lt;StackPanel Orientation=&quot;Horizontal&quot;&gt; &lt;RepeatButton Style=&quot;&#123;StaticResource RepeatButtonViolet&#125;&quot; Content=&quot;This is a RepeatButton&quot;/&gt; &lt;RepeatButton Style=&quot;&#123;StaticResource RepeatButtonViolet&#125;&quot; Content=&quot;This is a RepeatButton&quot; Margin=&quot;10,0,0,0&quot; controls:BorderElement.CornerRadius=&quot;15&quot;/&gt; &lt;RepeatButton Style=&quot;&#123;StaticResource RepeatButtonViolet&#125;&quot; Content=&quot;This is a RepeatButton&quot; Margin=&quot;10,0,0,0&quot; controls:IconElement.Geometry=&quot;&#123;StaticResource GithubGeometry&#125;&quot;/&gt;&lt;/StackPanel&gt; RepeatButtonDefault : RepeatButtonBaseStyleDefault RepeatButton Only Custom Version Example：12345&lt;StackPanel Orientation=&quot;Horizontal&quot;&gt; &lt;RepeatButton Style=&quot;&#123;StaticResource RepeatButtonDefault&#125;&quot; Content=&quot;This is a RepeatButton&quot;/&gt; &lt;RepeatButton Style=&quot;&#123;StaticResource RepeatButtonDefault&#125;&quot; Content=&quot;This is a RepeatButton&quot; Margin=&quot;10,0,0,0&quot; controls:BorderElement.CornerRadius=&quot;15&quot;/&gt; &lt;RepeatButton Style=&quot;&#123;StaticResource RepeatButtonDefault&#125;&quot; Content=&quot;This is a RepeatButton&quot; Margin=&quot;10,0,0,0&quot; controls:IconElement.Geometry=&quot;&#123;StaticResource GithubGeometry&#125;&quot;/&gt;&lt;/StackPanel&gt; RepeatButtonIcon : RepeatButtonBaseStyleThis style is recommended if you only want to display the geometry RepeatButton. Example：12345&lt;StackPanel Orientation=&quot;Horizontal&quot;&gt; &lt;RepeatButton Style=&quot;&#123;StaticResource RepeatButtonIcon&#125;&quot; Foreground=&quot;Black&quot; controls:IconElement.Geometry=&quot;&#123;StaticResource UpDownGeometry&#125;&quot;/&gt; &lt;RepeatButton Style=&quot;&#123;StaticResource RepeatButtonIcon&#125;&quot; Background=&quot;Black&quot; Foreground=&quot;White&quot; controls:BorderElement.CornerRadius=&quot;15&quot; controls:IconElement.Geometry=&quot;&#123;StaticResource UpDownGeometry&#125;&quot; Margin=&quot;10,0,0,0&quot;/&gt; &lt;RepeatButton Style=&quot;&#123;StaticResource RepeatButtonIcon&#125;&quot; BorderThickness=&quot;1&quot; BorderBrush=&quot;Black&quot; Foreground=&quot;Black&quot; controls:IconElement.Geometry=&quot;&#123;StaticResource UpDownGeometry&#125;&quot; Margin=&quot;10,0,0,0&quot;/&gt;&lt;/StackPanel&gt; RepeatButtonCustomThis style is recommended if you want to fully customize the content of the RepeatButton. The content in RepeatButtonCustom is entirely up to you. In addition, you can switch the background with additional properties in BackgroundSwitchElement: Example：1&lt;RepeatButton Height=&quot;30&quot; Padding=&quot;10,0&quot; Background=&quot;Black&quot; Foreground=&quot;White&quot; Content=&quot;This is a RepeatButton&quot; Style=&quot;&#123;StaticResource RepeatButtonCustom&#125;&quot; controls:BackgroundSwitchElement.MouseHoverBackground=&quot;Red&quot; controls:BackgroundSwitchElement.MouseDownBackground=&quot;PaleVioletRed&quot;/&gt; Styles Style ButtonPrimary RepeatButtonInfo RepeatButtonDanger RepeatButtonWarning RepeatButtonViolet (Only Custom Version) RepeatButtonDefault (Only Custom Version) RepeatButtonSuccess RepeatButtonIcon RepeatButtonIconCircular RepeatButtonDashed RepeatButtonDashedPrimary RepeatButtonDashedSuccess RepeatButtonDashedInfo RepeatButtonDashedWarning RepeatButtonDashedDanger RepeatButtonCustom RepeatButtonGroupItemDefault RepeatButtonGroupItemHorizontalFirst RepeatButtonGroupItemHorizontalLast RepeatButtonGroupItemSingle RepeatButtonGroupItemVerticalFirst RepeatButtonGroupItemVerticalLast]]></content>
  </entry>
  <entry>
    <title><![CDATA[Seperator]]></title>
    <url>%2Fhandycontrol%2Fnative_controls%2Fseperator%2Findex.html</url>
    <content type="text"><![CDATA[SeparatorBaseStyleThe default style is not recommended. It should always be used by other styles as BasedOn.]]></content>
  </entry>
  <entry>
    <title><![CDATA[ScrollViewer]]></title>
    <url>%2Fhandycontrol%2Fnative_controls%2FscrollViewer%2Findex.html</url>
    <content type="text"><![CDATA[ScrollViewerNativeBaseStyleThe default style of the native ScrollViewer is not recommended. It should always be used by other styles based on On. Case: 12345&lt;ScrollViewer&gt; &lt;Grid Height="500"&gt; &lt;TextBlock Text="Content area"&gt;&lt;/TextBlock&gt; &lt;/Grid&gt;&lt;/ScrollViewer&gt; effect: ScrollViewerUpDownScrollViewer style showing up and down buttons Case: 12345678&lt;ScrollViewer Style="&#123;StaticResource ScrollViewerUpDown&#125;"&gt; &lt;StackPanel Height="500"&gt; &lt;TextBlock Text="Content area" Height="250"&gt;&lt;/TextBlock&gt; &lt;TextBlock Text="Content area" Height="250"&gt;&lt;/TextBlock&gt; &lt;TextBlock Text="Content area"&gt;&lt;/TextBlock&gt; &lt;TextBlock Text="Content area"&gt;&lt;/TextBlock&gt; &lt;/StackPanel&gt;&lt;/ScrollViewer&gt; effect:]]></content>
  </entry>
  <entry>
    <title><![CDATA[Slider]]></title>
    <url>%2Fhandycontrol%2Fnative_controls%2Fslider%2Findex.html</url>
    <content type="text"><![CDATA[SliderBaseStyleThe default style of the slider is not recommended. It should always be used by other styles as BasedOn. Case: 1&lt;Slider VerticalAlignment="Center" Width="400" Value="40" Maximum="100"/&gt; effect: you can use TipElement Attached Property1&lt;Slider hc:TipElement.Visibility=&quot;Visible&quot; hc:TipElement.Placement=&quot;BottomRight&quot; IsSnapToTickEnabled=&quot;True&quot; Value=&quot;5&quot; TickPlacement=&quot;Both&quot; Orientation=&quot;Vertical&quot;/&gt;]]></content>
  </entry>
  <entry>
    <title><![CDATA[StatusBar]]></title>
    <url>%2Fhandycontrol%2Fnative_controls%2FstatusBar%2Findex.html</url>
    <content type="text"><![CDATA[StatusBarBaseStyleThe default style of the statusbar is not recommended. It should always be used by other styles as BasedOn.]]></content>
  </entry>
  <entry>
    <title><![CDATA[TabControl]]></title>
    <url>%2Fhandycontrol%2Fnative_controls%2FtabControl%2Findex.html</url>
    <content type="text"><![CDATA[TabControlBaseStyleThe default style of the tabcontrol is not recommended. It should always be used by other styles as BasedOn. Case: 12345678&lt;TabControl Margin="10"&gt; &lt;TabItem Header="Tab 1"&gt; &lt;/TabItem&gt; &lt;TabItem Header="Tab 2"&gt; &lt;/TabItem&gt; &lt;TabItem Header="Tab 3"&gt; &lt;/TabItem&gt;&lt;/TabControl&gt; effect:: TabControlInLine : TabControlBaseStyleSingle line fill tab style Case: 12345678&lt;TabControl Margin="10" Style="&#123;StaticResource TabControlInLine&#125;"&gt; &lt;TabItem Header="Tab 1"&gt; &lt;/TabItem&gt; &lt;TabItem Header="Tab 2"&gt; &lt;/TabItem&gt; &lt;TabItem Header="Tab 3"&gt; &lt;/TabItem&gt;&lt;/TabControl&gt; effect:: TabControlCapsuleCapsule tab style Case: 12345678&lt;TabControl Margin="10" Style="&#123;StaticResource TabControlCapsule&#125;"&gt; &lt;TabItem Header="Tab 1"&gt; &lt;/TabItem&gt; &lt;TabItem Header="Tab 2"&gt; &lt;/TabItem&gt; &lt;TabItem Header="Tab 3"&gt; &lt;/TabItem&gt;&lt;/TabControl&gt; effect:: TabControlCapsuleSolid : TabControlCapsuleCapsule (solid) tab style Case: 12345678&lt;TabControl Margin="10" Style="&#123;StaticResource TabControlCapsuleSolid&#125;"&gt; &lt;TabItem Header="Tab 1"&gt; &lt;/TabItem&gt; &lt;TabItem Header="Tab 2"&gt; &lt;/TabItem&gt; &lt;TabItem Header="Tab 3"&gt; &lt;/TabItem&gt;&lt;/TabControl&gt; effect:: TipsYou can use the property TabStripPlacement to set the position of the header title, the effect is as follows: TabItemTransparentStyle Only Custom Version123&lt;TabControl&gt; &lt;TabItem Header="Test" Style=&#123;StaticResource TabItemTransparentStyle&#125;&gt;&lt;/TabControl&gt;]]></content>
  </entry>
  <entry>
    <title><![CDATA[TextBox]]></title>
    <url>%2Fhandycontrol%2Fnative_controls%2FtextBox%2Findex.html</url>
    <content type="text"><![CDATA[TextBoxBaseStyleThe default style of the native textbox is not recommended. It should always be used by other styles as BasedOn. -Default style&lt;TextBox Width=&quot;200&quot; VerticalAlignment=&quot;Center&quot;/&gt; TextBoxExtendBaseStyle : TextBoxBaseStyleThe native textbox extends the default style. It is not recommended to use it directly. It should always be used by other styles based on On. TextBoxExtend : TextBoxExtendBaseStyleCompared with the default style of the native textbox, it can achieve the functions of title and watermark with the help of additional attributes. Title on&lt;TextBox Style=&quot;{StaticResource TextBoxExtend}&quot; hc:InfoElement.Title=&quot;This is the title&quot; Width=&quot;200&quot; VerticalAlignment=&quot;Center&quot;/&gt; Title on left&lt;TextBox Style=&quot;{StaticResource TextBoxExtend}&quot; hc:InfoElement.TitlePlacement=&quot;Left&quot; hc:InfoElement.Title=&quot;This is the title&quot; Width=&quot;300&quot; VerticalAlignment=&quot;Center&quot;/&gt; When the title is on the left, in order to align the left sides of multiple input boxes, the title width needs to be set. The title width does not need to be set one by one, and can be set uniformly on the external container. Title on top with watermarkSee Combobox Title is above, with watermark, and is requiredSee Combobox The title is on the top, with a watermark, and it is required, and the required prompt is customizedSee Combobox]]></content>
  </entry>
  <entry>
    <title><![CDATA[TextBlock]]></title>
    <url>%2Fhandycontrol%2Fnative_controls%2FtextBlock%2Findex.html</url>
    <content type="text"><![CDATA[TextBlockBaseStyleThe default style of the textblock is not recommended. It should always be used by other styles based on On. TextBlockBoldBaseStyleThe default style of bold textblocks is not recommended. It should always be used by other styles as BasedOn. Case12345678910111213141516171819&lt;StackPanel&gt; &lt;TextBlock HorizontalAlignment="Left" Margin="5" Text="TextBlockLargeBold" Style="&#123;StaticResource TextBlockLargeBold&#125;"/&gt; &lt;TextBlock HorizontalAlignment="Left" Margin="5" Text="TextBlockLarge" Style="&#123;StaticResource TextBlockLarge&#125;"/&gt; &lt;TextBlock HorizontalAlignment="Left" Margin="5" Text="TextBlockHeaderBold" Style="&#123;StaticResource TextBlockTitleBold&#125;"/&gt; &lt;TextBlock HorizontalAlignment="Left" Margin="5" Text="TextBlockHeader" Style="&#123;StaticResource TextBlockTitle&#125;"/&gt; &lt;TextBlock HorizontalAlignment="Left" Margin="5" Text="TextBlockSubHeaderBold" Style="&#123;StaticResource TextBlockSubTitleBold&#125;"/&gt; &lt;TextBlock HorizontalAlignment="Left" Margin="5" Text="TextBlockSubHeader" Style="&#123;StaticResource TextBlockSubTitle&#125;"/&gt; &lt;TextBlock HorizontalAlignment="Left" Margin="5" Text="TextBlockDefaultBold" Style="&#123;StaticResource TextBlockDefaultBold&#125;"/&gt; &lt;TextBlock HorizontalAlignment="Left" Margin="5" Text="TextBlockDefault" Style="&#123;StaticResource TextBlockDefault&#125;"/&gt; &lt;TextBlock HorizontalAlignment="Left" Margin="5" Text="TextBlockDefaultAccent" Style="&#123;StaticResource TextBlockDefaultAccent&#125;"/&gt; &lt;TextBlock HorizontalAlignment="Left" Margin="5" Text="TextBlockDefaultSecLight" Style="&#123;StaticResource TextBlockDefaultSecLight&#125;"/&gt; &lt;TextBlock HorizontalAlignment="Left" Margin="5" Text="TextBlockDefaultThiLight" Style="&#123;StaticResource TextBlockDefaultThiLight&#125;"/&gt; &lt;TextBlock HorizontalAlignment="Left" Margin="5" Text="TextBlockDefaultPrimary" Style="&#123;StaticResource TextBlockDefaultPrimary&#125;"/&gt; &lt;TextBlock HorizontalAlignment="Left" Margin="5" Text="TextBlockDefaultDanger" Style="&#123;StaticResource TextBlockDefaultDanger&#125;"/&gt; &lt;TextBlock HorizontalAlignment="Left" Margin="5" Text="TextBlockDefaultWarning" Style="&#123;StaticResource TextBlockDefaultWarning&#125;"/&gt; &lt;TextBlock HorizontalAlignment="Left" Margin="5" Text="TextBlockDefaultInfo" Style="&#123;StaticResource TextBlockDefaultInfo&#125;"/&gt; &lt;TextBlock HorizontalAlignment="Left" Margin="5" Text="TextBlockDefaultSuccess" Style="&#123;StaticResource TextBlockDefaultSuccess&#125;"/&gt;&lt;/StackPanel&gt; Styles Available styles TextBlockLargeBold TextBlockLarge TextBlockDefaultThiLight TextBlockTitleBold TextBlockTitle TextBlockDefaultPrimary TextBlockSubTitleBold TextBlockDefaultBold TextBlockDefaultDanger TextBlockSubTitle TextBlockDefault TextBlockDefaultWarning TextBlockDefaultAccent TextBlockDefaultSecLight TextBlockDefaultInfo TextBlockDefaultSuccess TextBlockDefaultSecLight TextBlockDefaultViolet Available Only in Custom Version]]></content>
  </entry>
  <entry>
    <title><![CDATA[ToggleButton]]></title>
    <url>%2Fhandycontrol%2Fnative_controls%2FtoggleButton%2Findex.html</url>
    <content type="text"><![CDATA[ToggleButtonBaseStyle : ButtonBaseBaseStyleThe default style of the togglebutton is not recommended. It should always be used by other styles in the BasedOn mode. All buttons inheriting this style can use the additional attributes defined in IconElement to control the attributes of the geometry in the button. All buttons inheriting this style can use the BorderElement.CornerRadius additional property to control the rounded corner size of the button. Related styles Name Inherited from Description ToggleButtonPrimary ToggleButtonBaseStyle Primary ToggleButtonSuccess ToggleButtonBaseStyle Success ToggleButtonInfo ToggleButtonBaseStyle Information ToggleButtonWarning ToggleButtonBaseStyle Warning ToggleButtonDanger ToggleButtonBaseStyle Danger ToggleButtonDefault Available Only in Custom Version ToggleButtonBaseStyle Default ToggleButtonViolet Available Only in Custom Version ToggleButtonBaseStyle Violet Case: 12345678&lt;StackPanel HorizontalAlignment="Center" VerticalAlignment="Center"&gt; &lt;ToggleButton MinWidth="100" Content="Default"/&gt; &lt;ToggleButton MinWidth="100" Content="Primary" Margin="0,6,0,0" Style="&#123;StaticResource ToggleButtonPrimary&#125;"/&gt; &lt;ToggleButton MinWidth="100" Content="Success" Margin="0,6,0,0" Style="&#123;StaticResource ToggleButtonSuccess&#125;"/&gt; &lt;ToggleButton MinWidth="100" Content="Info" Margin="0,6,0,0" Style="&#123;StaticResource ToggleButtonInfo&#125;"/&gt; &lt;ToggleButton MinWidth="100" Content="Warning" Margin="0,6,0,0" Style="&#123;StaticResource ToggleButtonWarning&#125;"/&gt; &lt;ToggleButton MinWidth="100" Content="Danger" Margin="0,6,0,0" Style="&#123;StaticResource ToggleButtonDanger&#125;"/&gt;&lt;/StackPanel&gt; effect: ToggleButtonIconBaseStyle : BaseStyleThe togglebutton that only displays icons is not recommended for direct use, and should always be used by other styles as BasedOn. All buttons inheriting this style can use the additional attributes defined in IconElement to control the attributes of the geometry in the button. All buttons inheriting this style can use the BorderElement.CornerRadius additional property to control the rounded corner size of the button. Related styles Name Inherited from Description ToggleButtonIcon ToggleButtonIconBaseStyle Default ToggleButtonIconPrimary ToggleButtonIconBaseStyle Primary ToggleButtonIconSuccess ToggleButtonIconBaseStyle Success ToggleButtonIconInfo ToggleButtonIconBaseStyle Information ToggleButtonIconWarning ToggleButtonIconBaseStyle Warning ToggleButtonIconDanger ToggleButtonIconBaseStyle Danger ToggleButtonIconTransparent ToggleButtonIconBaseStyle Transparent ToggleButtonIconViolet Available Only in Custom Version ToggleButtonIconBaseStyle Violet Case: 123456789&lt;StackPanel Orientation="Horizontal" HorizontalAlignment="Center" VerticalAlignment="Center"&gt; &lt;ToggleButton Padding="6" hc:IconElement.Geometry="&#123;StaticResource ClockGeometry&#125;" Style="&#123;StaticResource ToggleButtonIcon&#125;"/&gt; &lt;ToggleButton Margin="6,0,0,0" hc:IconElement.Geometry="&#123;StaticResource ClockGeometry&#125;" Style="&#123;StaticResource ToggleButtonIconPrimary&#125;"/&gt; &lt;ToggleButton Margin="6,0,0,0" hc:IconElement.Geometry="&#123;StaticResource ClockGeometry&#125;" Style="&#123;StaticResource ToggleButtonIconSuccess&#125;"/&gt; &lt;ToggleButton Margin="6,0,0,0" hc:IconElement.Geometry="&#123;StaticResource ClockGeometry&#125;" Style="&#123;StaticResource ToggleButtonIconInfo&#125;"/&gt; &lt;ToggleButton Margin="6,0,0,0" hc:IconElement.Geometry="&#123;StaticResource ClockGeometry&#125;" Style="&#123;StaticResource ToggleButtonIconWarning&#125;"/&gt; &lt;ToggleButton Margin="6,0,0,0" hc:IconElement.Geometry="&#123;StaticResource ClockGeometry&#125;" Style="&#123;StaticResource ToggleButtonIconDanger&#125;"/&gt; &lt;ToggleButton Margin="6,0,0,0" hc:IconElement.Geometry="&#123;StaticResource ClockGeometry&#125;" Style="&#123;StaticResource ToggleButtonIconTransparent&#125;"/&gt;&lt;/StackPanel&gt; effect: ToggleButtonSwitchBaseStyle : BaseStyleSwitch-type switching buttons are not recommended for direct use, and should always be used by other styles as BasedOn. Related styles Name Inherited from ToggleButtonSwitch ToggleButtonSwitchBaseStyle Case: 1234&lt;StackPanel VerticalAlignment="Center" HorizontalAlignment="Center"&gt; &lt;ToggleButton Style="&#123;StaticResource ToggleButtonSwitch&#125;"/&gt; &lt;ToggleButton Margin="0,6,0,0" IsChecked="True" Style="&#123;StaticResource ToggleButtonSwitch&#125;"/&gt;&lt;/StackPanel&gt; effect: ToggleButtonFlip : BaseStyleFlip-style togglebutton. Case: 12345678910111213141516171819202122&lt;StackPanel VerticalAlignment="Center" HorizontalAlignment="Center"&gt; &lt;ToggleButton BorderThickness="0" IsChecked="True" Style="&#123;StaticResource ToggleButtonFlip&#125;"&gt; &lt;hc:StatusSwitchElement.CheckedElement&gt; &lt;Border Background="&#123;DynamicResource PrimaryBrush&#125;"&gt; &lt;TextBlock HorizontalAlignment="Center" VerticalAlignment="Center" Text="关" Foreground="&#123;DynamicResource TextIconBrush&#125;"/&gt; &lt;/Border&gt; &lt;/hc:StatusSwitchElement.CheckedElement&gt; &lt;Border Background="&#123;DynamicResource DangerBrush&#125;"&gt; &lt;TextBlock HorizontalAlignment="Center" VerticalAlignment="Center" Text="开" Foreground="&#123;DynamicResource TextIconBrush&#125;"/&gt; &lt;/Border&gt; &lt;/ToggleButton&gt; &lt;ToggleButton Margin="0,6,0,0" BorderThickness="0" IsChecked="False" Style="&#123;StaticResource ToggleButtonFlip&#125;"&gt; &lt;hc:StatusSwitchElement.CheckedElement&gt; &lt;Border Background="&#123;DynamicResource PrimaryBrush&#125;"&gt; &lt;TextBlock HorizontalAlignment="Center" VerticalAlignment="Center" Text="关" Foreground="&#123;DynamicResource TextIconBrush&#125;"/&gt; &lt;/Border&gt; &lt;/hc:StatusSwitchElement.CheckedElement&gt; &lt;Border Background="&#123;DynamicResource DangerBrush&#125;"&gt; &lt;TextBlock HorizontalAlignment="Center" VerticalAlignment="Center" Text="开" Foreground="&#123;DynamicResource TextIconBrush&#125;"/&gt; &lt;/Border&gt; &lt;/ToggleButton&gt;&lt;/StackPanel&gt; effect: ToggleButtonCustom : BaseStyleThis style is recommended if you want to completely customize the content of the button. The content of ToggleButtonCustom is entirely up to you. Case: 12345678910111213141516171819202122&lt;StackPanel VerticalAlignment="Center" HorizontalAlignment="Center"&gt; &lt;ToggleButton IsChecked="True" Style="&#123;StaticResource ToggleButtonCustom&#125;" hc:StatusSwitchElement.HideUncheckedElement="True"&gt; &lt;hc:StatusSwitchElement.CheckedElement&gt; &lt;Border Width="80" Height="30" CornerRadius="4" BorderThickness="1" BorderBrush="&#123;DynamicResource BorderBrush&#125;"&gt; &lt;Ellipse Width="20" Height="20" Fill="&#123;DynamicResource PrimaryBrush&#125;" StrokeThickness="1" Stroke="&#123;DynamicResource BorderBrush&#125;"/&gt; &lt;/Border&gt; &lt;/hc:StatusSwitchElement.CheckedElement&gt; &lt;Border Width="80" Height="30" CornerRadius="4" BorderThickness="1" BorderBrush="&#123;DynamicResource BorderBrush&#125;"&gt; &lt;Ellipse Width="20" Height="20" Fill="&#123;DynamicResource BorderBrush&#125;" StrokeThickness="1" Stroke="&#123;DynamicResource BorderBrush&#125;"/&gt; &lt;/Border&gt; &lt;/ToggleButton&gt; &lt;ToggleButton Margin="0,6,0,0" IsChecked="False" Style="&#123;StaticResource ToggleButtonCustom&#125;" hc:StatusSwitchElement.HideUncheckedElement="True"&gt; &lt;hc:StatusSwitchElement.CheckedElement&gt; &lt;Border Width="80" Height="30" CornerRadius="4" BorderThickness="1" BorderBrush="&#123;DynamicResource BorderBrush&#125;"&gt; &lt;Ellipse Width="20" Height="20" Fill="&#123;DynamicResource PrimaryBrush&#125;" StrokeThickness="1" Stroke="&#123;DynamicResource BorderBrush&#125;"/&gt; &lt;/Border&gt; &lt;/hc:StatusSwitchElement.CheckedElement&gt; &lt;Border Width="80" Height="30" CornerRadius="4" BorderThickness="1" BorderBrush="&#123;DynamicResource BorderBrush&#125;"&gt; &lt;Ellipse Width="20" Height="20" Fill="&#123;DynamicResource BorderBrush&#125;" StrokeThickness="1" Stroke="&#123;DynamicResource BorderBrush&#125;"/&gt; &lt;/Border&gt; &lt;/ToggleButton&gt;&lt;/StackPanel&gt; effect:]]></content>
  </entry>
  <entry>
    <title><![CDATA[Toolbar]]></title>
    <url>%2Fhandycontrol%2Fnative_controls%2FtoolBar%2Findex.html</url>
    <content type="text"><![CDATA[ToolBarBaseStyleThe default style of the toolbar is not recommended. It should always be used by other styles based on the On. Case: 12345&lt;ToolBar Padding="10,6" Header="Demo" VerticalAlignment="Center" HorizontalAlignment="Center"&gt; &lt;Button Content="Demo" Margin="10,0,0,0"/&gt; &lt;ToggleButton Content="Demo" Margin="10,0,0,0"/&gt; &lt;CheckBox Content="Demo" Margin="10,0,0,0"/&gt;&lt;/ToolBar&gt; effect:]]></content>
  </entry>
  <entry>
    <title><![CDATA[ToolTip]]></title>
    <url>%2Fhandycontrol%2Fnative_controls%2FtoolTip%2Findex.html</url>
    <content type="text"><![CDATA[ToolTipBaseStyleThe default style of the tooltip is not recommended. It should always be used by other styles in the BasicOn mode.]]></content>
  </entry>
  <entry>
    <title><![CDATA[TreeView]]></title>
    <url>%2Fhandycontrol%2Fnative_controls%2FtreeView%2Findex.html</url>
    <content type="text"><![CDATA[TreeViewBaseStyle : BaseStyleThe default style of the treeview is not recommended. It should always be used by other styles in the BasicOn mode. Case: 123456789101112&lt;TreeView Width="200" VerticalAlignment="Center"&gt; &lt;TreeViewItem Header="111"&gt; &lt;TreeViewItem Header="111"/&gt; &lt;TreeViewItem Header="222"/&gt; &lt;TreeViewItem Header="333"/&gt; &lt;/TreeViewItem&gt; &lt;TreeViewItem Header="222"&gt; &lt;TreeViewItem Header="111"/&gt; &lt;TreeViewItem Header="222"/&gt; &lt;TreeViewItem Header="333"/&gt; &lt;/TreeViewItem&gt;&lt;/TreeView&gt; effect: Related styles Name Inherited from Description TreeViewItemBaseStyle BaseStyle Tree View Item Default Style ExpandCollapseToggleStyle Treeview Collapse Button Style]]></content>
  </entry>
  <entry>
    <title><![CDATA[Window]]></title>
    <url>%2Fhandycontrol%2Fnative_controls%2Fwindow%2Findex.html</url>
    <content type="text"><![CDATA[Implicit styles are not automatically applied to windows in wpf, and related methods are provided in hc to solve this problem. WindowThe default style of the window can be set via ConfigHelper.Instance.SetWindowDefaultStyle(). NavigationWindowThe default style of the navigationWindow can be set via ConfigHelper.Instance.SetNavigationWindowDefaultStyle().]]></content>
  </entry>
  <entry>
    <title><![CDATA[BindToEnum]]></title>
    <url>%2Fhandycontrol%2FpersianToolkit%2FbindToEnum%2Findex.html</url>
    <content type="text"><![CDATA[with this extension you can bind Enum to itemsources example: 123456789public enum Status &#123; Horrible, Bad, SoSo, Good, Better, Best &#125; 1&lt;hc:ComboBox ItemsSource="&#123;Binding Source=&#123;hc:EnumBindingSource &#123;x:Type local:Status&#125;&#125;&#125;" Margin="10" /&gt; you can create description for enum and bind itemsources to description, you only need to change enum class like this: 12345678910111213141516[TypeConverter(typeof(EnumDescriptionTypeConverter))] public enum Status &#123; [Description("This is horrible")] Horrible, [Description("This is bad")] Bad, [Description("This is so so")] SoSo, [Description("This is good")] Good, [Description("This is better")] Better, [Description("This is best")] Best &#125;]]></content>
  </entry>
  <entry>
    <title><![CDATA[BusyIndicator]]></title>
    <url>%2Fhandycontrol%2FpersianToolkit%2FbusyIndicator%2Findex.html</url>
    <content type="text"><![CDATA[BusyIndicator makes it easy to let the user know when an application is busy. Simply wrap the relevant content in an instance of the BusyIndicator control and toggle its IsBusy property to True during any long-running process. example: 12345&lt;hc:BusyIndicator IsBusy="True" &gt; &lt;grid&gt; &lt;/grid&gt;&lt;/hc:BusyIndicator&gt; Custom Content1234567891011121314151617181920212223242526272829303132 &lt;hc:BusyIndicator IsBusy="True" DisplayAfter="0"&gt; &lt;hc:BusyIndicator.BusyContentTemplate&gt; &lt;DataTemplate&gt; &lt;StackPanel Margin="4"&gt; &lt;TextBlock Text="Downloading Email" FontWeight="Bold" HorizontalAlignment="Center"/&gt; &lt;StackPanel Margin="4"&gt; &lt;TextBlock Text="Downloading message 4/10..."/&gt; &lt;ProgressBar Value="40" Height="15"/&gt; &lt;/StackPanel&gt; &lt;Grid&gt; &lt;Grid.ColumnDefinitions&gt; &lt;ColumnDefinition/&gt; &lt;ColumnDefinition/&gt; &lt;/Grid.ColumnDefinitions&gt; &lt;Button Grid.Column="0" Content="Pause" HorizontalAlignment="Right" Margin="0 0 2 0"/&gt; &lt;Button Grid.Column="1" Content="Cancel" HorizontalAlignment="Left" Margin="2 0 0 0"/&gt; &lt;/Grid&gt; &lt;/StackPanel&gt; &lt;/DataTemplate&gt; &lt;/hc:BusyIndicator.BusyContentTemplate&gt; &lt;hc:BusyIndicator.OverlayStyle&gt; &lt;Style TargetType="Rectangle"&gt; &lt;Setter Property="Fill" Value="#ffffeeee"/&gt; &lt;/Style&gt; &lt;/hc:BusyIndicator.OverlayStyle&gt; &lt;hc:BusyIndicator.ProgressBarStyle&gt; &lt;Style TargetType="ProgressBar"&gt; &lt;Setter Property="Visibility" Value="Collapsed"/&gt; &lt;/Style&gt; &lt;/hc:BusyIndicator.ProgressBarStyle&gt; &lt;ContentControl Style="&#123;StaticResource SampleContent&#125;"/&gt;&lt;/hc:BusyIndicator&gt; Attributes Property Description BusyContent Gets or sets the busy content to display to the user. BusyContentTemplate Gets or sets the DataTemplate to use for displaying the busy content to the user. DisplayAfter Gets or sets the time interval that the busy content is delayed before being displayed. FocusAfterBusy Gets or sets a control that should get focus when the busy indicator disappears. IsBusy Gets or sets a value indicating whether the busy indicator should be shown. IsContentVisible Gets or sets a value indicating whether the BusyContent is visible. OverlayStyle Gets or sets a Style object representing the style to use for the overlay. By default, null. ProgressBarStyle Gets or sets a Style object representing the style to use for the progress bar. By default, null.]]></content>
  </entry>
  <entry>
    <title><![CDATA[Dynamic Multi Language]]></title>
    <url>%2Fhandycontrol%2FpersianToolkit%2FdynamicLanguage%2Findex.html</url>
    <content type="text"><![CDATA[You can use this class to bring dynamic multilingual switching features to your applications there is 3 type of Dynamic Language Resource Dictionary (xaml) files and Resource (resx) files Resource Dictionary Xaml FilesIn this method, we use resource dictionary (xaml) files, which gives us more featuresBut keep in mind that due to the use of DynamicResource, As your project gets bigger, you may have performance trouble.With this method, you can also change styles, fonts, colors and etc. How to use?Pre-defined name Create a folder called Assets in your project. Create a new resource dictionary (xaml file) called Strings.{lang}.xaml in the Assets folder lang is your 2-digit language code.for examle: Strings.en.xaml, Strings.fa.xaml Create your strings in this file like this:123456&lt;ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation" xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml" xmlns:system="clr-namespace:System;assembly=mscorlib"&gt; &lt;system:String x:Key="Title"&gt;Hello&lt;/system:String&gt; &lt;system:String x:Key="BtnCancel"&gt;Cancel&lt;/system:String&gt;&lt;/ResourceDictionary&gt; Note that you must specify a unique key for each string.In the end, you have to copy all these strings to other resource dictionary (xaml files) and only change the text according to the language. Now you need to introduce the default language file to your application Open the app.xaml file and specify the default dictionary file like this: 12345&lt;ResourceDictionary&gt; &lt;ResourceDictionary.MergedDictionaries&gt; &lt;ResourceDictionary Source="/Assets/Strings.en.xaml"/&gt; &lt;/ResourceDictionary.MergedDictionaries&gt;&lt;/ResourceDictionary&gt; Now it’s time to connect your keys!1&lt;Button Content="&#123;DynamicResource Title&#125;" /&gt; Finally, use the following code to change language in runtime:123DynamicLanguage.SetLanguage("en");// ORDynamicLanguage.SetLanguage("fa"); Your favorite file and folder nameIn this method, you can specify the name of your folder and files.Create your favorite folder Here we name it LanguageCreate your resource dictionary file Here we name it English.xaml. (Or whatever you like)To change the language, you must pass the resource dictionary file path123DynamicLanguage.SetLanguageWithLocation(@"Language\English.xaml");// ORDynamicLanguage.SetLanguageWithLocation(@"Language\Persian.xaml"); How to use in Csharp?Get StringIt is very easy to use in Code-Behind1MessageBox.Show(DynamicLanguage.GetString("TextKey")); TextKey is the key you created in the resource dictionary (xaml) fileYou can specify the default text so that if the desired key is not found, the default text will be returned MessageBox.Show(DynamicLanguage.GetString(&quot;TextKey&quot;, &quot;default value&quot;)); Get String with FormatYou can create your key with Arg and pass parameter in code-behind&lt;system:String x:Key=&quot;Title&quot;&gt;Hello {0}&lt;/system:String&gt;12MessageBox.Show(DynamicLanguage.GetStringFormat("TextKey", "Mahdi"));// output: Hello Mahdi Defining styles, fonts, etc.Just like strings, create styles, fonts, etc. in the same dictionary file and give them a unique key.12345678910&lt;ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation" xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml" xmlns:system="clr-namespace:System;assembly=mscorlib"&gt; &lt;system:String x:Key="Title"&gt;Hello&lt;/system:String&gt; &lt;system:String x:Key="BtnCancel"&gt;Cancel&lt;/system:String&gt; &lt;FlowDirection x:Key="MainFlow"&gt;RightToLeft&lt;/FlowDirection&gt; &lt;Style x:Key="lblTest" TargetType="Label"&gt; &lt;!-- Your Style Code --&gt; &lt;/Style&gt;&lt;/ResourceDictionary&gt; and123&lt;Button FlowDirection="&#123;DynamicResource MainFlow&#125;"/&gt;&lt;Label Style="&#123;DynamicResource lblTest&#125;"/&gt; Resource (Resx) Files There are 2 ways to use this method The first method is very simple to implement, The second method of implementation requires more work. First MethodHow to use?First you need to create a folder, here our folder called Strings We are going to create language files in this folder.add resource files into this folder you can Right-click on folder and from the Add New Item option Select Resources file Be careful when naming it. The default language can be without a language codeNo matter how many languages you have, you need to create a resource file for that language.You must include a 2-digit or 5-digit language code in resource file name. We want our program to have 2 languages, English and Persian So I create 2 resource files Pay attention to the naming method. Strings.resx Strings.en.resx or Strings.en-US.resx Create a class ResxLocalizationProvider and inherit from ILocalizationProvider.in Localize method you need to address your resource Strings.ResourceManager... also you need to define your existing cultures.123456789101112131415public class ResxLocalizationProvider : ILocalizationProvider &#123; private IEnumerable&lt;CultureInfo&gt; _cultures; public object Localize(string key) &#123; return Strings.ResourceManager.GetObject(key); &#125; public IEnumerable&lt;CultureInfo&gt; Cultures =&gt; _cultures ?? (_cultures = new List&lt;CultureInfo&gt; &#123; new CultureInfo("fa"), new CultureInfo("en"), &#125;); &#125; in last step we need to init our class so in app.cs:1234public App()&#123; LocalizationManager.Instance.LocalizationProvider = new ResxLocalizationProvider();&#125; How to use in Xaml?There are several ways to do this Key localization123&lt;Button Content="&#123;hc:Localization TextKey&#125;"/&gt;// OR &lt;Button Content="&#123;hc:Localization Key=TextKey&#125;"/&gt; TextKey is the key you created in the resource (resx) file Localization by binding 1&lt;TextBlock Text="&#123;hc:Localization KeyBinding=&#123;Binding SomeProperty&#125;&#125;"/&gt; Localization using static arguments: 12345&lt;TextBlock&gt; &lt;TextBlock.Text&gt; &lt;hc:Localization Key="SomeKey" Arguments="&#123;StaticResource SomeArray&#125;"/&gt; &lt;/TextBlock.Text&gt;&lt;/TextBlock&gt; Localization using argument bindings: 12345678 &lt;TextBlock&gt; &lt;TextBlock.Text&gt; &lt;hc:Localization Key="SomeKey"&gt; &lt;Binding Source="&#123;hc:Localization SomeKey2&#125;"/&gt; &lt;Binding Path="SomeProperty" /&gt; &lt;/hc:Localization&gt; &lt;/TextBlock.Text&gt; &lt;/TextBlock&gt; OR1234567&lt;TextBlock&gt; &lt;TextBlock.Text&gt; &lt;hc:Localization Key="SomeKey"&gt; &lt;Binding Path="SomeProperty" /&gt; &lt;/hc:Localization&gt; &lt;/TextBlock.Text&gt; &lt;/TextBlock&gt; How to use in Csharp?It is very easy to use in Code-Behind1MessageBox.Show(LocalizationManager.Instance.Localize("TextKey").ToString()); How to Change language in Runtime?To change the language in runtime, just write the following code and specify the language code123LocalizationManager.Instance.CurrentCulture = new System.Globalization.CultureInfo("fa");// ORLocalizationManager.Instance.CurrentCulture = new System.Globalization.CultureInfo("en"); Second MethodThis method is also available in the official version, so please read from this section]]></content>
  </entry>
  <entry>
    <title><![CDATA[CheckTreeView]]></title>
    <url>%2Fhandycontrol%2FpersianToolkit%2FcheckTreeView%2Findex.html</url>
    <content type="text"><![CDATA[TreeView Control with Checkbox example: 1&lt;hc:CheckTreeView Margin="10" ItemsSource="&#123;Binding TreeRoot&#125;"/&gt; now you need to create observablecollection 123456789public ObservableCollection&lt;CheckTreeView&gt; TreeRoot &#123; get; set; &#125; = new ObservableCollection&lt;CheckTreeView&gt;();CheckTreeView item = new CheckTreeView() &#123; Text = "Item 1", IsChecked = false, CTag = "TAG" &#125;;CheckTreeView subItem1 = new CheckTreeView() &#123; Text = "SubItem 1", IsChecked = false, CTag = "TAG" &#125;;CheckTreeView subItem2 = new CheckTreeView() &#123; Text = "SubItem 2", IsChecked = false, CTag = "TAG" &#125;;item.Add(subItem1);item.Add(subItem2);TreeRoot.Add(item);]]></content>
  </entry>
  <entry>
    <title><![CDATA[Extensions]]></title>
    <url>%2Fhandycontrol%2FpersianToolkit%2Fextensions%2Findex.html</url>
    <content type="text"><![CDATA[for using extension methods you need to add Using HandyControl.Tools.Extension; AddOnUiThis Extension Method Help you to Add Items into ObservableCollection from Another Thread1DataList.AddOnUI(new PackagesModel &#123; Name = name, IsInstalled = isInstalled, Version = version, Id = id &#125;); BetweenCompare between 2 things1234if (myNumber.Between(3,7))&#123; // ....&#125; ToInt32Converts any type in to an Int321int number = "123".ToInt32(); Converts any type in to an Int32 but if null then returns the default1int badNumber = "a".ToInt32(100); // Returns 100 since a is nan GetEnumeratorWithIndexThis Extension Help you to access item index in foreach loop12345var s = "ABCDEFG";foreach (var item in s.GetEnumeratorWithIndex())&#123; System.Console.WriteLine("Character: &#123;0&#125;, Position: &#123;1&#125;", item.Value, item.Index);&#125; FormatEnable quick and more natural string.Format calls1var s = "The co-ordinate is (&#123;0&#125;, &#123;1&#125;)".Format(point.X, point.Y);]]></content>
  </entry>
  <entry>
    <title><![CDATA[GithubTimeLine]]></title>
    <url>%2Fhandycontrol%2FpersianToolkit%2FgithubTimeLine%2Findex.html</url>
    <content type="text"><![CDATA[GithubTimeLine is a Timeline control that Inherited from TreeView example: 123&lt;Grid&gt; &lt;hc:GithubTimeLine Name="gitTime"/&gt;&lt;Grid&gt; be careful not to put this control in the StackPanel, so you cannot scroll content now you can add some items 12345678ObservableCollection&lt;GithubTimeLine&gt; data = new ObservableCollection&lt;GithubTimeLine&gt;();var item = new GithubTimeLine() &#123; TitleLabel = "3.1.0", TitleInfo = "Aug 11th 2018", TitleStyle = ResourceHelper.GetResource&lt;Style&gt;(ResourceToken.LabelViolet) &#125;; item.Members.Add(new ContentMember() &#123; ContentTitle = "FIXED", ContentInfo = "Warn when committing to a protected branch", ContentStyle = ResourceHelper.GetResource&lt;Style&gt;(ResourceToken.LabelSuccess) &#125;); item.Members.Add(new ContentMember() &#123; ContentTitle = "ADDED", ContentInfo = "Warn when committing to a repository you don't have write access to", ContentStyle = ResourceHelper.GetResource&lt;Style&gt;(ResourceToken.LabelSuccess) &#125;); item.Members.Add(new ContentMember() &#123; ContentTitle = "IMPROVED", ContentInfo = "Adding integration for Xcode as external editor", ContentStyle = ResourceHelper.GetResource&lt;Style&gt;(ResourceToken.LabelPrimary) &#125;); data.Add(item); gitTime.ItemsSource = data; Attributes Property Description OrderBy Sorts the items in ascending or descending order, Available Types [AssendingTitleLabel, DessendingTitleLabel, AssendingTitleInfo, DessendingTitleInfo]]]></content>
  </entry>
  <entry>
    <title><![CDATA[Helpers]]></title>
    <url>%2Fhandycontrol%2FpersianToolkit%2Fhelpers%2Findex.html</url>
    <content type="text"><![CDATA[GlobalDataHelper GlobalDataHelper only Available in .NetCore &gt;= 3.0, so you cant use it in .Net Framework you can save and read your application settings object to a json file Example: first of all you need to create a class and inherit from the GlobalDataHelper class Then create your properties.123456public class AppConfig : GlobalDataHelper&lt;AppConfig&gt;&#123; public string Name &#123; get; set; &#125; public string Password &#123; get; set; &#125; = "pass"; public bool IsHash &#123; get; set; &#125; = true;&#125; now you need to call init method when application luanch. it is better you call it in app.cs ctor class 1234public App()&#123;GlobalDataHelper&lt;AppConfig&gt;.Init();&#125; you can set json file name and location. 1234public App()&#123;GlobalDataHelper&lt;AppConfig&gt;.Init(@"D:\Folder\App.json");&#125; Read/Write Settingsfor reading values 1MessageBox.Show(GlobalDataHelper&lt;AppConfig&gt;.Config.Name); for writing values123GlobalDataHelper&lt;AppConfig&gt;.Config.IsHash = false;GlobalDataHelper&lt;AppConfig&gt;.Config.Name = "Mahdi";GlobalDataHelper&lt;AppConfig&gt;.Save(); dont forget to call Save method after setting values CryptographyHelpersome method for generate hash and encrypt files Encrypt Text And Files with AESEncrypt &amp; Decrypt Text with AES123string text = CryptographyHelper.EncryptTextAES("Mahdi", "password");string text = CryptographyHelper.DecryptTextAES("G7Jlxs4gb98msDUOIdN1iA==", "password"); Encrypt &amp; Decrypt Files with AES123CryptographyHelper.EncryptFileAES(sourcefile, destination, "password");CryptographyHelper.DecryptFileAES(sourcefile, destination, "password"); Generating HashMD512string text = CryptographyHelper.GenerateMD5("mahdi");// result = F9C24B8F961D48841A9838CCA5274D8D SHA25612string text = CryptographyHelper.GenerateSHA256("mahdi");// result = 2e0af263c88c69ecc23a51a76b7a2442ed6a9dff080f275a27ec486d1a0e0148 SHA256 for File12string text = CryptographyHelper.GenerateSHA256ForFile(@"D:\test.zip");// result = 40aff63c88c69ecc23a51a76b7a2442ed6a9dff080f275a27ec486d1a0e0135 INIHelperInIHelper class is for working with ini file in simple way. Add Value you can use default section and path 123456InIHelper.AddValue("key1", "test1"); InIHelper.AddValue("key2", "test2"); InIHelper.AddValue("key3", "test3", "mySection"); InIHelper.AddValue("file4", "test4", "mySection"); InIHelper.AddValue("file5", "test5", "mySection"); InIHelper.AddValue("file6", "test6", "mySection2", @"D:\config.ini"); Read Value12345MessageBox.Info(InIHelper.ReadValue("key1"));// ORMessageBox.Info(InIHelper.ReadValue("key3", "mySection"));// ORMessageBox.Info(InIHelper.ReadValue("key3", "mySection", @"D:\config.ini")); Delete Key you can delete a key or section 123InIHelper.DeleteKey("key4", "mySection");InIHelper.DeleteSection("mySection");InIHelper.DeleteKey("key4", "mySection", @"D:\config.ini"); Exist Key you can check if a key exist or not 1MessageBox.Info(InIHelper.IsKeyExists("key4", "mySection")); RegistryHelperRegistryHelper class is for working with windows Registry Add Key value can be everything (bool, int, string,…), default HKEYType is CurrentUser for other type you need Admin Access 123RegistryHelper.AddOrUpdateKey("myKey", "myFolder", value);//ORRegistryHelper.AddOrUpdateRegistryKey("myKey4", "myFolder", "test", HKEYType.LocalMachine); Get Key you can cast value to any type you want 12RegistryHelper.GetKey&lt;bool&gt;("myKey", "myFolder");RegistryHelper.GetKey&lt;string&gt;("myKey", "myFolder"); Delete Key default value for IsDeleteSubFolder is False 123RegistryHelper.DeleteKey("myKey", "myFolder");// ORRegistryHelper.DeleteKey("myKey", "myFolder", True); UpdateHelperyou can use UpdateHelper for checking application updates Methods Method Description CheckForUpdate Use an uploaded xml file on the web to check if the update is available CheckForUpdateGithubRelease Use the GitHab Release Page to check if the update is available Check For Update with Server and xml First you must create xml file like this: 12345678&lt;?xml version="1.0" encoding="utf-8"?&gt; &lt;AppVersion&gt; &lt;version&gt;2.5.100.0&lt;/version&gt; &lt;url&gt;https://github.com/ghost1372/HandyControls/releases&lt;/url&gt; &lt;changelog&gt; Added UpdateHelper &lt;/changelog&gt; &lt;/AppVersion&gt; then you must upload this file to github or any host that support raw view. example for github Whenever your program is updated, just modify this file now we can check for update1234567891011var ver = UpdateHelper.CheckForUpdate("https://raw.githubusercontent.com/ghost1372/HandyControls/develop/Updater.xml"); if(ver.IsExistNewVersion) &#123; Growl.InfoGlobal("New Version Found!"); lblUrl.Content = ver.URL; txtChangelog.Text = ver.ChangeLog; &#125; else &#123; Growl.ErrorGlobal("you are using latest version"); &#125; Check For Update with Github Releasefirst you must create a new release tag in github repository: tag version must be in this format : 1.0.0.0 now we can check for update with github username and github repository12345678910111213141516171819var ver = UpdateHelper.CheckForUpdateGithubRelease("ghost1372", "HandyControls"); if(ver.IsExistNewVersion) &#123; Growl.InfoGlobal("New Version Found!"); lblUrl2.Text = ver.Url; lbl1.Text = ver.CreatedAt.ToString(); lbl2.Text = ver.PublishedAt.ToString(); //Asset is List so maybe there is more than one file you can use forech or increase index lbl3.Text = ver.Asset[0].browser_download_url; lbl4.Text = ver.IsPreRelease.ToString(); lbl5.Text = ver.Asset[0].size.ToString(); lbl6.Text = ver.Version; txtChangelog2.Text = ver.Changelog; &#125; else &#123; Growl.ErrorGlobal("you are using latest version"); &#125; InstanceHelperyou can use InstanceHelper for Run only one version of the program at a time write the following code in the App.cs file1InstanceHelper.IsSingleInstance(); The above method returns true or false, However, it does everything automatically (closing app, focusing running app, showing message) You can also change the message text or not display the message 1InstanceHelper.IsSingleInstance(false, "bye!");]]></content>
  </entry>
  <entry>
    <title><![CDATA[LoadingIndicator]]></title>
    <url>%2Fhandycontrol%2FpersianToolkit%2FloadingIndicator%2Findex.html</url>
    <content type="text"><![CDATA[LoadingIndicators is a collection of 11 animated loading indicators. Styles Style LoadingIndicatorArcsStyle LoadingIndicatorArcsRingStyle LoadingIndicatorDoubleBounceStyle LoadingIndicatorFlipPlaneStyle LoadingIndicatorPulseStyle LoadingIndicatorRingStyle LoadingIndicatorThreeDotsStyle LoadingIndicatorWaveStyle LoadingIndicatorLinesStyle LoadingIndicatorGridsStyle LoadingIndicatorRotateStyle Case1234567891011&lt;hc:LoadingIndicator SpeedRatio="&#123;Binding SpeedRatio&#125;" Style="&#123;DynamicResource LoadingIndicatorArcsStyle&#125;"/&gt;&lt;hc:LoadingIndicator SpeedRatio="&#123;Binding SpeedRatio&#125;" Style="&#123;DynamicResource LoadingIndicatorArcsRingStyle&#125;"/&gt;&lt;hc:LoadingIndicator SpeedRatio="&#123;Binding SpeedRatio&#125;" Style="&#123;DynamicResource LoadingIndicatorDoubleBounceStyle&#125;"/&gt;&lt;hc:LoadingIndicator SpeedRatio="&#123;Binding SpeedRatio&#125;" Style="&#123;DynamicResource LoadingIndicatorFlipPlaneStyle&#125;"/&gt;&lt;hc:LoadingIndicator SpeedRatio="&#123;Binding SpeedRatio&#125;" Style="&#123;DynamicResource LoadingIndicatorPulseStyle&#125;"/&gt;&lt;hc:LoadingIndicator SpeedRatio="&#123;Binding SpeedRatio&#125;" Style="&#123;DynamicResource LoadingIndicatorRingStyle&#125;"/&gt;&lt;hc:LoadingIndicator SpeedRatio="&#123;Binding SpeedRatio&#125;" Style="&#123;DynamicResource LoadingIndicatorThreeDotsStyle&#125;"/&gt;&lt;hc:LoadingIndicator SpeedRatio="&#123;Binding SpeedRatio&#125;" Style="&#123;DynamicResource LoadingIndicatorWaveStyle&#125;"/&gt;&lt;hc:LoadingIndicator SpeedRatio="&#123;Binding SpeedRatio&#125;" Style="&#123;DynamicResource LoadingIndicatorLinesStyle&#125;"/&gt;&lt;hc:LoadingIndicator SpeedRatio="&#123;Binding SpeedRatio&#125;" Style="&#123;DynamicResource LoadingIndicatorGridsStyle&#125;"/&gt;&lt;hc:LoadingIndicator SpeedRatio="&#123;Binding SpeedRatio&#125;" Style="&#123;DynamicResource LoadingIndicatorRotateStyle&#125;"/&gt;]]></content>
  </entry>
  <entry>
    <title><![CDATA[MainContentBackground]]></title>
    <url>%2Fhandycontrol%2FpersianToolkit%2FmainContentBackground%2Findex.html</url>
    <content type="text"><![CDATA[Styles Style LiveStyle MainContentBackgroundMainContentBackground is a border control with Checkerboard and LiveStyle Background123&lt;hc:MainContentBackground&gt; &lt;Button Content="Click" Width="200"/&gt;&lt;/hc:MainContentBackground&gt; for live style:123 &lt;hc:MainContentBackground Background="White" Style="&#123;StaticResource LiveStyle&#125;" Margin="10" Width="800" Height="500"&gt; &lt;Button Content="Click" Width="200"/&gt;&lt;/hc:MainContentBackground&gt;]]></content>
  </entry>
  <entry>
    <title><![CDATA[PersianCalendar]]></title>
    <url>%2Fhandycontrol%2FpersianToolkit%2FpersianCalendar%2Findex.html</url>
    <content type="text"><![CDATA[PersianCalendar is Based on Calendar All methods and styles are available in this control example: 1&lt;hc:PersianCalendar Margin="10"/&gt; Methods Method GetSelectedDateToGregorianDate SelectedDateToString]]></content>
  </entry>
  <entry>
    <title><![CDATA[PersianCalendarWithClock]]></title>
    <url>%2Fhandycontrol%2FpersianToolkit%2FpersianCalendarWithClock%2Findex.html</url>
    <content type="text"><![CDATA[PersianCalendarWithClock is Based on CalendarWithClock All methods and styles are available in this control 1&lt;hc:PersianCalendarWithClock Margin="10" ClockConfirm="Ok"/&gt;]]></content>
  </entry>
  <entry>
    <title><![CDATA[PersianDate]]></title>
    <url>%2Fhandycontrol%2FpersianToolkit%2FpersianDate%2Findex.html</url>
    <content type="text"><![CDATA[with this class you can convert current date to Persian Date there is also some extension method for DateTime.Now example: 12345678910111213141516PersianDate persian = new PersianDate(); Console.WriteLine(persian.GetShamsiYear(DateTime.Now));//Result : 1398Console.WriteLine(persian.GetShamsiMonthName(DateTime.Now));//Result : بهمنConsole.WriteLine(persian.GetShamsiDayString(DateTime.Now));//Result : 03Console.WriteLine(persian.GetShamsiDayName(DateTime.Now));//Result : پنجشنبهConsole.WriteLine(persian.GetShamsiDayShortName(DateTime.Now));//Result : پ Extensions12345678Console.WriteLine(DateTime.Now.ToShamsiDate());//Result : 1398/11/03Console.WriteLine(DateTime.Now.ToShortShamsiDate());//Result : 98/11/03Console.WriteLine(DateTime.Now.ToLongShamsiDate());//Result : پنجشنبه 3 بهمن 1398]]></content>
  </entry>
  <entry>
    <title><![CDATA[MaskedTextBox]]></title>
    <url>%2Fhandycontrol%2FpersianToolkit%2FmaskedTextBox%2Findex.html</url>
    <content type="text"><![CDATA[Represents a control that limits the input text to the format determined by the specified mask. Case1&lt;hc:MaskedTextBox Mask=&quot;(000) 000-0000&quot;/&gt; Masks Masking Element Description 0 Digit, required. This element will accept any single digit between 0 and 9. 9 Digit or space, optional. # Digit or space, optional. If this position is blank in the mask, it will be rendered as a space in the Text property. Plus (+) and minus (-) signs are allowed. L Letter, required. Restricts input to the ASCII letters a-z and A-Z. This mask element is equivalent to a-zA-Z in regular expressions. ? Letter, optional. Restricts input to the ASCII letters a-z and A-Z. This mask element is equivalent to a-zA-Z? in regular expressions. &amp; Character, required. If the AsciiOnly property is set to true, this element behaves like the “L” element. C Character, optional. Any non-control character. If the AsciiOnly property is set to true, this element behaves like the “?” element. A Alphanumeric, optional. If the AsciiOnly property is set to true, the only characters it will accept are the ASCII letters a-z and A-Z. a Alphanumeric, optional. If the AsciiOnly property is set to true, the only characters it will accept are the ASCII letters a-z and A-Z. . Decimal placeholder. The actual display character used will be the decimal symbol appropriate to the format provider, as determined by the control’s FormatProvider property. , Thousands placeholder. The actual display character used will be the thousands placeholder appropriate to the format provider, as determined by the control’s FormatProvider property. : Time separator. The actual display character used will be the time symbol appropriate to the format provider, as determined by the control’s FormatProvider property. / Date separator. The actual display character used will be the date symbol appropriate to the format provider, as determined by the control’s FormatProvider property. $ Currency symbol. The actual character displayed will be the currency symbol appropriate to the format provider, as determined by the control’s FormatProvider property. &lt; Shift down. Converts all characters that follow to lowercase. &gt; Shift up. Converts all characters that follow to uppercase. Disable a previous shift up or shift down. \ Escape. Escapes a mask character, turning it into a literal. “\” is the escape sequence for a backslash. Attributes Property Description AutoMoveFocus Gets or sets a value indicating if the focus can navigate in the appropriate flow direction (e.g., from one cell to another when a cell is being edited) when the cursor is at the beginning or end of the auto-select text box. (Inherited from Xceed.Wpf.Toolkit.AutoSelectTextBox) AutoSelectBehavior Gets or sets a value indicating how the content of the auto-select text box is selected (Never or OnFocus). By default Never. BeepOnError Gets or sets whether a beep sound will be played on error. (Inherited from Xceed.Wpf.Toolkit.Primitives.ValueRangeTextBox) FormatProvider Gets or sets the format provider. (Inherited from Xceed.Wpf.Toolkit.Primitives.ValueRangeTextBox) HasParsingError Gets whether the control has a parsing error. (Inherited from Xceed.Wpf.Toolkit.Primitives.ValueRangeTextBox) HasValidationError Gets whether the control has a validation error. (Inherited from Xceed.Wpf.Toolkit.Primitives.ValueRangeTextBox) InsertKeyMode Gets or sets a value representing the text insertion mode of the masked text box. IsMaskCompleted Gets a value indicating if all required characters have been inputted into the mask. IsMaskFull Gets a value indicating if all characters, required and optional, have been inputted into the mask. IsValueOutOfRange Gets whether the control’s value is out of range. (Inherited from Xceed.Wpf.Toolkit.Primitives.ValueRangeTextBox) Mask Gets or sets the input mask. MaskTextProvider Gets the MaskedTextProvider that was used to mask the input text. MaxValue Gets or sets the maximum value of the control. (Inherited from Xceed.Wpf.Toolkit.Primitives.ValueRangeTextBox) MinValue Gets or sets the minimum value of the control. (Inherited from Xceed.Wpf.Toolkit.Primitives.ValueRangeTextBox) NullValue Gets or sets the null value. (Inherited from Xceed.Wpf.Toolkit.Primitives.ValueRangeTextBox) PromptChar Gets or sets the character that represents the positions in the masked text box that require user input. RejectInputOnFirstFailure Gets or sets a value indicating if inputted text that is pasted into the masked text box can be rejected if it contains an invalid character for the corresponding mask position. ResetOnPrompt Gets or sets a value indicating if the character at the current caret position should be reset when the prompt character is pressed. ResetOnSpace Gets or sets a value indicating if the character at the current caret position should be reset when the space bar is pressed. RestrictToAscii Gets or sets a value indicating if the masked text box accepts non-ASCII characters. SkipLiterals Gets or sets a value indicating if literal values can be overwritten by their same values. Text Content of the MaskedTextBox. (Inherited from System.Windows.Controls.TextBox) Value Gets or sets the value of the MaskedTextBox. (Inherited from Xceed.Wpf.Toolkit.Primitives.ValueRangeTextBox) ValueDataType Gets or sets the Type of the value. (Inherited from Xceed.Wpf.Toolkit.Primitives.ValueRangeTextBox) Events Event Description QueryTextFromValue Raised when an attempt is made to convert the specified value into its string representation. (Inherited from Xceed.Wpf.Toolkit.Primitives.ValueRangeTextBox) QueryValueFromText Raised when an attempt is made to extract a value from the specified text. (Inherited from Xceed.Wpf.Toolkit.Primitives.ValueRangeTextBox)]]></content>
  </entry>
  <entry>
    <title><![CDATA[PersianDatePicker]]></title>
    <url>%2Fhandycontrol%2FpersianToolkit%2FpersianDatePicker%2Findex.html</url>
    <content type="text"><![CDATA[PersianDatePicker is Based on DatePicker All methods and styles are available in this control Note that you must write Persian at the bottom of the style name ==&gt; DateTimePickerExtendPersian example: 1&lt;hc:PersianDatePicker Margin="10"/&gt;]]></content>
  </entry>
  <entry>
    <title><![CDATA[SpeedoMeter]]></title>
    <url>%2Fhandycontrol%2FpersianToolkit%2FspeedoMeter%2Findex.html</url>
    <content type="text"><![CDATA[Case1&lt;hc:SpeedoMeter/&gt; Attributes Property Description Value ValueColor Status StatusColor StrokeColor ValueFontSize StatusFontSize MaximumValue ValueVisibility StatusVisibility]]></content>
  </entry>
  <entry>
    <title><![CDATA[PersianDateTimePicker]]></title>
    <url>%2Fhandycontrol%2FpersianToolkit%2FpersianDateTimePicker%2Findex.html</url>
    <content type="text"><![CDATA[PersianDateTimePicker is Based on DateTimePicker All methods and styles are available in this control Note that you must write Persian at the bottom of the style name ==&gt; DateTimePickerExtendPersian example: 1&lt;hc:PersianDateTimePicker Margin="10"/&gt;]]></content>
  </entry>
  <entry>
    <title><![CDATA[Effect]]></title>
    <url>%2Fhandycontrol%2Ftools%2Feffect%2Findex.html</url>
    <content type="text"><![CDATA[All effects are inherited from the EffectBase class The following property is available in all effects Attributes Property Input GrayScaleEffectAttributes Property Scale 12345&lt;Image Width="120" Height="120" Source="/HandyControlDemo;component/Resources/Img/Album/10.jpg"&gt; &lt;Image.Effect&gt; &lt;hc:GrayScaleEffect/&gt;&lt;/Image.Effect&gt; &lt;/Image&gt; ColorComplementEffect12345&lt;Image Width="120" Height="120" Source="/HandyControlDemo;component/Resources/Img/Album/10.jpg"&gt; &lt;Image.Effect&gt; &lt;hc:ColorComplementEffect/&gt; &lt;/Image.Effect&gt; &lt;/Image&gt; ColorMatrixEffectAttributes Property Property M11 M12 M21 M22 M31 M32 M41 M42 M51 M52 M13 M14 M23 M24 M33 M34 M43 M44 M53 M54 12345&lt;Image Width="120" Height="120" Source="/HandyControlDemo;component/Resources/Img/Album/10.jpg"&gt; &lt;Image.Effect&gt; &lt;hc:ColorMatrixEffect M11="-1" M22="-1" M33="-1" M41="1" M42="1" M43="1" M44="1" M51="1"/&gt; &lt;/Image.Effect&gt;&lt;/Image&gt; or 12345&lt;Image Width="120" Height="120" Source="/HandyControlDemo;component/Resources/Img/Album/10.jpg"&gt; &lt;Image.Effect&gt; &lt;hc:ColorMatrixEffect M11="1.5" M21="1.5" M31="1.5" M12="1.5" M22="1.5" M32="1.5" M13="1.5" M23="1.5" M33="1.5" M51="-1" M52="-1" M53="-1"/&gt; &lt;/Image.Effect&gt;&lt;/Image&gt; ContrastEffectAttributes Property Contrast 12345&lt;Border&gt; &lt;Border.Effect&gt; &lt;hc:ContrastEffect Contrast="20"/&gt; &lt;/Border.Effect&gt;&lt;/Border&gt; BrightnessEffectAttributes Property Brightness 12345&lt;Border&gt; &lt;Border.Effect&gt; &lt;hc:BrightnessEffect Brightness="1"/&gt; &lt;/Border.Effect&gt;&lt;/Border&gt; GooeyEffectadd this to resources123456789101112131415161718192021 &lt;UserControl.Resources&gt; &lt;Storyboard x:Key="StoryboardLoaded" RepeatBehavior="Forever"&gt; &lt;DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(RotateTransform.Angle)" Storyboard.TargetName="TransformRotate1"&gt;&lt;EasingDoubleKeyFrame KeyTime="0:0:3" Value="90"&gt;&lt;/EasingDoubleKeyFrame&gt; &lt;/DoubleAnimationUsingKeyFrames&gt; &lt;DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(RotateTransform.Angle)" Storyboard.TargetName="TransformRotate2"&gt;&lt;EasingDoubleKeyFrame KeyTime="0:0:3" Value="90"&gt;&lt;/EasingDoubleKeyFrame&gt; &lt;/DoubleAnimationUsingKeyFrames&gt; &lt;DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(RotateTransform.Angle)" Storyboard.TargetName="TransformRotate3"&gt;&lt;EasingDoubleKeyFrame KeyTime="0:0:3" Value="-90"&gt;&lt;/EasingDoubleKeyFrame&gt; &lt;/DoubleAnimationUsingKeyFrames&gt; &lt;/Storyboard&gt;&lt;/UserControl.Resources&gt;&lt;UserControl.Triggers&gt; &lt;EventTrigger RoutedEvent="FrameworkElement.Loaded"&gt; &lt;BeginStoryboard Storyboard="&#123;StaticResource StoryboardLoaded&#125;"/&gt; &lt;/EventTrigger&gt;&lt;/UserControl.Triggers&gt; then 12345678910111213141516171819202122232425262728293031323334353637383940 &lt;Border&gt; &lt;Border.Effect&gt; &lt;hc:ContrastEffect Contrast="20"/&gt; &lt;/Border.Effect&gt; &lt;Border&gt; &lt;Border.Effect&gt;&lt;hc:BrightnessEffect Brightness="1"/&gt; &lt;/Border.Effect&gt; &lt;Border&gt;&lt;Border.Effect&gt; &lt;BlurEffect Radius="30"/&gt;&lt;/Border.Effect&gt;&lt;StackPanel&gt; &lt;StackPanel Orientation="Horizontal" HorizontalAlignment="Center"&gt; &lt;Border Width="100" Height="100" Background="Red" RenderTransformOrigin="0.5,0.5"&gt;&lt;Border.RenderTransform&gt; &lt;TransformGroup&gt; &lt;RotateTransform Angle="0" x:Name="TransformRotate1"/&gt; &lt;/TransformGroup&gt;&lt;/Border.RenderTransform&gt; &lt;/Border&gt; &lt;Border Margin="30,0,0,0" Width="100" Height="100" Background="Red" RenderTransformOrigin="0.5,0.5"&gt;&lt;Border.RenderTransform&gt; &lt;TransformGroup&gt; &lt;RotateTransform Angle="0" x:Name="TransformRotate2"/&gt; &lt;/TransformGroup&gt;&lt;/Border.RenderTransform&gt; &lt;/Border&gt; &lt;/StackPanel&gt; &lt;Border Width="100" Height="100" Background="Red" HorizontalAlignment="Center" RenderTransformOrigin="0.5,0.5"&gt; &lt;Border.RenderTransform&gt;&lt;TransformGroup&gt; &lt;RotateTransform Angle="0" x:Name="TransformRotate3"/&gt;&lt;/TransformGroup&gt; &lt;/Border.RenderTransform&gt; &lt;/Border&gt;&lt;/StackPanel&gt; &lt;/Border&gt; &lt;/Border&gt;&lt;/Border&gt; BlendEffectBoxAttributes Property Content 1234567891011121314151617181920212223242526272829303132 &lt;hc:BlendEffectBox&gt; &lt;hc:BlendEffectBox.Effects&gt; &lt;BlurEffect Radius="30"/&gt; &lt;hc:BrightnessEffect Brightness="1"/&gt; &lt;hc:ContrastEffect Contrast="20"/&gt; &lt;/hc:BlendEffectBox.Effects&gt; &lt;StackPanel&gt; &lt;StackPanel Orientation="Horizontal" HorizontalAlignment="Center"&gt;&lt;Border Width="100" Height="100" Background="Red" RenderTransformOrigin="0.5,0.5"&gt; &lt;Border.RenderTransform&gt; &lt;TransformGroup&gt;&lt;RotateTransform Angle="0" x:Name="TransformRotate1"/&gt; &lt;/TransformGroup&gt; &lt;/Border.RenderTransform&gt;&lt;/Border&gt;&lt;Border Margin="30,0,0,0" Width="100" Height="100" Background="Red" RenderTransformOrigin="0.5,0.5"&gt; &lt;Border.RenderTransform&gt; &lt;TransformGroup&gt;&lt;RotateTransform Angle="0" x:Name="TransformRotate2"/&gt; &lt;/TransformGroup&gt; &lt;/Border.RenderTransform&gt;&lt;/Border&gt; &lt;/StackPanel&gt; &lt;Border Width="100" Height="100" Background="Red" HorizontalAlignment="Center" RenderTransformOrigin="0.5,0.5"&gt;&lt;Border.RenderTransform&gt; &lt;TransformGroup&gt; &lt;RotateTransform Angle="0" x:Name="TransformRotate3"/&gt; &lt;/TransformGroup&gt;&lt;/Border.RenderTransform&gt; &lt;/Border&gt; &lt;/StackPanel&gt;&lt;/hc:BlendEffectBox&gt;]]></content>
  </entry>
  <entry>
    <title><![CDATA[HatchBrushGenerator]]></title>
    <url>%2Fhandycontrol%2Ftools%2FhatchBrushGenerator%2Findex.html</url>
    <content type="text"><![CDATA[Styles Style Horizontal Vertical ForwardDiagonal BackwardDiagonal Cross DiagonalCross Percent05 Percent10 Percent20 Percent25 Percent30 Percent40 Percent50 Percent60 Percent70 Percent75 Percent80 Percent90 LightDownwardDiagonal LightUpwardDiagonal DarkDownwardDiagonal DarkUpwardDiagonal WideDownwardDiagonal WideUpwardDiagonal LightVertical LightHorizontal NarrowVertical NarrowHorizontal DarkVertical DarkHorizontal DashedDownwardDiagonal DashedUpwardDiagonal DashedHorizontal DashedVertical SmallConfetti LargeConfetti ZigZag Wave DiagonalBrick HorizontalBrick Weave Plaid Divot DottedGrid DottedDiamond Shingle Trellis Sphere SmallGrid SmallCheckerBoard LargeCheckerBoard OutlinedDiamond SolidDiamond Methods Method GetHashCode GetHatchBrush Casefirst create ObjectProvider in App.xamlxmlns:sys=&quot;clr-namespace:System;assembly=mscorlib&quot; 12345 &lt;ObjectDataProvider x:Key="HatchStyles" MethodName="GetValues" ObjectType="sys:Enum"&gt; &lt;ObjectDataProvider.MethodParameters&gt; &lt;x:Type Type="hc:HatchStyle"/&gt; &lt;/ObjectDataProvider.MethodParameters&gt;&lt;/ObjectDataProvider&gt; then create a HatchBrushConverter converter 1234567891011121314151617181920212223public class HatchBrushConverter : IValueConverter &#123; private readonly HatchBrushGenerator _brushGenerator; public HatchBrushConverter() &#123; _brushGenerator = new HatchBrushGenerator(); &#125; public object Convert(object value, Type targetType, object parameter, CultureInfo culture) &#123; if (value is HatchStyle style) &#123; return _brushGenerator.GetHatchBrush(style, ResourceHelper.GetResource&lt;Color&gt;(&quot;DarkPrimaryColor&quot;), ResourceHelper.GetResource&lt;Color&gt;(&quot;BackgroundColor&quot;)); &#125; return Brushes.Transparent; &#125; public object ConvertBack(object value, Type targetType, object parameter, CultureInfo culture) &#123; throw new NotImplementedException(); &#125; &#125; now you can use hatch 123&lt;Border Style="&#123;StaticResource BorderRegion&#125;" Margin="32" Background="&#123;Binding SelectedValue,ElementName=ComboBoxDemo,Converter=&#123;StaticResource HatchBrushConverter&#125;&#125;"&gt; &lt;ComboBox SelectedIndex="0" VerticalAlignment="Center" Name="ComboBoxDemo" Width="180" ItemsSource="&#123;Binding Source=&#123;StaticResource HatchStyles&#125;&#125;"/&gt; &lt;/Border&gt;]]></content>
  </entry>
  <entry>
    <title><![CDATA[MorphingAnimation]]></title>
    <url>%2Fhandycontrol%2Ftools%2FmorphingAnimation%2Findex.html</url>
    <content type="text"><![CDATA[With MorphingAnimation You can change a geometry with animation to a different geometry Geometries must have the same number of points! in your xaml add resources and storyboard 1234567891011121314151617181920212223242526&lt;UserControl.Resources&gt; &lt;Storyboard x:Key="StoryboardOnLoaded" RepeatBehavior="Forever" AutoReverse="True"&gt; &lt;hc:GeometryAnimationUsingKeyFrames Storyboard.TargetProperty="Data" Storyboard.TargetName="PathDemo"&gt; &lt;hc:DiscreteGeometryKeyFrame KeyTime="0:0:0.7" Value="&#123;StaticResource FaceBookGeometry&#125;"/&gt; &lt;hc:EasingGeometryKeyFrame KeyTime="0:0:1.2" Value="&#123;StaticResource TwitterGeometry&#125;"&gt; &lt;hc:EasingGeometryKeyFrame.EasingFunction&gt; &lt;QuarticEase EasingMode="EaseInOut"/&gt; &lt;/hc:EasingGeometryKeyFrame.EasingFunction&gt; &lt;/hc:EasingGeometryKeyFrame&gt; &lt;/hc:GeometryAnimationUsingKeyFrames&gt; &lt;ColorAnimationUsingKeyFrames Storyboard.TargetProperty="Fill.(SolidColorBrush.Color)" Storyboard.TargetName="PathDemo"&gt; &lt;DiscreteColorKeyFrame KeyTime="0:0:0.7" Value="#3b5998"/&gt; &lt;EasingColorKeyFrame KeyTime="0:0:1.2" Value="#4099ff"&gt; &lt;EasingColorKeyFrame.EasingFunction&gt; &lt;QuarticEase EasingMode="EaseInOut"/&gt; &lt;/EasingColorKeyFrame.EasingFunction&gt; &lt;/EasingColorKeyFrame&gt; &lt;EasingColorKeyFrame KeyTime="0:0:1.9" Value="#4099ff"/&gt; &lt;/ColorAnimationUsingKeyFrames&gt; &lt;/Storyboard&gt; &lt;/UserControl.Resources&gt; &lt;UserControl.Triggers&gt; &lt;EventTrigger RoutedEvent="FrameworkElement.Loaded"&gt; &lt;BeginStoryboard Storyboard="&#123;StaticResource StoryboardOnLoaded&#125;"/&gt; &lt;/EventTrigger&gt; &lt;/UserControl.Triggers&gt; now we need a path to display geometry 1&lt;Path Name="PathDemo" Width="100" Height="100" Data="&#123;StaticResource FaceBookGeometry&#125;" Fill="#3b5998"/&gt;]]></content>
  </entry>
</search>
